"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var classnames_1 = __importDefault(require("classnames"));
var mobx_react_1 = require("mobx-react");
var react_1 = __importDefault(require("react"));
var TooltipsComponent = /** @class */ (function (_super) {
    __extends(TooltipsComponent, _super);
    function TooltipsComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TooltipsComponent.prototype.renderHeader = function (headerData, formatter) {
        if (!headerData) {
            return null;
        }
        return formatter ? formatter(headerData) : headerData.value;
    };
    TooltipsComponent.prototype.render = function () {
        var _a = this.props.chartStore, isTooltipVisible = _a.isTooltipVisible, tooltipData = _a.tooltipData, tooltipPosition = _a.tooltipPosition, tooltipHeaderFormatter = _a.tooltipHeaderFormatter;
        if (!isTooltipVisible.get()) {
            return react_1.default.createElement("div", { className: "echTooltip echTooltip--hidden" });
        }
        return (react_1.default.createElement("div", { className: "echTooltip", style: { transform: tooltipPosition.transform } },
            react_1.default.createElement("div", { className: "echTooltip__header" }, this.renderHeader(tooltipData[0], tooltipHeaderFormatter)),
            react_1.default.createElement("div", { className: "echTooltip__list" }, tooltipData.slice(1).map(function (_a) {
                var name = _a.name, value = _a.value, color = _a.color, isHighlighted = _a.isHighlighted, seriesKey = _a.seriesKey, yAccessor = _a.yAccessor;
                var classes = classnames_1.default('echTooltip__item', {
                    /* eslint @typescript-eslint/camelcase:0 */
                    echTooltip__rowHighlighted: isHighlighted,
                });
                return (react_1.default.createElement("div", { key: seriesKey + "--" + yAccessor, className: classes, style: {
                        borderLeftColor: color,
                    } },
                    react_1.default.createElement("span", { className: "echTooltip__label" }, name),
                    react_1.default.createElement("span", { className: "echTooltip__value" }, value)));
            }))));
    };
    TooltipsComponent.displayName = 'Tooltips';
    return TooltipsComponent;
}(react_1.default.Component));
exports.Tooltips = mobx_react_1.inject('chartStore')(mobx_react_1.observer(TooltipsComponent));
//# sourceMappingURL=tooltips.js.map