{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/plugins/inspector/public/plugin.js","dependencies":[{"path":"src/plugins/inspector/public/plugin.js","mtime":1572296413588},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkluc3BlY3RvclB1YmxpY1BsdWdpbiA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3ZpZXdfcmVnaXN0cnkgPSByZXF1aXJlKCIuL3ZpZXdfcmVnaXN0cnkiKTsKCnZhciBfaW5zcGVjdG9yX3BhbmVsID0gcmVxdWlyZSgiLi91aS9pbnNwZWN0b3JfcGFuZWwiKTsKCnZhciBfdmlld3MgPSByZXF1aXJlKCIuL3ZpZXdzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsKICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7CiAgICByZXR1cm4gb2JqOwogIH0gZWxzZSB7CiAgICB2YXIgbmV3T2JqID0ge307CgogICAgaWYgKG9iaiAhPSBudWxsKSB7CiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgewogICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307CgogICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7CiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIG5ld09iai5kZWZhdWx0ID0gb2JqOwogICAgcmV0dXJuIG5ld09iajsKICB9Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwogIH0KfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgSW5zcGVjdG9yUHVibGljUGx1Z2luID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSW5zcGVjdG9yUHVibGljUGx1Z2luKGluaXRpYWxpemVyQ29udGV4dCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluc3BlY3RvclB1YmxpY1BsdWdpbik7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJ2aWV3cyIsIHZvaWQgMCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSW5zcGVjdG9yUHVibGljUGx1Z2luLCBbewogICAga2V5OiAic2V0dXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zZXR1cCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoY29yZSkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMudmlld3MgPSBuZXcgX3ZpZXdfcmVnaXN0cnkuSW5zcGVjdG9yVmlld1JlZ2lzdHJ5KCk7CiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLnJlZ2lzdGVyKCgwLCBfdmlld3MuZ2V0RGF0YVZpZXdEZXNjcmlwdGlvbikoY29yZS51aVNldHRpbmdzKSk7CiAgICAgICAgICAgICAgICB0aGlzLnZpZXdzLnJlZ2lzdGVyKCgwLCBfdmlld3MuZ2V0UmVxdWVzdHNWaWV3RGVzY3JpcHRpb24pKCkpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICByZWdpc3RlclZpZXc6IHRoaXMudmlld3MucmVnaXN0ZXIuYmluZCh0aGlzLnZpZXdzKSwKICAgICAgICAgICAgICAgICAgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6IHsKICAgICAgICAgICAgICAgICAgICB2aWV3czogdGhpcy52aWV3cwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHNldHVwKF94KSB7CiAgICAgICAgcmV0dXJuIF9zZXR1cC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2V0dXA7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJzdGFydCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoY29yZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGlzQXZhaWxhYmxlID0gZnVuY3Rpb24gaXNBdmFpbGFibGUoYWRhcHRlcnMpIHsKICAgICAgICByZXR1cm4gX3RoaXMudmlld3MuZ2V0VmlzaWJsZShhZGFwdGVycykubGVuZ3RoID4gMDsKICAgICAgfTsKCiAgICAgIHZhciBjbG9zZUJ1dHRvbkxhYmVsID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2luc3BlY3Rvci5jbG9zZUJ1dHRvbicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0Nsb3NlIEluc3BlY3RvcicKICAgICAgfSk7CgogICAgICB2YXIgb3BlbiA9IGZ1bmN0aW9uIG9wZW4oYWRhcHRlcnMpIHsKICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307CgogICAgICAgIHZhciB2aWV3cyA9IF90aGlzLnZpZXdzLmdldFZpc2libGUoYWRhcHRlcnMpOyAvLyBEb24ndCBvcGVuIGluc3BlY3RvciBpZiB0aGVyZSBhcmUgbm8gdmlld3MgYXZhaWxhYmxlIGZvciB0aGUgcGFzc2VkIGFkYXB0ZXJzCgoKICAgICAgICBpZiAoIXZpZXdzIHx8IHZpZXdzLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUcmllZCB0byBvcGVuIGFuIGluc3BlY3RvciB3aXRob3V0IHZpZXdzIGJlaW5nIGF2YWlsYWJsZS5cbiAgICAgICAgICBNYWtlIHN1cmUgdG8gY2FsbCBJbnNwZWN0b3IuaXNBdmFpbGFibGUoKSB3aXRoIHRoZSBzYW1lIGFkYXB0ZXJzIGJlZm9yZSB0byBjaGVja1xuICAgICAgICAgIGlmIGFuIGluc3BlY3RvciBjYW4gYmUgc2hvd24uIik7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gY29yZS5vdmVybGF5cy5vcGVuRmx5b3V0KFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2luc3BlY3Rvcl9wYW5lbC5JbnNwZWN0b3JQYW5lbCwgewogICAgICAgICAgdmlld3M6IHZpZXdzLAogICAgICAgICAgYWRhcHRlcnM6IGFkYXB0ZXJzLAogICAgICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUKICAgICAgICB9KSwgewogICAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ2luc3BlY3RvclBhbmVsJywKICAgICAgICAgIGNsb3NlQnV0dG9uQXJpYUxhYmVsOiBjbG9zZUJ1dHRvbkxhYmVsCiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICByZXR1cm4gewogICAgICAgIGlzQXZhaWxhYmxlOiBpc0F2YWlsYWJsZSwKICAgICAgICBvcGVuOiBvcGVuCiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAic3RvcCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHt9CiAgfV0pOwoKICByZXR1cm4gSW5zcGVjdG9yUHVibGljUGx1Z2luOwp9KCk7CgpleHBvcnRzLkluc3BlY3RvclB1YmxpY1BsdWdpbiA9IEluc3BlY3RvclB1YmxpY1BsdWdpbjs="},null]}