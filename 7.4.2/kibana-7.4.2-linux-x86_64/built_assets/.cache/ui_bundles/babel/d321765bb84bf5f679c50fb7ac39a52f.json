{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/metrics/public/components/vis_editor_visualization.js","dependencies":[{"path":"src/legacy/core_plugins/metrics/public/components/vis_editor_visualization.js","mtime":1572296411044},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlZpc0VkaXRvclZpc3VhbGl6YXRpb24gPSB2b2lkIDA7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF92aXN1YWxpemVfbG9hZGVyID0gcmVxdWlyZSgidWkvdmlzdWFsaXplL2xvYWRlci92aXN1YWxpemVfbG9hZGVyIik7Cgp2YXIgX3JlYWN0MiA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9nZXRfaW50ZXJ2YWwgPSByZXF1aXJlKCIuL2xpYi9nZXRfaW50ZXJ2YWwiKTsKCnZhciBfcGFuZWxfdHlwZXMgPSByZXF1aXJlKCIuLi8uLi9jb21tb24vcGFuZWxfdHlwZXMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBNSU5fQ0hBUlRfSEVJR0hUID0gMjUwOwoKdmFyIFZpc0VkaXRvclZpc3VhbGl6YXRpb25VSSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9Db21wb25lbnQpIHsKICBfaW5oZXJpdHMoVmlzRWRpdG9yVmlzdWFsaXphdGlvblVJLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gVmlzRWRpdG9yVmlzdWFsaXphdGlvblVJKHByb3BzKSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpc0VkaXRvclZpc3VhbGl6YXRpb25VSSk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoVmlzRWRpdG9yVmlzdWFsaXphdGlvblVJKS5jYWxsKHRoaXMsIHByb3BzKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaGFuZGxlTW91c2VEb3duIiwgZnVuY3Rpb24gKCkgewogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApOwoKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGRyYWdnaW5nOiB0cnVlCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiaGFuZGxlTW91c2VVcCIsIGZ1bmN0aW9uICgpIHsKICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTsKCiAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICBkcmFnZ2luZzogZmFsc2UKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJoYW5kbGVNb3VzZU1vdmUiLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgaWYgKF90aGlzLnN0YXRlLmRyYWdnaW5nKSB7CiAgICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLm1heChNSU5fQ0hBUlRfSEVJR0hULCBwcmV2U3RhdGUuaGVpZ2h0ICsgZXZlbnQubW92ZW1lbnRZKQogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25TaXplSGFuZGxlS2V5RG93biIsIGZ1bmN0aW9uIChldikgewogICAgICB2YXIga2V5Q29kZSA9IGV2LmtleUNvZGU7CgogICAgICBpZiAoa2V5Q29kZSA9PT0gX2V1aS5rZXlDb2Rlcy5VUCB8fCBrZXlDb2RlID09PSBfZXVpLmtleUNvZGVzLkRPV04pIHsKICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOwoKICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7CiAgICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gcHJldlN0YXRlLmhlaWdodCArIChrZXlDb2RlID09PSBfZXVpLmtleUNvZGVzLlVQID8gLTE1IDogMTUpOwogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLm1heChNSU5fQ0hBUlRfSEVJR0hULCBuZXdIZWlnaHQpCiAgICAgICAgICB9OwogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKCiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgaGVpZ2h0OiBNSU5fQ0hBUlRfSEVJR0hULAogICAgICBkcmFnZ2luZzogZmFsc2UsCiAgICAgIHBhbmVsSW50ZXJ2YWw6IDAKICAgIH07CiAgICBfdGhpcy5fdmlzRWwgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVSZWYoKTsKICAgIF90aGlzLl9zdWJzY3JpcHRpb24gPSBudWxsOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZpc0VkaXRvclZpc3VhbGl6YXRpb25VSSwgW3sKICAgIGtleTogIl9sb2FkVmlzdWFsaXphdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2xvYWRWaXN1YWxpemF0aW9uMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAgIHZhciBsb2FkZXIsIF90aGlzJHByb3BzLCB1aVN0YXRlLCB0aW1lUmFuZ2UsIGFwcFN0YXRlLCBzYXZlZE9iaiwgb25EYXRhQ2hhbmdlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3Zpc3VhbGl6ZV9sb2FkZXIuZ2V0VmlzdWFsaXplTG9hZGVyKSgpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBsb2FkZXIgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLl92aXNFbC5jdXJyZW50KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLCB1aVN0YXRlID0gX3RoaXMkcHJvcHMudWlTdGF0ZSwgdGltZVJhbmdlID0gX3RoaXMkcHJvcHMudGltZVJhbmdlLCBhcHBTdGF0ZSA9IF90aGlzJHByb3BzLmFwcFN0YXRlLCBzYXZlZE9iaiA9IF90aGlzJHByb3BzLnNhdmVkT2JqLCBvbkRhdGFDaGFuZ2UgPSBfdGhpcyRwcm9wcy5vbkRhdGFDaGFuZ2U7CiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVyID0gbG9hZGVyLmVtYmVkVmlzdWFsaXphdGlvbldpdGhTYXZlZE9iamVjdCh0aGlzLl92aXNFbC5jdXJyZW50LCBzYXZlZE9iaiwgewogICAgICAgICAgICAgICAgICBsaXN0ZW5PbkNoYW5nZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgIHVpU3RhdGU6IHVpU3RhdGUsCiAgICAgICAgICAgICAgICAgIHRpbWVSYW5nZTogdGltZVJhbmdlLAogICAgICAgICAgICAgICAgICBhcHBTdGF0ZTogYXBwU3RhdGUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gdGhpcy5faGFuZGxlci5kYXRhJC5zdWJzY3JpYmUoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgX3RoaXMyLnNldFBhbmVsSW50ZXJ2YWwoZGF0YS52aXNEYXRhKTsKCiAgICAgICAgICAgICAgICAgIG9uRGF0YUNoYW5nZShkYXRhKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX2xvYWRWaXN1YWxpemF0aW9uKCkgewogICAgICAgIHJldHVybiBfbG9hZFZpc3VhbGl6YXRpb24yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfbG9hZFZpc3VhbGl6YXRpb247CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJzZXRQYW5lbEludGVydmFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQYW5lbEludGVydmFsKHZpc0RhdGEpIHsKICAgICAgdmFyIHBhbmVsSW50ZXJ2YWwgPSAoMCwgX2dldF9pbnRlcnZhbC5nZXRJbnRlcnZhbCkodmlzRGF0YSwgdGhpcy5wcm9wcy5tb2RlbCk7CgogICAgICBpZiAodGhpcy5zdGF0ZS5wYW5lbEludGVydmFsICE9PSBwYW5lbEludGVydmFsKSB7CiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICBwYW5lbEludGVydmFsOiBwYW5lbEludGVydmFsCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmVzaXplIHRoZSBjaGFydCBoZWlnaHQgd2hlbiBwcmVzc2luZyB1cC9kb3duIHdoaWxlIHRoZSBkcmFnIGhhbmRsZQogICAgICogZm9yIHJlc2l6aW5nIGhhcyB0aGUgZm9jdXMuCiAgICAgKiBXZSB1c2UgMTVweCBzdGVwcyB0byBkbyB0aGUgc2NhbGluZyBhbmQgbWFrZSBzdXJlIHRoZSBjaGFydCBoYXMgYXQgbGVhc3QgaXRzCiAgICAgKiBkZWZpbmVkIG1pbmltdW0gd2lkdGggKE1JTl9DSEFSVF9IRUlHSFQpLgogICAgICovCgogIH0sIHsKICAgIGtleTogImhhc1Nob3dQYW5lbEludGVydmFsVmFsdWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1Nob3dQYW5lbEludGVydmFsVmFsdWUoKSB7CiAgICAgIHZhciB0eXBlID0gKDAsIF9sb2Rhc2guZ2V0KSh0aGlzLnByb3BzLCAnbW9kZWwudHlwZScsICcnKTsKICAgICAgdmFyIGludGVydmFsID0gKDAsIF9sb2Rhc2guZ2V0KSh0aGlzLnByb3BzLCAnbW9kZWwuaW50ZXJ2YWwnLCBfZ2V0X2ludGVydmFsLkFVVE9fSU5URVJWQUwpOwogICAgICByZXR1cm4gW19wYW5lbF90eXBlcy5QQU5FTF9UWVBFUy5NRVRSSUMsIF9wYW5lbF90eXBlcy5QQU5FTF9UWVBFUy5UT1BfTiwgX3BhbmVsX3R5cGVzLlBBTkVMX1RZUEVTLkdBVUdFLCBfcGFuZWxfdHlwZXMuUEFORUxfVFlQRVMuTUFSS0RPV04sIF9wYW5lbF90eXBlcy5QQU5FTF9UWVBFUy5UQUJMRV0uaW5jbHVkZXModHlwZSkgJiYgKCgwLCBfZ2V0X2ludGVydmFsLmlzQXV0b0ludGVydmFsKShpbnRlcnZhbCkgfHwgKDAsIF9nZXRfaW50ZXJ2YWwuaXNHdGVJbnRlcnZhbCkoaW50ZXJ2YWwpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGb3JtYXR0ZWRQYW5lbEludGVydmFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGb3JtYXR0ZWRQYW5lbEludGVydmFsKCkgewogICAgICB2YXIgaW50ZXJ2YWwgPSAoMCwgX2dldF9pbnRlcnZhbC5jb252ZXJ0SW50ZXJ2YWxJbnRvVW5pdCkodGhpcy5zdGF0ZS5wYW5lbEludGVydmFsLCBmYWxzZSk7CiAgICAgIHJldHVybiBpbnRlcnZhbCA/ICIiLmNvbmNhdChpbnRlcnZhbC51bml0VmFsdWUpLmNvbmNhdChpbnRlcnZhbC51bml0U3RyaW5nKSA6IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50V2lsbFVubW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVNb3VzZU1vdmUpOwogICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7CgogICAgICBpZiAodGhpcy5faGFuZGxlcikgewogICAgICAgIHRoaXMuX2hhbmRsZXIuZGVzdHJveSgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uKSB7CiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb21wb25lbnREaWRNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7CiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7CgogICAgICB0aGlzLl9sb2FkVmlzdWFsaXphdGlvbigpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZFVwZGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykgewogICAgICBpZiAodGhpcy5faGFuZGxlciAmJiAhKDAsIF9sb2Rhc2guaXNFcXVhbCkodGhpcy5wcm9wcy50aW1lUmFuZ2UsIHByZXZQcm9wcy50aW1lUmFuZ2UpKSB7CiAgICAgICAgdGhpcy5faGFuZGxlci51cGRhdGUoewogICAgICAgICAgdGltZVJhbmdlOiB0aGlzLnByb3BzLnRpbWVSYW5nZQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLAogICAgICAgICAgZGlydHkgPSBfdGhpcyRwcm9wczIuZGlydHksCiAgICAgICAgICBhdXRvQXBwbHkgPSBfdGhpcyRwcm9wczIuYXV0b0FwcGx5LAogICAgICAgICAgdGl0bGUgPSBfdGhpcyRwcm9wczIudGl0bGUsCiAgICAgICAgICBkZXNjcmlwdGlvbiA9IF90aGlzJHByb3BzMi5kZXNjcmlwdGlvbiwKICAgICAgICAgIG9uVG9nZ2xlQXV0b0FwcGx5ID0gX3RoaXMkcHJvcHMyLm9uVG9nZ2xlQXV0b0FwcGx5LAogICAgICAgICAgb25Db21taXQgPSBfdGhpcyRwcm9wczIub25Db21taXQ7CiAgICAgIHZhciBzdHlsZSA9IHsKICAgICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuaGVpZ2h0CiAgICAgIH07CgogICAgICBpZiAodGhpcy5zdGF0ZS5kcmFnZ2luZykgewogICAgICAgIHN0eWxlLnVzZXJTZWxlY3QgPSAnbm9uZSc7CiAgICAgIH0KCiAgICAgIHZhciBwYW5lbEludGVydmFsID0gdGhpcy5oYXNTaG93UGFuZWxJbnRlcnZhbFZhbHVlKCkgJiYgdGhpcy5nZXRGb3JtYXR0ZWRQYW5lbEludGVydmFsKCk7CgogICAgICB2YXIgYXBwbHlNZXNzYWdlID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInRzdmIudmlzRWRpdG9yVmlzdWFsaXphdGlvbi5jaGFuZ2VzU3VjY2Vzc2Z1bGx5QXBwbGllZE1lc3NhZ2UiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlIGxhdGVzdCBjaGFuZ2VzIGhhdmUgYmVlbiBhcHBsaWVkLiIKICAgICAgfSk7CgogICAgICBpZiAoZGlydHkpIHsKICAgICAgICBhcHBseU1lc3NhZ2UgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ0c3ZiLnZpc0VkaXRvclZpc3VhbGl6YXRpb24uY2hhbmdlc0hhdmVOb3RCZWVuQXBwbGllZE1lc3NhZ2UiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJUaGUgY2hhbmdlcyB0byB0aGlzIHZpc3VhbGl6YXRpb24gaGF2ZSBub3QgYmVlbiBhcHBsaWVkLiIKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKGF1dG9BcHBseSkgewogICAgICAgIGFwcGx5TWVzc2FnZSA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogInRzdmIudmlzRWRpdG9yVmlzdWFsaXphdGlvbi5jaGFuZ2VzV2lsbEJlQXV0b21hdGljYWxseUFwcGxpZWRNZXNzYWdlIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiVGhlIGNoYW5nZXMgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGFwcGxpZWQuIgogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgYXBwbHlCdXR0b24gPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgY2xhc3NOYW1lOiAidHZiRWRpdG9yVmlzdWFsaXphdGlvbl9fYXBwbHkiLAogICAgICAgIGFsaWduSXRlbXM6ICJjZW50ZXIiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IHRydWUKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVN3aXRjaCwgewogICAgICAgIGlkOiAidHN2YkF1dG9BcHBseUlucHV0IiwKICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAidHN2Yi52aXNFZGl0b3JWaXN1YWxpemF0aW9uLmF1dG9BcHBseUxhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQXV0byBhcHBseSIKICAgICAgICB9KSwKICAgICAgICBjaGVja2VkOiBhdXRvQXBwbHksCiAgICAgICAgb25DaGFuZ2U6IG9uVG9nZ2xlQXV0b0FwcGx5CiAgICAgIH0pKSwgcGFuZWxJbnRlcnZhbCAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgewogICAgICAgIGNvbG9yOiAiZGVmYXVsdCIsCiAgICAgICAgc2l6ZTogInhzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInRzdmIudmlzRWRpdG9yVmlzdWFsaXphdGlvbi5wYW5lbEludGVydmFsIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkludGVydmFsOiB7cGFuZWxJbnRlcnZhbH0iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgcGFuZWxJbnRlcnZhbDogcGFuZWxJbnRlcnZhbAogICAgICAgIH0KICAgICAgfSkpKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCB7CiAgICAgICAgY29sb3I6IGRpcnR5ID8gJ2RlZmF1bHQnIDogJ3N1YmR1ZWQnLAogICAgICAgIHNpemU6ICJ4cyIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgicCIsIG51bGwsIGFwcGx5TWVzc2FnZSkpKSwgIWF1dG9BcHBseSAmJiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiBmYWxzZQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uLCB7CiAgICAgICAgaWNvblR5cGU6ICJwbGF5IiwKICAgICAgICBmaWxsOiB0cnVlLAogICAgICAgIHNpemU6ICJzIiwKICAgICAgICBvbkNsaWNrOiBvbkNvbW1pdCwKICAgICAgICBkaXNhYmxlZDogIWRpcnR5LAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJhcHBseUJ0biIKICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInRzdmIudmlzRWRpdG9yVmlzdWFsaXphdGlvbi5hcHBseUNoYW5nZXNMYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBcHBseSBjaGFuZ2VzIgogICAgICB9KSkpKTsKCiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgc3R5bGU6IHN0eWxlLAogICAgICAgIGNsYXNzTmFtZTogInR2YkVkaXRvclZpc3VhbGl6YXRpb24iLAogICAgICAgICJkYXRhLXNoYXJlZC1pdGVtcy1jb250YWluZXIiOiB0cnVlLAogICAgICAgICJkYXRhLXRpdGxlIjogdGl0bGUsCiAgICAgICAgImRhdGEtZGVzY3JpcHRpb24iOiBkZXNjcmlwdGlvbiwKICAgICAgICByZWY6IHRoaXMuX3Zpc0VsCiAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAidHZiRWRpdG9yLS1oaWRlRm9yUmVwb3J0aW5nIgogICAgICB9LCBhcHBseUJ1dHRvbiwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIiwgewogICAgICAgIGNsYXNzTmFtZTogInR2YkVkaXRvclZpc3VhbGl6YXRpb25fX2RyYWdoYW5kbGUiLAogICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93biwKICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW91c2VVcCwKICAgICAgICBvbktleURvd246IHRoaXMub25TaXplSGFuZGxlS2V5RG93biwKICAgICAgICAiYXJpYS1sYWJlbCI6IHRoaXMucHJvcHMuaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAndHN2Yi5jb2xvclJ1bGVzLmFkanVzdENoYXJ0U2l6ZUFyaWFMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1ByZXNzIHVwL2Rvd24gdG8gYWRqdXN0IHRoZSBjaGFydCBzaXplJwogICAgICAgIH0pCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImkiLCB7CiAgICAgICAgY2xhc3NOYW1lOiAiZmEgZmEtZWxsaXBzaXMtaCIKICAgICAgfSkpKSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVmlzRWRpdG9yVmlzdWFsaXphdGlvblVJOwp9KF9yZWFjdC5Db21wb25lbnQpOwoKVmlzRWRpdG9yVmlzdWFsaXphdGlvblVJLnByb3BUeXBlcyA9IHsKICBtb2RlbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwKICBvbkNvbW1pdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsCiAgdWlTdGF0ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwKICBvblRvZ2dsZUF1dG9BcHBseTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsCiAgc2F2ZWRPYmo6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsCiAgdGltZVJhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LAogIGRpcnR5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwKICBhdXRvQXBwbHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLAogIGFwcFN0YXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0Cn07CnZhciBWaXNFZGl0b3JWaXN1YWxpemF0aW9uID0gKDAsIF9yZWFjdDIuaW5qZWN0STE4bikoVmlzRWRpdG9yVmlzdWFsaXphdGlvblVJKTsKZXhwb3J0cy5WaXNFZGl0b3JWaXN1YWxpemF0aW9uID0gVmlzRWRpdG9yVmlzdWFsaXphdGlvbjs="},null]}