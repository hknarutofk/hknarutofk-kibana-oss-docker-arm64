{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/data/public/query/query_bar/components/language_switcher.js","dependencies":[{"path":"src/legacy/core_plugins/data/public/query/query_bar/components/language_switcher.js","mtime":1572296409480},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUXVlcnlMYW5ndWFnZVN3aXRjaGVyID0gdm9pZCAwOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2RvY3VtZW50YXRpb25fbGlua3MgPSByZXF1aXJlKCJ1aS9kb2N1bWVudGF0aW9uX2xpbmtzL2RvY3VtZW50YXRpb25fbGlua3MiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIga3VlcnlRdWVyeVN5bnRheERvY3MgPSBfZG9jdW1lbnRhdGlvbl9saW5rcy5kb2N1bWVudGF0aW9uTGlua3MucXVlcnkua3VlcnlRdWVyeVN5bnRheDsKCnZhciBRdWVyeUxhbmd1YWdlU3dpdGNoZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFF1ZXJ5TGFuZ3VhZ2VTd2l0Y2hlciwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFF1ZXJ5TGFuZ3VhZ2VTd2l0Y2hlcigpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUXVlcnlMYW5ndWFnZVN3aXRjaGVyKTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKFF1ZXJ5TGFuZ3VhZ2VTd2l0Y2hlcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInN0YXRlIiwgewogICAgICBpc1BvcG92ZXJPcGVuOiBmYWxzZQogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAidG9nZ2xlUG9wb3ZlciIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIGlzUG9wb3Zlck9wZW46ICFfdGhpcy5zdGF0ZS5pc1BvcG92ZXJPcGVuCiAgICAgIH0pOwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY2xvc2VQb3BvdmVyIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaXNQb3BvdmVyT3BlbjogZmFsc2UKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvblN3aXRjaENoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG5ld0xhbmd1YWdlID0gX3RoaXMucHJvcHMubGFuZ3VhZ2UgPT09ICdsdWNlbmUnID8gJ2t1ZXJ5JyA6ICdsdWNlbmUnOwoKICAgICAgX3RoaXMucHJvcHMub25TZWxlY3RMYW5ndWFnZShuZXdMYW5ndWFnZSk7CiAgICB9KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUXVlcnlMYW5ndWFnZVN3aXRjaGVyLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBsdWNlbmVMYWJlbCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJkYXRhLnF1ZXJ5LnF1ZXJ5QmFyLmx1Y2VuZUxhbmd1YWdlTmFtZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJMdWNlbmUiCiAgICAgIH0pOwoKICAgICAgdmFyIGtxbExhYmVsID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImRhdGEucXVlcnkucXVlcnlCYXIua3FsTGFuZ3VhZ2VOYW1lIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIktRTCIKICAgICAgfSk7CgogICAgICB2YXIga3FsRnVsbE5hbWUgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAiZGF0YS5xdWVyeS5xdWVyeUJhci5rcWxGdWxsTGFuZ3VhZ2VOYW1lIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIktpYmFuYSBRdWVyeSBMYW5ndWFnZSIKICAgICAgfSk7CgogICAgICB2YXIgYnV0dG9uID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlCdXR0b25FbXB0eSwgewogICAgICAgIHNpemU6ICJ4cyIsCiAgICAgICAgb25DbGljazogdGhpcy50b2dnbGVQb3BvdmVyCiAgICAgIH0sIHRoaXMucHJvcHMubGFuZ3VhZ2UgPT09ICdsdWNlbmUnID8gbHVjZW5lTGFiZWwgOiBrcWxMYWJlbCk7CgogICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3BvdmVyLCB7CiAgICAgICAgaWQ6ICJwb3BvdmVyIiwKICAgICAgICBjbGFzc05hbWU6ICJldWktZGlzcGxheUJsb2NrIiwKICAgICAgICBvd25Gb2N1czogdHJ1ZSwKICAgICAgICBhbmNob3JQb3NpdGlvbjogdGhpcy5wcm9wcy5hbmNob3JQb3NpdGlvbiB8fCAnZG93blJpZ2h0JywKICAgICAgICBidXR0b246IGJ1dHRvbiwKICAgICAgICBpc09wZW46IHRoaXMuc3RhdGUuaXNQb3BvdmVyT3BlbiwKICAgICAgICBjbG9zZVBvcG92ZXI6IHRoaXMuY2xvc2VQb3BvdmVyLAogICAgICAgIHdpdGhUaXRsZTogdHJ1ZQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBvcG92ZXJUaXRsZSwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImRhdGEucXVlcnkucXVlcnlCYXIuc3ludGF4T3B0aW9uc1RpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlN5bnRheCBvcHRpb25zIgogICAgICB9KSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCB7CiAgICAgICAgc3R5bGU6IHsKICAgICAgICAgIHdpZHRoOiAnMzUwcHgnCiAgICAgICAgfQogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImRhdGEucXVlcnkucXVlcnlCYXIuc3ludGF4T3B0aW9uc0Rlc2NyaXB0aW9uIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlRoZSB7ZG9jc0xpbmt9IChLUUwpIG9mZmVycyBhIHNpbXBsaWZpZWQgcXVlcnkgc3ludGF4IGFuZCBzdXBwb3J0IGZvciBzY3JpcHRlZCBmaWVsZHMuIEtRTCBhbHNvIHByb3ZpZGVzIGF1dG9jb21wbGV0ZSBpZiB5b3UgaGF2ZSBhIEJhc2ljIGxpY2Vuc2Ugb3IgYWJvdmUuIElmIHlvdSB0dXJuIG9mZiBLUUwsIEtpYmFuYSB1c2VzIEx1Y2VuZS4iLAogICAgICAgIHZhbHVlczogewogICAgICAgICAgZG9jc0xpbms6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpTGluaywgewogICAgICAgICAgICBocmVmOiBrdWVyeVF1ZXJ5U3ludGF4RG9jcywKICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgfSwga3FsRnVsbE5hbWUpCiAgICAgICAgfQogICAgICB9KSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDoga3FsRnVsbE5hbWUKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTd2l0Y2gsIHsKICAgICAgICBpZDogInF1ZXJ5RW5oYW5jZW1lbnRPcHRJbiIsCiAgICAgICAgbmFtZTogInBvcHN3aXRjaCIsCiAgICAgICAgbGFiZWw6IHRoaXMucHJvcHMubGFuZ3VhZ2UgPT09ICdrdWVyeScgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJkYXRhLnF1ZXJ5LnF1ZXJ5QmFyLmtxbE9uTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJPbiIKICAgICAgICB9KSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImRhdGEucXVlcnkucXVlcnlCYXIua3FsT2ZmTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJPZmYiCiAgICAgICAgfSksCiAgICAgICAgY2hlY2tlZDogdGhpcy5wcm9wcy5sYW5ndWFnZSA9PT0gJ2t1ZXJ5JywKICAgICAgICBvbkNoYW5nZTogdGhpcy5vblN3aXRjaENoYW5nZSwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAibGFuZ3VhZ2VUb2dnbGUiCiAgICAgIH0pKSkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBRdWVyeUxhbmd1YWdlU3dpdGNoZXI7Cn0oX3JlYWN0Mi5Db21wb25lbnQpOwoKZXhwb3J0cy5RdWVyeUxhbmd1YWdlU3dpdGNoZXIgPSBRdWVyeUxhbmd1YWdlU3dpdGNoZXI7"},null]}