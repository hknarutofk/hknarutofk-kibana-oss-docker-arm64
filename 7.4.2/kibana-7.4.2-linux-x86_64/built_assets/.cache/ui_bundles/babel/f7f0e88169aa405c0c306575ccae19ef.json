{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/data/public/shim/legacy_module.js","dependencies":[{"path":"src/legacy/core_plugins/data/public/shim/legacy_module.js","mtime":1572296409540},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXRMZWdhY3lNb2R1bGUgPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgidWkvaTE4biIpOwoKdmFyIF9tb2R1bGVzID0gcmVxdWlyZSgidWkvbW9kdWxlcyIpOwoKdmFyIF9uZXdfcGxhdGZvcm0gPSByZXF1aXJlKCJ1aS9uZXdfcGxhdGZvcm0iKTsKCnZhciBfZmlsdGVyID0gcmVxdWlyZSgiLi4vZmlsdGVyIik7Cgp2YXIgX2FwcGx5X2ZpbHRlcl9kaXJlY3RpdmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIi4vYXBwbHlfZmlsdGVyX2RpcmVjdGl2ZS5odG1sIikpOwoKdmFyIF9tYXBfYW5kX2ZsYXR0ZW5fZmlsdGVycyA9IHJlcXVpcmUoIi4uL2ZpbHRlci9maWx0ZXJfbWFuYWdlci9saWIvbWFwX2FuZF9mbGF0dGVuX2ZpbHRlcnMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KLyoqIEBpbnRlcm5hbCAqLwoKCnZhciBpbml0TGVnYWN5TW9kdWxlID0gKDAsIF9sb2Rhc2gub25jZSkoZnVuY3Rpb24gKCkgewogIF9tb2R1bGVzLnVpTW9kdWxlcy5nZXQoJ2FwcC9raWJhbmEnLCBbJ3JlYWN0J10pLmRpcmVjdGl2ZSgnZmlsdGVyQmFyJywgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgdGVtcGxhdGU6ICcnLAogICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKGVsZW0pIHsKICAgICAgICB2YXIgY2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmaWx0ZXItYmFyLWhlbHBlcicpOyAvLyBDb3B5IGF0dHJpYnV0ZXMgdG8gdGhlIGNoaWxkIGRpcmVjdGl2ZQoKICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkOwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gZWxlbVswXS5hdHRyaWJ1dGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICAgICAgICB2YXIgYXR0ciA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoYXR0ci5uYW1lLCBhdHRyLnZhbHVlKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTsKICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHsKICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKCd1aS1zZXR0aW5ncycsICd1aVNldHRpbmdzJyk7IC8vIEFwcGVuZCBoZWxwZXIgZGlyZWN0aXZlCgogICAgICAgIGVsZW0uYXBwZW5kKGNoaWxkKTsKCiAgICAgICAgdmFyIGxpbmtGbiA9IGZ1bmN0aW9uIGxpbmtGbigkc2NvcGUpIHsKICAgICAgICAgICRzY29wZS51aVNldHRpbmdzID0gX25ld19wbGF0Zm9ybS5ucFNldHVwLmNvcmUudWlTZXR0aW5nczsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gbGlua0ZuOwogICAgICB9CiAgICB9OwogIH0pLmRpcmVjdGl2ZSgnZmlsdGVyQmFySGVscGVyJywgZnVuY3Rpb24gKHJlYWN0RGlyZWN0aXZlKSB7CiAgICByZXR1cm4gcmVhY3REaXJlY3RpdmUoKDAsIF9pMThuLndyYXBJbkkxOG5Db250ZXh0KShfZmlsdGVyLkZpbHRlckJhciksIFtbJ3VpU2V0dGluZ3MnLCB7CiAgICAgIHdhdGNoRGVwdGg6ICdyZWZlcmVuY2UnCiAgICB9XSwgWydvbkZpbHRlcnNVcGRhdGVkJywgewogICAgICB3YXRjaERlcHRoOiAncmVmZXJlbmNlJwogICAgfV0sIFsnaW5kZXhQYXR0ZXJucycsIHsKICAgICAgd2F0Y2hEZXB0aDogJ2NvbGxlY3Rpb24nCiAgICB9XSwgWydmaWx0ZXJzJywgewogICAgICB3YXRjaERlcHRoOiAnY29sbGVjdGlvbicKICAgIH1dLCBbJ2NsYXNzTmFtZScsIHsKICAgICAgd2F0Y2hEZXB0aDogJ3JlZmVyZW5jZScKICAgIH1dXSk7CiAgfSkuZGlyZWN0aXZlKCdhcHBseUZpbHRlcnNQb3BvdmVyQ29tcG9uZW50JywgZnVuY3Rpb24gKHJlYWN0RGlyZWN0aXZlKSB7CiAgICByZXR1cm4gcmVhY3REaXJlY3RpdmUoKDAsIF9pMThuLndyYXBJbkkxOG5Db250ZXh0KShfZmlsdGVyLkFwcGx5RmlsdGVyc1BvcG92ZXIpKTsKICB9KS5kaXJlY3RpdmUoJ2FwcGx5RmlsdGVyc1BvcG92ZXInLCBmdW5jdGlvbiAoaW5kZXhQYXR0ZXJucykgewogICAgcmV0dXJuIHsKICAgICAgdGVtcGxhdGU6IF9hcHBseV9maWx0ZXJfZGlyZWN0aXZlLmRlZmF1bHQsCiAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgIHNjb3BlOiB7CiAgICAgICAgZmlsdGVyczogJz0nLAogICAgICAgIG9uQ2FuY2VsOiAnPScsCiAgICAgICAgb25TdWJtaXQ6ICc9JwogICAgICB9LAogICAgICBsaW5rOiBmdW5jdGlvbiBsaW5rKCRzY29wZSkgewogICAgICAgICRzY29wZS5zdGF0ZSA9IHt9OyAvLyBFYWNoIHRpbWUgdGhlIG5ldyBmaWx0ZXJzIGNoYW5nZSB3ZSB3YW50IHRvIHJlYnVpbGQgKG5vdCBqdXN0IHJlLXJlbmRlcikgdGhlICJhcHBseSBmaWx0ZXJzIgogICAgICAgIC8vIHBvcG92ZXIsIGJlY2F1c2UgaXQgaGFzIHRvIHJlc2V0IGl0cyBzdGF0ZSB3aGVuZXZlciB0aGUgbmV3IGZpbHRlcnMgY2hhbmdlLiBTZXR0aW5nIGEgYGtleWAKICAgICAgICAvLyBwcm9wZXJ0eSBvbiB0aGUgY29tcG9uZW50IGFjY29tcGxpc2hlcyB0aGlzIGR1ZSB0byBob3cgUmVhY3QgaGFuZGxlcyB0aGUgYGtleWAgcHJvcGVydHkuCgogICAgICAgICRzY29wZS4kd2F0Y2goJ2ZpbHRlcnMnLAogICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShmaWx0ZXJzKSB7CiAgICAgICAgICAgIHZhciBtYXBwZWRGaWx0ZXJzOwogICAgICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfbWFwX2FuZF9mbGF0dGVuX2ZpbHRlcnMubWFwQW5kRmxhdHRlbkZpbHRlcnMpKGluZGV4UGF0dGVybnMsIGZpbHRlcnMpOwoKICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgIG1hcHBlZEZpbHRlcnMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZSA9IHsKICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnM6IG1hcHBlZEZpbHRlcnMsCiAgICAgICAgICAgICAgICAgICAgICBrZXk6IERhdGUubm93KCkKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgIH0pKTsKCiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgIH0oKSk7CiAgICAgIH0KICAgIH07CiAgfSk7Cn0pOwpleHBvcnRzLmluaXRMZWdhY3lNb2R1bGUgPSBpbml0TGVnYWN5TW9kdWxlOw=="},null]}