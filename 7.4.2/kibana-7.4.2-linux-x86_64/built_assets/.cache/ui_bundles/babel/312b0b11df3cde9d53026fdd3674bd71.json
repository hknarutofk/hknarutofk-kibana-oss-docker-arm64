{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/discover/controllers/discover.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/discover/controllers/discover.js","mtime":1572296410124},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2FuZ3VsYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImFuZ3VsYXIiKSk7Cgp2YXIgX3J4anMgPSByZXF1aXJlKCJyeGpzIik7Cgp2YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibW9tZW50IikpOwoKdmFyIF9jaHJvbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInVpL2Nocm9tZSIpKTsKCnZhciBfZGF0ZW1hdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBlbGFzdGljL2RhdGVtYXRoIikpOwoKcmVxdWlyZSgiLi4vZG9jX3RhYmxlIik7Cgp2YXIgX2dldF9zb3J0ID0gcmVxdWlyZSgiLi4vZG9jX3RhYmxlL2xpYi9nZXRfc29ydCIpOwoKdmFyIGNvbHVtbkFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuLi9kb2NfdGFibGUvYWN0aW9ucy9jb2x1bW5zIikpOwoKdmFyIGZpbHRlckFjdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCIuLi9kb2NfdGFibGUvYWN0aW9ucy9maWx0ZXIiKSk7CgpyZXF1aXJlKCJ1aS9kaXJlY3RpdmVzL2xpc3RlbiIpOwoKcmVxdWlyZSgidWkvdmlzdWFsaXplIik7CgpyZXF1aXJlKCJ1aS9maXhlZF9zY3JvbGwiKTsKCnJlcXVpcmUoInVpL2luZGV4X3BhdHRlcm5zIik7CgpyZXF1aXJlKCJ1aS9zdGF0ZV9tYW5hZ2VtZW50L2FwcF9zdGF0ZSIpOwoKdmFyIF90aW1lZmlsdGVyID0gcmVxdWlyZSgidWkvdGltZWZpbHRlciIpOwoKdmFyIF9jb3VyaWVyID0gcmVxdWlyZSgidWkvY291cmllciIpOwoKdmFyIF9ub3RpZnkgPSByZXF1aXJlKCJ1aS9ub3RpZnkiKTsKCnZhciBfdmlzID0gcmVxdWlyZSgidWkvdmlzIik7Cgp2YXIgX3F1ZXJ5X2ZpbHRlciA9IHJlcXVpcmUoInVpL2ZpbHRlcl9tYW5hZ2VyL3F1ZXJ5X2ZpbHRlciIpOwoKdmFyIF92aXNsaWIgPSByZXF1aXJlKCJ1aS92aXMvcmVzcG9uc2VfaGFuZGxlcnMvdmlzbGliIik7Cgp2YXIgX2RvY190aXRsZSA9IHJlcXVpcmUoInVpL2RvY190aXRsZSIpOwoKdmFyIF9pbnRlcnZhbF9vcHRpb25zID0gcmVxdWlyZSgidWkvYWdnX3R5cGVzL2J1Y2tldHMvX2ludGVydmFsX29wdGlvbnMiKTsKCnZhciBfc3RhdGVfbW9uaXRvcl9mYWN0b3J5ID0gcmVxdWlyZSgidWkvc3RhdGVfbWFuYWdlbWVudC9zdGF0ZV9tb25pdG9yX2ZhY3RvcnkiKTsKCnZhciBfcm91dGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9yb3V0ZXMiKSk7Cgp2YXIgX21vZHVsZXMgPSByZXF1aXJlKCJ1aS9tb2R1bGVzIik7Cgp2YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuLi9pbmRleC5odG1sIikpOwoKdmFyIF9zdGF0ZSA9IHJlcXVpcmUoInVpL3N0YXRlX21hbmFnZW1lbnQvc3RhdGUiKTsKCnZhciBfbWlncmF0ZV9sZWdhY3lfcXVlcnkgPSByZXF1aXJlKCJ1aS91dGlscy9taWdyYXRlX2xlZ2FjeV9xdWVyeSIpOwoKdmFyIF9zdWJzY3JpYmVfd2l0aF9zY29wZSA9IHJlcXVpcmUoInVpL3V0aWxzL3N1YnNjcmliZV93aXRoX3Njb3BlIik7Cgp2YXIgX2ZpbHRlcl9tYW5hZ2VyID0gcmVxdWlyZSgidWkvZmlsdGVyX21hbmFnZXIiKTsKCnZhciBfc2F2ZWRfb2JqZWN0cyA9IHJlcXVpcmUoInVpL3NhdmVkX29iamVjdHMiKTsKCnZhciBfdmlzdWFsaXplX2xvYWRlciA9IHJlcXVpcmUoInVpL3Zpc3VhbGl6ZS9sb2FkZXIvdmlzdWFsaXplX2xvYWRlciIpOwoKdmFyIF9wZXJzaXN0ZWRfbG9nID0gcmVxdWlyZSgidWkvcGVyc2lzdGVkX2xvZyIpOwoKdmFyIF9kb2N1bWVudGF0aW9uX2xpbmtzID0gcmVxdWlyZSgidWkvZG9jdW1lbnRhdGlvbl9saW5rcyIpOwoKcmVxdWlyZSgiLi4vY29tcG9uZW50cy9mZXRjaF9lcnJvciIpOwoKdmFyIF9nZXRfcGFpbmxlc3NfZXJyb3IgPSByZXF1aXJlKCIuL2dldF9wYWlubGVzc19lcnJvciIpOwoKdmFyIF9zaGFyZSA9IHJlcXVpcmUoInVpL3NoYXJlIik7Cgp2YXIgX3N0YXRlX2hhc2hpbmcgPSByZXF1aXJlKCJ1aS9zdGF0ZV9tYW5hZ2VtZW50L3N0YXRlX2hhc2hpbmciKTsKCnZhciBfaW5zcGVjdG9yID0gcmVxdWlyZSgidWkvaW5zcGVjdG9yIik7Cgp2YXIgX2FkYXB0ZXJzID0gcmVxdWlyZSgidWkvaW5zcGVjdG9yL2FkYXB0ZXJzIik7Cgp2YXIgX2NvdXJpZXJfaW5zcGVjdG9yX3V0aWxzID0gcmVxdWlyZSgidWkvY291cmllci91dGlscy9jb3VyaWVyX2luc3BlY3Rvcl91dGlscyIpOwoKdmFyIF9zaG93X29wZW5fc2VhcmNoX3BhbmVsID0gcmVxdWlyZSgiLi4vdG9wX25hdi9zaG93X29wZW5fc2VhcmNoX3BhbmVsIik7Cgp2YXIgX3RhYmlmeSA9IHJlcXVpcmUoInVpL2FnZ19yZXNwb25zZS90YWJpZnkiKTsKCnZhciBfc2hvd19zYXZlZF9vYmplY3Rfc2F2ZV9tb2RhbCA9IHJlcXVpcmUoInVpL3NhdmVkX29iamVjdHMvc2hvd19zYXZlZF9vYmplY3Rfc2F2ZV9tb2RhbCIpOwoKdmFyIF9zYXZlZF9vYmplY3Rfc2F2ZV9tb2RhbCA9IHJlcXVpcmUoInVpL3NhdmVkX29iamVjdHMvY29tcG9uZW50cy9zYXZlZF9vYmplY3Rfc2F2ZV9tb2RhbCIpOwoKdmFyIF9icmVhZGNydW1icyA9IHJlcXVpcmUoIi4uL2JyZWFkY3J1bWJzIik7Cgp2YXIgX2J1aWxkX3BpcGVsaW5lID0gcmVxdWlyZSgidWkvdmlzdWFsaXplL2xvYWRlci9waXBlbGluZV9oZWxwZXJzL2J1aWxkX3BpcGVsaW5lIik7CgpyZXF1aXJlKCJ1aS9jYXBhYmlsaXRpZXMvcm91dGVfc2V0dXAiKTsKCnZhciBfbGVnYWN5ID0gcmVxdWlyZSgiLi4vLi4vLi4vLi4vLi4vY29yZV9wbHVnaW5zL2RhdGEvcHVibGljL2xlZ2FjeSIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9Cgp2YXIgc2F2ZWRRdWVyeVNlcnZpY2UgPSBfbGVnYWN5LnNldHVwLnNlYXJjaC5zZXJ2aWNlcy5zYXZlZFF1ZXJ5U2VydmljZTsKdmFyIGZldGNoU3RhdHVzZXMgPSB7CiAgVU5JTklUSUFMSVpFRDogJ3VuaW5pdGlhbGl6ZWQnLAogIExPQURJTkc6ICdsb2FkaW5nJywKICBDT01QTEVURTogJ2NvbXBsZXRlJwp9OwoKdmFyIGFwcCA9IF9tb2R1bGVzLnVpTW9kdWxlcy5nZXQoJ2FwcHMvZGlzY292ZXInLCBbJ2tpYmFuYS9jb3VyaWVyJywgJ2tpYmFuYS91cmwnLCAna2liYW5hL2luZGV4X3BhdHRlcm5zJ10pOwoKX3JvdXRlcy5kZWZhdWx0LmRlZmF1bHRzKC9eXC9kaXNjb3ZlcihcL3wkKS8sIHsKICByZXF1aXJlRGVmYXVsdEluZGV4OiB0cnVlLAogIHJlcXVpcmVVSUNhcGFiaWxpdHk6ICdkaXNjb3Zlci5zaG93JywKICBrN0JyZWFkY3J1bWJzOiBmdW5jdGlvbiBrN0JyZWFkY3J1bWJzKCRyb3V0ZSwgJGluamVjdG9yKSB7CiAgICByZXR1cm4gJGluamVjdG9yLmludm9rZSgkcm91dGUuY3VycmVudC5wYXJhbXMuaWQgPyBfYnJlYWRjcnVtYnMuZ2V0U2F2ZWRTZWFyY2hCcmVhZGNydW1icyA6IF9icmVhZGNydW1icy5nZXRSb290QnJlYWRjcnVtYnMpOwogIH0sCiAgYmFkZ2U6IGZ1bmN0aW9uIGJhZGdlKHVpQ2FwYWJpbGl0aWVzKSB7CiAgICBpZiAodWlDYXBhYmlsaXRpZXMuZGlzY292ZXIuc2F2ZSkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgIHRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIuYmFkZ2UucmVhZE9ubHkudGV4dCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1JlYWQgb25seScKICAgICAgfSksCiAgICAgIHRvb2x0aXA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIuYmFkZ2UucmVhZE9ubHkudG9vbHRpcCcsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VuYWJsZSB0byBzYXZlIHNlYXJjaGVzJwogICAgICB9KSwKICAgICAgaWNvblR5cGU6ICdnbGFzc2VzJwogICAgfTsKICB9Cn0pLndoZW4oJy9kaXNjb3Zlci86aWQ/JywgewogIHRlbXBsYXRlOiBfaW5kZXguZGVmYXVsdCwKICByZWxvYWRPblNlYXJjaDogZmFsc2UsCiAgcmVzb2x2ZTogewogICAgaXA6IGZ1bmN0aW9uIGlwKFByb21pc2UsIGluZGV4UGF0dGVybnMsIGNvbmZpZywgUHJpdmF0ZSkgewogICAgICB2YXIgU3RhdGUgPSBQcml2YXRlKF9zdGF0ZS5TdGF0ZVByb3ZpZGVyKTsKICAgICAgdmFyIHNhdmVkT2JqZWN0c0NsaWVudCA9IFByaXZhdGUoX3NhdmVkX29iamVjdHMuU2F2ZWRPYmplY3RzQ2xpZW50UHJvdmlkZXIpOwogICAgICByZXR1cm4gc2F2ZWRPYmplY3RzQ2xpZW50LmZpbmQoewogICAgICAgIHR5cGU6ICdpbmRleC1wYXR0ZXJuJywKICAgICAgICBmaWVsZHM6IFsndGl0bGUnXSwKICAgICAgICBwZXJQYWdlOiAxMDAwMAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIHNhdmVkT2JqZWN0cyA9IF9yZWYuc2F2ZWRPYmplY3RzOwoKICAgICAgICAvKioKICAgICAgICAgKiAgSW4gbWFraW5nIHRoZSBpbmRleFBhdHRlcm4gbW9kaWZpYWJsZSBpdCB3YXMgcGxhY2VkIGluIGFwcFN0YXRlLiBVbmZvcnR1bmF0ZWx5LAogICAgICAgICAqICB0aGUgbG9hZCBvcmRlciBvZiBBcHBTdGF0ZSBjb25mbGljdHMgd2l0aCB0aGUgbG9hZCBvcmRlciBvZiBtYW55IG90aGVyIHRoaW5ncwogICAgICAgICAqICBzbyBpbiBvcmRlciB0byBnZXQgdGhlIG5hbWUgb2YgdGhlIGluZGV4IHdlIHNob3VsZCB1c2UsIGFuZCB0byBzd2l0Y2ggdG8gdGhlCiAgICAgICAgICogIGRlZmF1bHQgaWYgbmVjZXNzYXJ5LCB3ZSBwYXJzZSB0aGUgYXBwU3RhdGUgd2l0aCBhIHRlbXBvcmFyeSBTdGF0ZSBvYmplY3QgYW5kCiAgICAgICAgICogIHRoZW4gZGVzdHJveSBpdCBpbW1lZGlhdGx5IGFmdGVyIHdlJ3JlIGRvbmUKICAgICAgICAgKgogICAgICAgICAqICBAdHlwZSB7U3RhdGV9CiAgICAgICAgICovCiAgICAgICAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKCdfYScsIHt9KTsKICAgICAgICB2YXIgc3BlY2lmaWVkID0gISFzdGF0ZS5pbmRleDsKICAgICAgICB2YXIgZXhpc3RzID0gX2xvZGFzaC5kZWZhdWx0LmZpbmRJbmRleChzYXZlZE9iamVjdHMsIGZ1bmN0aW9uIChvKSB7CiAgICAgICAgICByZXR1cm4gby5pZCA9PT0gc3RhdGUuaW5kZXg7CiAgICAgICAgfSkgPiAtMTsKICAgICAgICB2YXIgaWQgPSBleGlzdHMgPyBzdGF0ZS5pbmRleCA6IGNvbmZpZy5nZXQoJ2RlZmF1bHRJbmRleCcpOwogICAgICAgIHN0YXRlLmRlc3Ryb3koKTsKICAgICAgICByZXR1cm4gUHJvbWlzZS5wcm9wcyh7CiAgICAgICAgICBsaXN0OiBzYXZlZE9iamVjdHMsCiAgICAgICAgICBsb2FkZWQ6IGluZGV4UGF0dGVybnMuZ2V0KGlkKSwKICAgICAgICAgIHN0YXRlVmFsOiBzdGF0ZS5pbmRleCwKICAgICAgICAgIHN0YXRlVmFsRm91bmQ6IHNwZWNpZmllZCAmJiBleGlzdHMKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgc2F2ZWRTZWFyY2g6IGZ1bmN0aW9uIHNhdmVkU2VhcmNoKHJlZGlyZWN0V2hlbk1pc3NpbmcsIHNhdmVkU2VhcmNoZXMsICRyb3V0ZSkgewogICAgICB2YXIgc2F2ZWRTZWFyY2hJZCA9ICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5pZDsKICAgICAgcmV0dXJuIHNhdmVkU2VhcmNoZXMuZ2V0KHNhdmVkU2VhcmNoSWQpLnRoZW4oZnVuY3Rpb24gKHNhdmVkU2VhcmNoKSB7CiAgICAgICAgaWYgKHNhdmVkU2VhcmNoSWQpIHsKICAgICAgICAgIF9wZXJzaXN0ZWRfbG9nLnJlY2VudGx5QWNjZXNzZWQuYWRkKHNhdmVkU2VhcmNoLmdldEZ1bGxQYXRoKCksIHNhdmVkU2VhcmNoLnRpdGxlLCBzYXZlZFNlYXJjaElkKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBzYXZlZFNlYXJjaDsKICAgICAgfSkuY2F0Y2gocmVkaXJlY3RXaGVuTWlzc2luZyh7CiAgICAgICAgJ3NlYXJjaCc6ICcvZGlzY292ZXInLAogICAgICAgICdpbmRleC1wYXR0ZXJuJzogJy9tYW5hZ2VtZW50L2tpYmFuYS9vYmplY3RzL3NhdmVkU2VhcmNoZXMvJyArICRyb3V0ZS5jdXJyZW50LnBhcmFtcy5pZAogICAgICB9KSk7CiAgICB9CiAgfQp9KTsKCmFwcC5kaXJlY3RpdmUoJ2Rpc2NvdmVyQXBwJywgZnVuY3Rpb24gKCkgewogIHJldHVybiB7CiAgICByZXN0cmljdDogJ0UnLAogICAgY29udHJvbGxlckFzOiAnZGlzY292ZXJBcHAnLAogICAgY29udHJvbGxlcjogZGlzY292ZXJDb250cm9sbGVyCiAgfTsKfSk7CgpmdW5jdGlvbiBkaXNjb3ZlckNvbnRyb2xsZXIoJGVsZW1lbnQsICRyb3V0ZSwgJHNjb3BlLCAkdGltZW91dCwgJHdpbmRvdywgQXBwU3RhdGUsIFByaXZhdGUsIFByb21pc2UsIGNvbmZpZywgY291cmllciwga2JuVXJsLCBsb2NhbFN0b3JhZ2UsIHVpQ2FwYWJpbGl0aWVzKSB7CiAgdmFyIF90aGlzID0gdGhpczsKCiAgdmFyIHZpc3VhbGl6ZUxvYWRlciA9IFByaXZhdGUoX3Zpc3VhbGl6ZV9sb2FkZXIuVmlzdWFsaXplTG9hZGVyUHJvdmlkZXIpOwogIHZhciB2aXN1YWxpemVIYW5kbGVyOwogIHZhciBWaXMgPSBQcml2YXRlKF92aXMuVmlzUHJvdmlkZXIpOwogIHZhciByZXNwb25zZUhhbmRsZXIgPSAoMCwgX3Zpc2xpYi52aXNsaWJTZXJpZXNSZXNwb25zZUhhbmRsZXJQcm92aWRlcikoKS5oYW5kbGVyOwogIHZhciBnZXRVbmhhc2hhYmxlU3RhdGVzID0gUHJpdmF0ZShfc3RhdGVfaGFzaGluZy5nZXRVbmhhc2hhYmxlU3RhdGVzUHJvdmlkZXIpOwogIHZhciBzaGFyZUNvbnRleHRNZW51RXh0ZW5zaW9ucyA9IFByaXZhdGUoX3NoYXJlLlNoYXJlQ29udGV4dE1lbnVFeHRlbnNpb25zUmVnaXN0cnlQcm92aWRlcik7CiAgdmFyIHF1ZXJ5RmlsdGVyID0gUHJpdmF0ZShfcXVlcnlfZmlsdGVyLkZpbHRlckJhclF1ZXJ5RmlsdGVyUHJvdmlkZXIpOwogIHZhciBmaWx0ZXJHZW4gPSAoMCwgX2ZpbHRlcl9tYW5hZ2VyLmdldEZpbHRlckdlbmVyYXRvcikocXVlcnlGaWx0ZXIpOwogIHZhciBpbnNwZWN0b3JBZGFwdGVycyA9IHsKICAgIHJlcXVlc3RzOiBuZXcgX2FkYXB0ZXJzLlJlcXVlc3RBZGFwdGVyKCkKICB9OwogIHZhciBzdWJzY3JpcHRpb25zID0gbmV3IF9yeGpzLlN1YnNjcmlwdGlvbigpOwoKICBfdGltZWZpbHRlci50aW1lZmlsdGVyLmRpc2FibGVUaW1lUmFuZ2VTZWxlY3RvcigpOwoKICBfdGltZWZpbHRlci50aW1lZmlsdGVyLmRpc2FibGVBdXRvUmVmcmVzaFNlbGVjdG9yKCk7CgogICRzY29wZS5nZXREb2NMaW5rID0gX2RvY3VtZW50YXRpb25fbGlua3MuZ2V0RG9jTGluazsKICAkc2NvcGUuaW50ZXJ2YWxPcHRpb25zID0gX2ludGVydmFsX29wdGlvbnMuaW50ZXJ2YWxPcHRpb25zOwogICRzY29wZS5zaG93SW50ZXJ2YWwgPSBmYWxzZTsKICAkc2NvcGUubWluaW11bVZpc2libGVSb3dzID0gNTA7CiAgJHNjb3BlLmZldGNoU3RhdHVzID0gZmV0Y2hTdGF0dXNlcy5VTklOSVRJQUxJWkVEOwogICRzY29wZS5yZWZyZXNoSW50ZXJ2YWwgPSBfdGltZWZpbHRlci50aW1lZmlsdGVyLmdldFJlZnJlc2hJbnRlcnZhbCgpOwogICRzY29wZS5zYXZlZFF1ZXJ5ID0gJHJvdXRlLmN1cnJlbnQubG9jYWxzLnNhdmVkUXVlcnk7CiAgJHNjb3BlLnNob3dTYXZlUXVlcnkgPSB1aUNhcGFiaWxpdGllcy5kaXNjb3Zlci5zYXZlUXVlcnk7CiAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdWlDYXBhYmlsaXRpZXMuZGlzY292ZXIuc2F2ZVF1ZXJ5OwogIH0sIGZ1bmN0aW9uIChuZXdDYXBhYmlsaXR5KSB7CiAgICAkc2NvcGUuc2hvd1NhdmVRdWVyeSA9IG5ld0NhcGFiaWxpdHk7CiAgfSk7CgogICRzY29wZS5pbnRlcnZhbEVuYWJsZWQgPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHsKICAgIHJldHVybiBpbnRlcnZhbC52YWwgIT09ICdjdXN0b20nOwogIH07IC8vIHRoZSBzYXZlZCBzYXZlZFNlYXJjaAoKCiAgdmFyIHNhdmVkU2VhcmNoID0gJHJvdXRlLmN1cnJlbnQubG9jYWxzLnNhdmVkU2VhcmNoOwogICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkgewogICAgc2F2ZWRTZWFyY2guZGVzdHJveSgpOwogICAgc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpOwogIH0pOwogIHZhciAkYXBwU3RhdHVzID0gJHNjb3BlLmFwcFN0YXR1cyA9IHRoaXMuYXBwU3RhdHVzID0gewogICAgZGlydHk6ICFzYXZlZFNlYXJjaC5pZAogIH07CgogIHZhciBnZXRUb3BOYXZMaW5rcyA9IGZ1bmN0aW9uIGdldFRvcE5hdkxpbmtzKCkgewogICAgdmFyIG5ld1NlYXJjaCA9IHsKICAgICAgaWQ6ICduZXcnLAogICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5sb2NhbE1lbnUubG9jYWxNZW51Lm5ld1NlYXJjaFRpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTmV3JwogICAgICB9KSwKICAgICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIubG9jYWxNZW51Lm5ld1NlYXJjaERlc2NyaXB0aW9uJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTmV3IFNlYXJjaCcKICAgICAgfSksCiAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKCkgewogICAgICAgICRzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGtiblVybC5jaGFuZ2UoJy9kaXNjb3ZlcicpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICB0ZXN0SWQ6ICdkaXNjb3Zlck5ld0J1dHRvbicKICAgIH07CiAgICB2YXIgc2F2ZVNlYXJjaCA9IHsKICAgICAgaWQ6ICdzYXZlJywKICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIubG9jYWxNZW51LnNhdmVUaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NhdmUnCiAgICAgIH0pLAogICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5sb2NhbE1lbnUuc2F2ZVNlYXJjaERlc2NyaXB0aW9uJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2F2ZSBTZWFyY2gnCiAgICAgIH0pLAogICAgICB0ZXN0SWQ6ICdkaXNjb3ZlclNhdmVCdXR0b24nLAogICAgICBydW46IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3J1biA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgICAgdmFyIG9uU2F2ZSwgc2F2ZU1vZGFsOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBvblNhdmUgPSBmdW5jdGlvbiBvblNhdmUoX3JlZjIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VGl0bGUgPSBfcmVmMi5uZXdUaXRsZSwKICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29weU9uU2F2ZSA9IF9yZWYyLm5ld0NvcHlPblNhdmUsCiAgICAgICAgICAgICAgICAgICAgICAgIGlzVGl0bGVEdXBsaWNhdGVDb25maXJtZWQgPSBfcmVmMi5pc1RpdGxlRHVwbGljYXRlQ29uZmlybWVkLAogICAgICAgICAgICAgICAgICAgICAgICBvblRpdGxlRHVwbGljYXRlID0gX3JlZjIub25UaXRsZUR1cGxpY2F0ZTsKICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFRpdGxlID0gc2F2ZWRTZWFyY2gudGl0bGU7CiAgICAgICAgICAgICAgICAgICAgc2F2ZWRTZWFyY2gudGl0bGUgPSBuZXdUaXRsZTsKICAgICAgICAgICAgICAgICAgICBzYXZlZFNlYXJjaC5jb3B5T25TYXZlID0gbmV3Q29weU9uU2F2ZTsKICAgICAgICAgICAgICAgICAgICB2YXIgc2F2ZU9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAgICAgICBjb25maXJtT3ZlcndyaXRlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgIGlzVGl0bGVEdXBsaWNhdGVDb25maXJtZWQ6IGlzVGl0bGVEdXBsaWNhdGVDb25maXJtZWQsCiAgICAgICAgICAgICAgICAgICAgICBvblRpdGxlRHVwbGljYXRlOiBvblRpdGxlRHVwbGljYXRlCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2F2ZURhdGFTb3VyY2Uoc2F2ZU9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBfcmVmMy5pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IF9yZWYzLmVycm9yOwoKICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzYXZlIHdhc24ndCBzdWNjZXNzZnVsLCBwdXQgdGhlIG9yaWdpbmFsIHZhbHVlcyBiYWNrLgogICAgICAgICAgICAgICAgICAgICAgaWYgKCFpZCB8fCBlcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICBzYXZlZFNlYXJjaC50aXRsZSA9IGN1cnJlbnRUaXRsZTsKICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcgogICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgIHNhdmVNb2RhbCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NhdmVkX29iamVjdF9zYXZlX21vZGFsLlNhdmVkT2JqZWN0U2F2ZU1vZGFsLCB7CiAgICAgICAgICAgICAgICAgICAgb25TYXZlOiBvblNhdmUsCiAgICAgICAgICAgICAgICAgICAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzYXZlZFNlYXJjaC50aXRsZSwKICAgICAgICAgICAgICAgICAgICBzaG93Q29weU9uU2F2ZTogc2F2ZWRTZWFyY2guaWQgPyB0cnVlIDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0VHlwZTogInNlYXJjaCIsCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIubG9jYWxNZW51LnNhdmVTYXZlU2VhcmNoRGVzY3JpcHRpb24nLCB7CiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1NhdmUgeW91ciBEaXNjb3ZlciBzZWFyY2ggc28geW91IGNhbiB1c2UgaXQgaW4gdmlzdWFsaXphdGlvbnMgYW5kIGRhc2hib2FyZHMnCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICgwLCBfc2hvd19zYXZlZF9vYmplY3Rfc2F2ZV9tb2RhbC5zaG93U2F2ZU1vZGFsKShzYXZlTW9kYWwpOwoKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICB9KSk7CgogICAgICAgIGZ1bmN0aW9uIHJ1bigpIHsKICAgICAgICAgIHJldHVybiBfcnVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcnVuOwogICAgICB9KCkKICAgIH07CiAgICB2YXIgb3BlblNlYXJjaCA9IHsKICAgICAgaWQ6ICdvcGVuJywKICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIubG9jYWxNZW51Lm9wZW5UaXRsZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ09wZW4nCiAgICAgIH0pLAogICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5sb2NhbE1lbnUub3BlblNhdmVkU2VhcmNoRGVzY3JpcHRpb24nLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdPcGVuIFNhdmVkIFNlYXJjaCcKICAgICAgfSksCiAgICAgIHRlc3RJZDogJ2Rpc2NvdmVyT3BlbkJ1dHRvbicsCiAgICAgIHJ1bjogZnVuY3Rpb24gcnVuKCkgewogICAgICAgICgwLCBfc2hvd19vcGVuX3NlYXJjaF9wYW5lbC5zaG93T3BlblNlYXJjaFBhbmVsKSh7CiAgICAgICAgICBtYWtlVXJsOiBmdW5jdGlvbiBtYWtlVXJsKHNlYXJjaElkKSB7CiAgICAgICAgICAgIHJldHVybiBrYm5VcmwuZXZhbCgnIy9kaXNjb3Zlci97e2lkfX0nLCB7CiAgICAgICAgICAgICAgaWQ6IHNlYXJjaElkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9OwogICAgdmFyIHNoYXJlU2VhcmNoID0gewogICAgICBpZDogJ3NoYXJlJywKICAgICAgbGFiZWw6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIubG9jYWxNZW51LnNoYXJlVGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTaGFyZScKICAgICAgfSksCiAgICAgIGRlc2NyaXB0aW9uOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLmxvY2FsTWVudS5zaGFyZVNlYXJjaERlc2NyaXB0aW9uJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2hhcmUgU2VhcmNoJwogICAgICB9KSwKICAgICAgdGVzdElkOiAnc2hhcmVUb3BOYXZCdXR0b24nLAogICAgICBydW46IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3J1bjIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgICAvKiNfX1BVUkVfXyovCiAgICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoYW5jaG9yRWxlbWVudCkgewogICAgICAgICAgdmFyIHNoYXJpbmdEYXRhOwogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZ2V0U2hhcmluZ0RhdGEoKTsKCiAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgIHNoYXJpbmdEYXRhID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICAgICgwLCBfc2hhcmUuc2hvd1NoYXJlQ29udGV4dE1lbnUpKHsKICAgICAgICAgICAgICAgICAgICBhbmNob3JFbGVtZW50OiBhbmNob3JFbGVtZW50LAogICAgICAgICAgICAgICAgICAgIGFsbG93RW1iZWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGFsbG93U2hvcnRVcmw6IHVpQ2FwYWJpbGl0aWVzLmRpc2NvdmVyLmNyZWF0ZVNob3J0VXJsLAogICAgICAgICAgICAgICAgICAgIGdldFVuaGFzaGFibGVTdGF0ZXM6IGdldFVuaGFzaGFibGVTdGF0ZXMsCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0SWQ6IHNhdmVkU2VhcmNoLmlkLAogICAgICAgICAgICAgICAgICAgIG9iamVjdFR5cGU6ICdzZWFyY2gnLAogICAgICAgICAgICAgICAgICAgIHNoYXJlQ29udGV4dE1lbnVFeHRlbnNpb25zOiBzaGFyZUNvbnRleHRNZW51RXh0ZW5zaW9ucywKICAgICAgICAgICAgICAgICAgICBzaGFyaW5nRGF0YTogX29iamVjdFNwcmVhZCh7fSwgc2hhcmluZ0RhdGEsIHsKICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBzYXZlZFNlYXJjaC50aXRsZQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIGlzRGlydHk6ICRhcHBTdGF0dXMuZGlydHkKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgICAgfSkpOwoKICAgICAgICBmdW5jdGlvbiBydW4oX3gpIHsKICAgICAgICAgIHJldHVybiBfcnVuMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHJ1bjsKICAgICAgfSgpCiAgICB9OwogICAgdmFyIGluc3BlY3RTZWFyY2ggPSB7CiAgICAgIGlkOiAnaW5zcGVjdCcsCiAgICAgIGxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLmxvY2FsTWVudS5pbnNwZWN0VGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdJbnNwZWN0JwogICAgICB9KSwKICAgICAgZGVzY3JpcHRpb246IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIubG9jYWxNZW51Lm9wZW5JbnNwZWN0b3JGb3JTZWFyY2hEZXNjcmlwdGlvbicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ09wZW4gSW5zcGVjdG9yIGZvciBzZWFyY2gnCiAgICAgIH0pLAogICAgICB0ZXN0SWQ6ICdvcGVuSW5zcGVjdG9yQnV0dG9uJywKICAgICAgcnVuOiBmdW5jdGlvbiBydW4oKSB7CiAgICAgICAgX2luc3BlY3Rvci5JbnNwZWN0b3Iub3BlbihpbnNwZWN0b3JBZGFwdGVycywgewogICAgICAgICAgdGl0bGU6IHNhdmVkU2VhcmNoLnRpdGxlCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH07CiAgICByZXR1cm4gW25ld1NlYXJjaF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh1aUNhcGFiaWxpdGllcy5kaXNjb3Zlci5zYXZlID8gW3NhdmVTZWFyY2hdIDogW10pLCBbb3BlblNlYXJjaCwgc2hhcmVTZWFyY2gsIGluc3BlY3RTZWFyY2hdKTsKICB9OwoKICAkc2NvcGUudG9wTmF2TWVudSA9IGdldFRvcE5hdkxpbmtzKCk7IC8vIHRoZSBhY3R1YWwgY291cmllci5TZWFyY2hTb3VyY2UKCiAgJHNjb3BlLnNlYXJjaFNvdXJjZSA9IHNhdmVkU2VhcmNoLnNlYXJjaFNvdXJjZTsKICAkc2NvcGUuaW5kZXhQYXR0ZXJuID0gcmVzb2x2ZUluZGV4UGF0dGVybkxvYWRpbmcoKTsKICAkc2NvcGUuc2VhcmNoU291cmNlLnNldEZpZWxkKCdpbmRleCcsICRzY29wZS5pbmRleFBhdHRlcm4pLnNldEZpZWxkKCdoaWdobGlnaHRBbGwnLCB0cnVlKS5zZXRGaWVsZCgndmVyc2lvbicsIHRydWUpOyAvLyBFdmVuIHdoZW4gc2VhcmNoaW5nIHJvbGx1cHMsIHdlIHdhbnQgdG8gdXNlIHRoZSBkZWZhdWx0IHN0cmF0ZWd5IHNvIHRoYXQgd2UgZ2V0IGJhY2sgYQogIC8vIGRvY3VtZW50LWxpa2UgcmVzcG9uc2UuCgogICRzY29wZS5zZWFyY2hTb3VyY2Uuc2V0UHJlZmVycmVkU2VhcmNoU3RyYXRlZ3lJZCgnZGVmYXVsdCcpOyAvLyBzZWFyY2hTb3VyY2Ugd2hpY2ggYXBwbGllcyB0aW1lIHJhbmdlCgogIHZhciB0aW1lUmFuZ2VTZWFyY2hTb3VyY2UgPSBzYXZlZFNlYXJjaC5zZWFyY2hTb3VyY2UuY3JlYXRlKCk7CgogIGlmICgoMCwgX2NvdXJpZXIuaXNEZWZhdWx0VHlwZUluZGV4UGF0dGVybikoJHNjb3BlLmluZGV4UGF0dGVybikpIHsKICAgIHRpbWVSYW5nZVNlYXJjaFNvdXJjZS5zZXRGaWVsZCgnZmlsdGVyJywgZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gX3RpbWVmaWx0ZXIudGltZWZpbHRlci5jcmVhdGVGaWx0ZXIoJHNjb3BlLmluZGV4UGF0dGVybik7CiAgICB9KTsKICB9CgogICRzY29wZS5zZWFyY2hTb3VyY2Uuc2V0UGFyZW50KHRpbWVSYW5nZVNlYXJjaFNvdXJjZSk7CiAgdmFyIHBhZ2VUaXRsZVN1ZmZpeCA9IHNhdmVkU2VhcmNoLmlkICYmIHNhdmVkU2VhcmNoLnRpdGxlID8gIjogIi5jb25jYXQoc2F2ZWRTZWFyY2gudGl0bGUpIDogJyc7CgogIF9kb2NfdGl0bGUuZG9jVGl0bGUuY2hhbmdlKCJEaXNjb3ZlciIuY29uY2F0KHBhZ2VUaXRsZVN1ZmZpeCkpOwoKICB2YXIgZGlzY292ZXJCcmVhZGNydW1ic1RpdGxlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5kaXNjb3ZlckJyZWFkY3J1bWJUaXRsZScsIHsKICAgIGRlZmF1bHRNZXNzYWdlOiAnRGlzY292ZXInCiAgfSk7CgogIGlmIChzYXZlZFNlYXJjaC5pZCAmJiBzYXZlZFNlYXJjaC50aXRsZSkgewogICAgX2Nocm9tZS5kZWZhdWx0LmJyZWFkY3J1bWJzLnNldChbewogICAgICB0ZXh0OiBkaXNjb3ZlckJyZWFkY3J1bWJzVGl0bGUsCiAgICAgIGhyZWY6ICcjL2Rpc2NvdmVyJwogICAgfSwgewogICAgICB0ZXh0OiBzYXZlZFNlYXJjaC50aXRsZQogICAgfV0pOwogIH0gZWxzZSB7CiAgICBfY2hyb21lLmRlZmF1bHQuYnJlYWRjcnVtYnMuc2V0KFt7CiAgICAgIHRleHQ6IGRpc2NvdmVyQnJlYWRjcnVtYnNUaXRsZQogICAgfV0pOwogIH0KCiAgdmFyIHN0YXRlTW9uaXRvcjsKICB2YXIgJHN0YXRlID0gJHNjb3BlLnN0YXRlID0gbmV3IEFwcFN0YXRlKGdldFN0YXRlRGVmYXVsdHMoKSk7CiAgJHNjb3BlLmZpbHRlcnMgPSBxdWVyeUZpbHRlci5nZXRGaWx0ZXJzKCk7CiAgJHNjb3BlLnNjcmVlblRpdGxlID0gc2F2ZWRTZWFyY2gudGl0bGU7CgogICRzY29wZS5vbkZpbHRlcnNVcGRhdGVkID0gZnVuY3Rpb24gKGZpbHRlcnMpIHsKICAgIC8vIFRoZSBmaWx0ZXJzIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgd2hlbiB0aGUgcXVlcnlGaWx0ZXIgZW1pdHMgYW4gdXBkYXRlIGV2ZW50IChzZWUgYmVsb3cpCiAgICBxdWVyeUZpbHRlci5zZXRGaWx0ZXJzKGZpbHRlcnMpOwogIH07CgogICRzY29wZS5hcHBseUZpbHRlcnMgPSBmdW5jdGlvbiAoZmlsdGVycykgewogICAgcXVlcnlGaWx0ZXIuYWRkRmlsdGVyc0FuZENoYW5nZVRpbWVGaWx0ZXIoZmlsdGVycyk7CiAgICAkc2NvcGUuc3RhdGUuJG5ld0ZpbHRlcnMgPSBbXTsKICB9OwoKICAkc2NvcGUuJHdhdGNoKCdzdGF0ZS4kbmV3RmlsdGVycycsIGZ1bmN0aW9uICgpIHsKICAgIHZhciBmaWx0ZXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTsKCiAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDEpIHsKICAgICAgJHNjb3BlLmFwcGx5RmlsdGVycyhmaWx0ZXJzKTsKICAgIH0KICB9KTsKCiAgdmFyIGdldEZpZWxkQ291bnRzID0KICAvKiNfX1BVUkVfXyovCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoISgkc2NvcGUuZmV0Y2hTdGF0dXMgPT09IGZldGNoU3RhdHVzZXMuQ09NUExFVEUpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCAkc2NvcGUuZmllbGRDb3VudHMpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgIHZhciB1bndhdGNoID0gJHNjb3BlLiR3YXRjaCgnZmV0Y2hTdGF0dXMnLCBmdW5jdGlvbiAobmV3VmFsdWUpIHsKICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBmZXRjaFN0YXR1c2VzLkNPTVBMRVRFKSB7CiAgICAgICAgICAgICAgICAgICAgdW53YXRjaCgpOwogICAgICAgICAgICAgICAgICAgIHJlc29sdmUoJHNjb3BlLmZpZWxkQ291bnRzKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0My5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKTsKCiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0RmllbGRDb3VudHMoKSB7CiAgICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIHZhciBnZXRTaGFyaW5nRGF0YUZpZWxkcyA9CiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmNSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgIHZhciBzZWxlY3RlZEZpZWxkcywgZmllbGRDb3VudHMsIHRpbWVGaWVsZE5hbWUsIGhpZGVUaW1lQ29sdW1uLCBmaWVsZHM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc2VsZWN0ZWRGaWVsZHMgPSAkc3RhdGUuY29sdW1uczsKCiAgICAgICAgICAgICAgaWYgKCEoc2VsZWN0ZWRGaWVsZHMubGVuZ3RoID09PSAxICYmIHNlbGVjdGVkRmllbGRzWzBdID09PSAnX3NvdXJjZScpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gZ2V0RmllbGRDb3VudHMoKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBmaWVsZENvdW50cyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICBzZWFyY2hGaWVsZHM6IG51bGwsCiAgICAgICAgICAgICAgICBzZWxlY3RGaWVsZHM6IF9sb2Rhc2guZGVmYXVsdC5rZXlzKGZpZWxkQ291bnRzKS5zb3J0KCkKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICB0aW1lRmllbGROYW1lID0gJHNjb3BlLmluZGV4UGF0dGVybi50aW1lRmllbGROYW1lOwogICAgICAgICAgICAgIGhpZGVUaW1lQ29sdW1uID0gY29uZmlnLmdldCgnZG9jX3RhYmxlOmhpZGVUaW1lQ29sdW1uJyk7CiAgICAgICAgICAgICAgZmllbGRzID0gdGltZUZpZWxkTmFtZSAmJiAhaGlkZVRpbWVDb2x1bW4gPyBbdGltZUZpZWxkTmFtZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShzZWxlY3RlZEZpZWxkcykpIDogc2VsZWN0ZWRGaWVsZHM7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgIHNlYXJjaEZpZWxkczogZmllbGRzLAogICAgICAgICAgICAgICAgc2VsZWN0RmllbGRzOiBmaWVsZHMKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIGdldFNoYXJpbmdEYXRhRmllbGRzKCkgewogICAgICByZXR1cm4gX3JlZjUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpOwoKICB0aGlzLmdldFNoYXJpbmdEYXRhID0KICAvKiNfX1BVUkVfXyovCiAgX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkgewogICAgdmFyIHNlYXJjaFNvdXJjZSwgX3JlZjcsIHNlYXJjaEZpZWxkcywgc2VsZWN0RmllbGRzLCBib2R5OwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHNlYXJjaFNvdXJjZSA9ICRzY29wZS5zZWFyY2hTb3VyY2UuY3JlYXRlQ29weSgpOwogICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDM7CiAgICAgICAgICAgIHJldHVybiBnZXRTaGFyaW5nRGF0YUZpZWxkcygpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgX3JlZjcgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgc2VhcmNoRmllbGRzID0gX3JlZjcuc2VhcmNoRmllbGRzOwogICAgICAgICAgICBzZWxlY3RGaWVsZHMgPSBfcmVmNy5zZWxlY3RGaWVsZHM7CiAgICAgICAgICAgIHNlYXJjaFNvdXJjZS5zZXRGaWVsZCgnZmllbGRzJywgc2VhcmNoRmllbGRzKTsKICAgICAgICAgICAgc2VhcmNoU291cmNlLnNldEZpZWxkKCdzb3J0JywgKDAsIF9nZXRfc29ydC5nZXRTb3J0KSgkc3RhdGUuc29ydCwgJHNjb3BlLmluZGV4UGF0dGVybikpOwogICAgICAgICAgICBzZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ2hpZ2hsaWdodCcsIG51bGwpOwogICAgICAgICAgICBzZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ2hpZ2hsaWdodEFsbCcsIG51bGwpOwogICAgICAgICAgICBzZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ2FnZ3MnLCBudWxsKTsKICAgICAgICAgICAgc2VhcmNoU291cmNlLnNldEZpZWxkKCdzaXplJywgbnVsbCk7CiAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTQ7CiAgICAgICAgICAgIHJldHVybiBzZWFyY2hTb3VyY2UuZ2V0U2VhcmNoUmVxdWVzdEJvZHkoKTsKCiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBib2R5ID0gX2NvbnRleHQ1LnNlbnQ7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgc2VhcmNoUmVxdWVzdDogewogICAgICAgICAgICAgICAgaW5kZXg6IHNlYXJjaFNvdXJjZS5nZXRGaWVsZCgnaW5kZXgnKS50aXRsZSwKICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZpZWxkczogc2VsZWN0RmllbGRzLAogICAgICAgICAgICAgIG1ldGFGaWVsZHM6ICRzY29wZS5pbmRleFBhdHRlcm4ubWV0YUZpZWxkcywKICAgICAgICAgICAgICBjb25mbGljdGVkVHlwZXNGaWVsZHM6ICRzY29wZS5pbmRleFBhdHRlcm4uZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZikgewogICAgICAgICAgICAgICAgcmV0dXJuIGYudHlwZSA9PT0gJ2NvbmZsaWN0JzsKICAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmLm5hbWU7CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuSWQ6IHNlYXJjaFNvdXJjZS5nZXRGaWVsZCgnaW5kZXgnKS5pZAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNSk7CiAgfSkpOwogICRzY29wZS51aVN0YXRlID0gJHN0YXRlLm1ha2VTdGF0ZWZ1bCgndWlTdGF0ZScpOwoKICBmdW5jdGlvbiBnZXRTdGF0ZURlZmF1bHRzKCkgewogICAgcmV0dXJuIHsKICAgICAgcXVlcnk6ICRzY29wZS5zYXZlZFF1ZXJ5ICYmICRzY29wZS5zYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMucXVlcnkgfHwgJHNjb3BlLnNlYXJjaFNvdXJjZS5nZXRGaWVsZCgncXVlcnknKSB8fCB7CiAgICAgICAgcXVlcnk6ICcnLAogICAgICAgIGxhbmd1YWdlOiBsb2NhbFN0b3JhZ2UuZ2V0KCdraWJhbmEudXNlclF1ZXJ5TGFuZ3VhZ2UnKSB8fCBjb25maWcuZ2V0KCdzZWFyY2g6cXVlcnlMYW5ndWFnZScpCiAgICAgIH0sCiAgICAgIHNvcnQ6IF9nZXRfc29ydC5nZXRTb3J0LmFycmF5KHNhdmVkU2VhcmNoLnNvcnQsICRzY29wZS5pbmRleFBhdHRlcm4sIGNvbmZpZy5nZXQoJ2Rpc2NvdmVyOnNvcnQ6ZGVmYXVsdE9yZGVyJykpLAogICAgICBjb2x1bW5zOiBzYXZlZFNlYXJjaC5jb2x1bW5zLmxlbmd0aCA+IDAgPyBzYXZlZFNlYXJjaC5jb2x1bW5zIDogY29uZmlnLmdldCgnZGVmYXVsdENvbHVtbnMnKS5zbGljZSgpLAogICAgICBpbmRleDogJHNjb3BlLmluZGV4UGF0dGVybi5pZCwKICAgICAgaW50ZXJ2YWw6ICdhdXRvJywKICAgICAgZmlsdGVyczogJHNjb3BlLnNhdmVkUXVlcnkgJiYgJHNjb3BlLnNhdmVkUXVlcnkuYXR0cmlidXRlcy5maWx0ZXJzIHx8IF9sb2Rhc2guZGVmYXVsdC5jbG9uZURlZXAoJHNjb3BlLnNlYXJjaFNvdXJjZS5nZXRPd25GaWVsZCgnZmlsdGVyJykpCiAgICB9OwogIH0KCiAgJHN0YXRlLmluZGV4ID0gJHNjb3BlLmluZGV4UGF0dGVybi5pZDsKICAkc3RhdGUuc29ydCA9IF9nZXRfc29ydC5nZXRTb3J0LmFycmF5KCRzdGF0ZS5zb3J0LCAkc2NvcGUuaW5kZXhQYXR0ZXJuKTsKCiAgJHNjb3BlLmdldEJ1Y2tldEludGVydmFsVG9vbFRpcFRleHQgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5idWNrZXRJbnRlcnZhbFRvb2x0aXAnLCB7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuCiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhpcyBpbnRlcnZhbCBjcmVhdGVzIHtidWNrZXRzRGVzY3JpcHRpb259IHRvIHNob3cgaW4gdGhlIHNlbGVjdGVkIHRpbWUgcmFuZ2UsIHNvIGl0IGhhcyBiZWVuIHNjYWxlZCB0byB7YnVja2V0SW50ZXJ2YWxEZXNjcmlwdGlvbn0nLAogICAgICB2YWx1ZXM6IHsKICAgICAgICBidWNrZXRzRGVzY3JpcHRpb246ICRzY29wZS5idWNrZXRJbnRlcnZhbC5zY2FsZSA+IDEgPyBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLmJ1Y2tldEludGVydmFsVG9vbHRpcC50b29MYXJnZUJ1Y2tldHNUZXh0JywgewogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdidWNrZXRzIHRoYXQgYXJlIHRvbyBsYXJnZScKICAgICAgICB9KSA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIuYnVja2V0SW50ZXJ2YWxUb29sdGlwLnRvb01hbnlCdWNrZXRzVGV4dCcsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAndG9vIG1hbnkgYnVja2V0cycKICAgICAgICB9KSwKICAgICAgICBidWNrZXRJbnRlcnZhbERlc2NyaXB0aW9uOiAkc2NvcGUuYnVja2V0SW50ZXJ2YWwuZGVzY3JpcHRpb24KICAgICAgfQogICAgfSk7CiAgfTsKCiAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ3N0YXRlLmNvbHVtbnMnLCBmdW5jdGlvbiAoKSB7CiAgICAkc3RhdGUuc2F2ZSgpOwogIH0pOwogICRzY29wZS5vcHRzID0gewogICAgLy8gbnVtYmVyIG9mIHJlY29yZHMgdG8gZmV0Y2gsIHRoZW4gcGFnaW5hdGUgdGhyb3VnaAogICAgc2FtcGxlU2l6ZTogY29uZmlnLmdldCgnZGlzY292ZXI6c2FtcGxlU2l6ZScpLAogICAgdGltZWZpZWxkOiAoMCwgX2NvdXJpZXIuaXNEZWZhdWx0VHlwZUluZGV4UGF0dGVybikoJHNjb3BlLmluZGV4UGF0dGVybikgJiYgJHNjb3BlLmluZGV4UGF0dGVybi50aW1lRmllbGROYW1lLAogICAgc2F2ZWRTZWFyY2g6IHNhdmVkU2VhcmNoLAogICAgaW5kZXhQYXR0ZXJuTGlzdDogJHJvdXRlLmN1cnJlbnQubG9jYWxzLmlwLmxpc3QKICB9OwoKICB2YXIgc2hvdWxkU2VhcmNoT25QYWdlTG9hZCA9IGZ1bmN0aW9uIHNob3VsZFNlYXJjaE9uUGFnZUxvYWQoKSB7CiAgICAvLyBBIHNhdmVkIHNlYXJjaCBpcyBjcmVhdGVkIG9uIGV2ZXJ5IHBhZ2UgbG9hZCwgc28gd2UgY2hlY2sgdGhlIElEIHRvIHNlZSBpZiB3ZSdyZSBsb2FkaW5nIGEKICAgIC8vIHByZXZpb3VzbHkgc2F2ZWQgc2VhcmNoIG9yIGlmIGl0IGlzIGp1c3QgdHJhbnNpZW50CiAgICByZXR1cm4gY29uZmlnLmdldCgnZGlzY292ZXI6c2VhcmNoT25QYWdlTG9hZCcpIHx8IHNhdmVkU2VhcmNoLmlkICE9PSB1bmRlZmluZWQgfHwgX2xvZGFzaC5kZWZhdWx0LmdldCgkc2NvcGUsICdyZWZyZXNoSW50ZXJ2YWwucGF1c2UnKSA9PT0gZmFsc2U7CiAgfTsKCiAgdmFyIGluaXQgPSBfbG9kYXNoLmRlZmF1bHQub25jZShmdW5jdGlvbiAoKSB7CiAgICBzdGF0ZU1vbml0b3IgPSBfc3RhdGVfbW9uaXRvcl9mYWN0b3J5LnN0YXRlTW9uaXRvckZhY3RvcnkuY3JlYXRlKCRzdGF0ZSwgZ2V0U3RhdGVEZWZhdWx0cygpKTsKICAgIHN0YXRlTW9uaXRvci5vbkNoYW5nZShmdW5jdGlvbiAoc3RhdHVzKSB7CiAgICAgICRhcHBTdGF0dXMuZGlydHkgPSBzdGF0dXMuZGlydHkgfHwgIXNhdmVkU2VhcmNoLmlkOwogICAgfSk7CiAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHN0YXRlTW9uaXRvci5kZXN0cm95KCk7CiAgICB9KTsKICAgICRzY29wZS51cGRhdGVEYXRhU291cmNlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgIHN1YnNjcmlwdGlvbnMuYWRkKCgwLCBfc3Vic2NyaWJlX3dpdGhfc2NvcGUuc3Vic2NyaWJlV2l0aFNjb3BlKSgkc2NvcGUsIF90aW1lZmlsdGVyLnRpbWVmaWx0ZXIuZ2V0QXV0b1JlZnJlc2hGZXRjaCQoKSwgewogICAgICAgIG5leHQ6ICRzY29wZS5mZXRjaAogICAgICB9KSk7CiAgICAgIHN1YnNjcmlwdGlvbnMuYWRkKCgwLCBfc3Vic2NyaWJlX3dpdGhfc2NvcGUuc3Vic2NyaWJlV2l0aFNjb3BlKSgkc2NvcGUsIF90aW1lZmlsdGVyLnRpbWVmaWx0ZXIuZ2V0UmVmcmVzaEludGVydmFsVXBkYXRlJCgpLCB7CiAgICAgICAgbmV4dDogJHNjb3BlLnVwZGF0ZVJlZnJlc2hJbnRlcnZhbAogICAgICB9KSk7CiAgICAgIHN1YnNjcmlwdGlvbnMuYWRkKCgwLCBfc3Vic2NyaWJlX3dpdGhfc2NvcGUuc3Vic2NyaWJlV2l0aFNjb3BlKSgkc2NvcGUsIF90aW1lZmlsdGVyLnRpbWVmaWx0ZXIuZ2V0VGltZVVwZGF0ZSQoKSwgewogICAgICAgIG5leHQ6ICRzY29wZS51cGRhdGVUaW1lCiAgICAgIH0pKTsKICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoKDAsIF9zdWJzY3JpYmVfd2l0aF9zY29wZS5zdWJzY3JpYmVXaXRoU2NvcGUpKCRzY29wZSwgX3RpbWVmaWx0ZXIudGltZWZpbHRlci5nZXRGZXRjaCQoKSwgewogICAgICAgIG5leHQ6ICRzY29wZS5mZXRjaAogICAgICB9KSk7CiAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdzdGF0ZS5zb3J0JywgZnVuY3Rpb24gKHNvcnQpIHsKICAgICAgICBpZiAoIXNvcnQpIHJldHVybjsgLy8gZ2V0IHRoZSBjdXJyZW50IHNvcnQgZnJvbSBzZWFyY2hTb3VyY2UgYXMgYXJyYXkgb2YgYXJyYXlzCgogICAgICAgIHZhciBjdXJyZW50U29ydCA9IF9nZXRfc29ydC5nZXRTb3J0LmFycmF5KCRzY29wZS5zZWFyY2hTb3VyY2UuZ2V0RmllbGQoJ3NvcnQnKSwgJHNjb3BlLmluZGV4UGF0dGVybik7IC8vIGlmIHRoZSBzZWFyY2hTb3VyY2UgZG9lc24ndCBrbm93LCB0ZWxsIGl0IHNvCgoKICAgICAgICBpZiAoIV9hbmd1bGFyLmRlZmF1bHQuZXF1YWxzKHNvcnQsIGN1cnJlbnRTb3J0KSkgJHNjb3BlLmZldGNoKCk7CiAgICAgIH0pOyAvLyB1cGRhdGUgZGF0YSBzb3VyY2Ugd2hlbiBmaWx0ZXJzIHVwZGF0ZQoKICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoKDAsIF9zdWJzY3JpYmVfd2l0aF9zY29wZS5zdWJzY3JpYmVXaXRoU2NvcGUpKCRzY29wZSwgcXVlcnlGaWx0ZXIuZ2V0VXBkYXRlcyQoKSwgewogICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgICAkc2NvcGUuZmlsdGVycyA9IHF1ZXJ5RmlsdGVyLmdldEZpbHRlcnMoKTsKICAgICAgICAgICRzY29wZS51cGRhdGVEYXRhU291cmNlKCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICRzdGF0ZS5zYXZlKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pKTsgLy8gZmV0Y2ggZGF0YSB3aGVuIGZpbHRlcnMgZmlyZSBmZXRjaCBldmVudAoKICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoKDAsIF9zdWJzY3JpYmVfd2l0aF9zY29wZS5zdWJzY3JpYmVXaXRoU2NvcGUpKCRzY29wZSwgcXVlcnlGaWx0ZXIuZ2V0VXBkYXRlcyQoKSwgewogICAgICAgIG5leHQ6ICRzY29wZS5mZXRjaAogICAgICB9KSk7IC8vIHVwZGF0ZSBkYXRhIHNvdXJjZSB3aGVuIGhpdHRpbmcgZm9yd2FyZC9iYWNrIGFuZCB0aGUgcXVlcnkgY2hhbmdlcwoKICAgICAgJHNjb3BlLiRsaXN0ZW4oJHN0YXRlLCAnZmV0Y2hfd2l0aF9jaGFuZ2VzJywgZnVuY3Rpb24gKGRpZmYpIHsKICAgICAgICBpZiAoZGlmZi5pbmRleE9mKCdxdWVyeScpID49IDApICRzY29wZS5mZXRjaCgpOwogICAgICB9KTsKICAgICAgJHNjb3BlLiR3YXRjaCgnb3B0cy50aW1lZmllbGQnLCBmdW5jdGlvbiAodGltZWZpZWxkKSB7CiAgICAgICAgJHNjb3BlLmVuYWJsZVRpbWVSYW5nZVNlbGVjdG9yID0gISF0aW1lZmllbGQ7CiAgICAgIH0pOwogICAgICAkc2NvcGUuJHdhdGNoKCdzdGF0ZS5pbnRlcnZhbCcsIGZ1bmN0aW9uIChuZXdJbnRlcnZhbCwgb2xkSW50ZXJ2YWwpIHsKICAgICAgICBpZiAobmV3SW50ZXJ2YWwgIT09IG9sZEludGVydmFsKSB7CiAgICAgICAgICAkc2NvcGUuZmV0Y2goKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAkc2NvcGUuJHdhdGNoKCd2aXMuYWdncycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBubyB0aW1lZmllbGQsIG5vIHZpcywgbm90aGluZyB0byB1cGRhdGUKICAgICAgICBpZiAoISRzY29wZS5vcHRzLnRpbWVmaWVsZCkgcmV0dXJuOwogICAgICAgIHZhciBidWNrZXRzID0gJHNjb3BlLnZpcy5nZXRBZ2dDb25maWcoKS5ieVNjaGVtYUdyb3VwLmJ1Y2tldHM7CgogICAgICAgIGlmIChidWNrZXRzICYmIGJ1Y2tldHMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgICAkc2NvcGUuYnVja2V0SW50ZXJ2YWwgPSBidWNrZXRzWzBdLmJ1Y2tldHMuZ2V0SW50ZXJ2YWwoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAkc2NvcGUuJHdhdGNoKCdzdGF0ZS5xdWVyeScsIGZ1bmN0aW9uIChuZXdRdWVyeSwgb2xkUXVlcnkpIHsKICAgICAgICBpZiAoIV9sb2Rhc2guZGVmYXVsdC5pc0VxdWFsKG5ld1F1ZXJ5LCBvbGRRdWVyeSkpIHsKICAgICAgICAgIHZhciBxdWVyeSA9ICgwLCBfbWlncmF0ZV9sZWdhY3lfcXVlcnkubWlncmF0ZUxlZ2FjeVF1ZXJ5KShuZXdRdWVyeSk7CiAgICAgICAgICAkc2NvcGUudXBkYXRlUXVlcnlBbmRGZXRjaCh7CiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgJHNjb3BlLiR3YXRjaE11bHRpKFsncm93cycsICdmZXRjaFN0YXR1cyddLCBmdW5jdGlvbiB1cGRhdGVSZXN1bHRTdGF0ZSgpIHsKICAgICAgICB2YXIgcHJldiA9IHt9OwogICAgICAgIHZhciBzdGF0dXMgPSB7CiAgICAgICAgICBVTklOSVRJQUxJWkVEOiAndW5pbml0aWFsaXplZCcsCiAgICAgICAgICBMT0FESU5HOiAnbG9hZGluZycsCiAgICAgICAgICAvLyBpbml0aWFsIGRhdGEgbG9hZAogICAgICAgICAgUkVBRFk6ICdyZWFkeScsCiAgICAgICAgICAvLyByZXN1bHRzIGNhbWUgYmFjawogICAgICAgICAgTk9fUkVTVUxUUzogJ25vbmUnIC8vIG5vIHJlc3VsdHMgY2FtZSBiYWNrCgogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIHBpY2socm93cywgb2xkUm93cywgZmV0Y2hTdGF0dXMpIHsKICAgICAgICAgIC8vIGluaXRpYWwgc3RhdGUsIHByZXRlbmQgd2UncmUgYWxyZWFkeSBsb2FkaW5nIGlmIHdlJ3JlIGFib3V0IHRvIGV4ZWN1dGUgYSBzZWFyY2ggc28KICAgICAgICAgIC8vIHRoYXQgdGhlIHVuaW5pdGlsaXplZCBtZXNzYWdlIGRvZXNuJ3QgZmxhc2ggb24gc2NyZWVuCiAgICAgICAgICBpZiAocm93cyA9PSBudWxsICYmIG9sZFJvd3MgPT0gbnVsbCAmJiBzaG91bGRTZWFyY2hPblBhZ2VMb2FkKCkpIHsKICAgICAgICAgICAgcmV0dXJuIHN0YXR1cy5MT0FESU5HOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChmZXRjaFN0YXR1cyA9PT0gZmV0Y2hTdGF0dXNlcy5VTklOSVRJQUxJWkVEKSB7CiAgICAgICAgICAgIHJldHVybiBzdGF0dXMuVU5JTklUSUFMSVpFRDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcm93c0VtcHR5ID0gX2xvZGFzaC5kZWZhdWx0LmlzRW1wdHkocm93cyk7CgogICAgICAgICAgaWYgKHJvd3NFbXB0eSAmJiBmZXRjaFN0YXR1cyA9PT0gZmV0Y2hTdGF0dXNlcy5MT0FESU5HKSByZXR1cm4gc3RhdHVzLkxPQURJTkc7ZWxzZSBpZiAoIXJvd3NFbXB0eSkgcmV0dXJuIHN0YXR1cy5SRUFEWTtlbHNlIHJldHVybiBzdGF0dXMuTk9fUkVTVUxUUzsKICAgICAgICB9CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgY3VycmVudCA9IHsKICAgICAgICAgICAgcm93czogJHNjb3BlLnJvd3MsCiAgICAgICAgICAgIGZldGNoU3RhdHVzOiAkc2NvcGUuZmV0Y2hTdGF0dXMKICAgICAgICAgIH07CiAgICAgICAgICAkc2NvcGUucmVzdWx0U3RhdGUgPSBwaWNrKGN1cnJlbnQucm93cywgcHJldi5yb3dzLCBjdXJyZW50LmZldGNoU3RhdHVzLCBwcmV2LmZldGNoU3RhdHVzKTsKICAgICAgICAgIHByZXYgPSBjdXJyZW50OwogICAgICAgIH07CiAgICAgIH0oKSk7CgogICAgICBpZiAoJHNjb3BlLm9wdHMudGltZWZpZWxkKSB7CiAgICAgICAgc2V0dXBWaXN1YWxpemF0aW9uKCk7CiAgICAgICAgJHNjb3BlLnVwZGF0ZVRpbWUoKTsKICAgICAgfQoKICAgICAgaW5pdC5jb21wbGV0ZSA9IHRydWU7CiAgICAgICRzdGF0ZS5yZXBsYWNlKCk7CgogICAgICBpZiAoc2hvdWxkU2VhcmNoT25QYWdlTG9hZCgpKSB7CiAgICAgICAgJHNjb3BlLmZldGNoKCk7CiAgICAgIH0KICAgIH0pOwogIH0pOwoKICBmdW5jdGlvbiBzYXZlRGF0YVNvdXJjZShfeDIpIHsKICAgIHJldHVybiBfc2F2ZURhdGFTb3VyY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIGZ1bmN0aW9uIF9zYXZlRGF0YVNvdXJjZSgpIHsKICAgIF9zYXZlRGF0YVNvdXJjZSA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoc2F2ZU9wdGlvbnMpIHsKICAgICAgdmFyIGlkOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnVwZGF0ZURhdGFTb3VyY2UoKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBzYXZlZFNlYXJjaC5jb2x1bW5zID0gJHNjb3BlLnN0YXRlLmNvbHVtbnM7CiAgICAgICAgICAgICAgc2F2ZWRTZWFyY2guc29ydCA9ICRzY29wZS5zdGF0ZS5zb3J0OwogICAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gNDsKICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIHNhdmVkU2VhcmNoLnNhdmUoc2F2ZU9wdGlvbnMpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGlkID0gX2NvbnRleHQ2LnNlbnQ7CiAgICAgICAgICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgc3RhdGVNb25pdG9yLnNldEluaXRpYWxTdGF0ZSgkc3RhdGUudG9KU09OKCkpOwoKICAgICAgICAgICAgICAgIGlmIChpZCkgewogICAgICAgICAgICAgICAgICBfbm90aWZ5LnRvYXN0Tm90aWZpY2F0aW9ucy5hZGRTdWNjZXNzKHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5ub3RpZmljYXRpb25zLnNhdmVkU2VhcmNoVGl0bGUnLCB7CiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNlYXJjaCAne3NhdmVkU2VhcmNoVGl0bGV9JyB3YXMgc2F2ZWQiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkU2VhcmNoVGl0bGU6IHNhdmVkU2VhcmNoLnRpdGxlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ3NhdmVTZWFyY2hTdWNjZXNzJwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIGlmIChzYXZlZFNlYXJjaC5pZCAhPT0gJHJvdXRlLmN1cnJlbnQucGFyYW1zLmlkKSB7CiAgICAgICAgICAgICAgICAgICAga2JuVXJsLmNoYW5nZSgnL2Rpc2NvdmVyL3t7aWR9fScsIHsKICAgICAgICAgICAgICAgICAgICAgIGlkOiBzYXZlZFNlYXJjaC5pZAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBkZWZhdWx0cyBzbyB0aGF0ICJyZWxvYWQgc2F2ZWQgcXVlcnkiIGZ1bmN0aW9ucyBjb3JyZWN0bHkKICAgICAgICAgICAgICAgICAgICAkc3RhdGUuc2V0RGVmYXVsdHMoZ2V0U3RhdGVEZWZhdWx0cygpKTsKCiAgICAgICAgICAgICAgICAgICAgX2RvY190aXRsZS5kb2NUaXRsZS5jaGFuZ2Uoc2F2ZWRTZWFyY2gubGFzdFNhdmVkVGl0bGUpOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgIGlkOiBpZAogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dDYucHJldiA9IDEyOwogICAgICAgICAgICAgIF9jb250ZXh0Ni50MCA9IF9jb250ZXh0NlsiY2F0Y2giXSg0KTsKCiAgICAgICAgICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKHsKICAgICAgICAgICAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLm5vdGlmaWNhdGlvbnMubm90U2F2ZWRTZWFyY2hUaXRsZScsIHsKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJTZWFyY2ggJ3tzYXZlZFNlYXJjaFRpdGxlfScgd2FzIG5vdCBzYXZlZC4iLAogICAgICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgICAgICBzYXZlZFNlYXJjaFRpdGxlOiBzYXZlZFNlYXJjaC50aXRsZQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIHRleHQ6IF9jb250ZXh0Ni50MC5tZXNzYWdlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICBlcnJvcjogX2NvbnRleHQ2LnQwCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTYsIG51bGwsIFtbNCwgMTJdXSk7CiAgICB9KSk7CiAgICByZXR1cm4gX3NhdmVEYXRhU291cmNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICAkc2NvcGUub3B0cy5mZXRjaCA9ICRzY29wZS5mZXRjaCA9IGZ1bmN0aW9uICgpIHsKICAgIC8vIGlnbm9yZSByZXF1ZXN0cyB0byBmZXRjaCBiZWZvcmUgdGhlIGFwcCBpbml0cwogICAgaWYgKCFpbml0LmNvbXBsZXRlKSByZXR1cm47CiAgICAkc2NvcGUuZmV0Y2hFcnJvciA9IHVuZGVmaW5lZDsKICAgICRzY29wZS51cGRhdGVUaW1lKCk7IC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyByZXF1ZXN0cyBiZWZvcmUgZmV0Y2hpbmcgYWdhaW4KCiAgICAkc2NvcGUuc2VhcmNoU291cmNlLmNhbmNlbFF1ZXVlZCgpOwogICAgJHNjb3BlLnVwZGF0ZURhdGFTb3VyY2UoKS50aGVuKHNldHVwVmlzdWFsaXphdGlvbikudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICRzdGF0ZS5zYXZlKCk7CiAgICAgICRzY29wZS5mZXRjaFN0YXR1cyA9IGZldGNoU3RhdHVzZXMuTE9BRElORzsKICAgICAgbG9nSW5zcGVjdG9yUmVxdWVzdCgpOwogICAgICByZXR1cm4gJHNjb3BlLnNlYXJjaFNvdXJjZS5mZXRjaCgpOwogICAgfSkudGhlbihvblJlc3VsdHMpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAvLyBJZiB0aGUgcmVxdWVzdCB3YXMgYWJvcnRlZCB0aGVuIG5vIG5lZWQgdG8gc3VyZmFjZSB0aGlzIGVycm9yIGluIHRoZSBVSQogICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHJldHVybjsKICAgICAgdmFyIGZldGNoRXJyb3IgPSAoMCwgX2dldF9wYWlubGVzc19lcnJvci5nZXRQYWlubGVzc0Vycm9yKShlcnJvcik7CgogICAgICBpZiAoZmV0Y2hFcnJvcikgewogICAgICAgICRzY29wZS5mZXRjaEVycm9yID0gZmV0Y2hFcnJvcjsKICAgICAgfSBlbHNlIHsKICAgICAgICBfbm90aWZ5LnRvYXN0Tm90aWZpY2F0aW9ucy5hZGRFcnJvcihlcnJvciwgewogICAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIuZXJyb3JMb2FkaW5nRGF0YScsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFcnJvciBsb2FkaW5nIGRhdGEnCiAgICAgICAgICB9KQogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9OwoKICAkc2NvcGUudXBkYXRlUXVlcnlBbmRGZXRjaCA9IGZ1bmN0aW9uIChfcmVmOCkgewogICAgdmFyIHF1ZXJ5ID0gX3JlZjgucXVlcnksCiAgICAgICAgZGF0ZVJhbmdlID0gX3JlZjguZGF0ZVJhbmdlOwoKICAgIF90aW1lZmlsdGVyLnRpbWVmaWx0ZXIuc2V0VGltZShkYXRlUmFuZ2UpOwoKICAgICRzdGF0ZS5xdWVyeSA9IHF1ZXJ5OwogICAgJHNjb3BlLmZldGNoKCk7CiAgfTsKCiAgZnVuY3Rpb24gb25SZXN1bHRzKHJlc3ApIHsKICAgIGxvZ0luc3BlY3RvclJlc3BvbnNlKHJlc3ApOwoKICAgIGlmICgkc2NvcGUub3B0cy50aW1lZmllbGQpIHsKICAgICAgdmFyIHRhYmlmaWVkRGF0YSA9ICgwLCBfdGFiaWZ5LnRhYmlmeUFnZ1Jlc3BvbnNlKSgkc2NvcGUudmlzLmFnZ3MsIHJlc3ApOwogICAgICAkc2NvcGUuc2VhcmNoU291cmNlLnJhd1Jlc3BvbnNlID0gcmVzcDsKICAgICAgUHJvbWlzZS5yZXNvbHZlKCgwLCBfYnVpbGRfcGlwZWxpbmUuYnVpbGRWaXNsaWJEaW1lbnNpb25zKSgkc2NvcGUudmlzLCB7CiAgICAgICAgdGltZVJhbmdlOiAkc2NvcGUudGltZVJhbmdlLAogICAgICAgIHNlYXJjaFNvdXJjZTogJHNjb3BlLnNlYXJjaFNvdXJjZQogICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgIHJldHVybiByZXNwb25zZUhhbmRsZXIodGFiaWZpZWREYXRhLCByZXNwKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgIHZpc3VhbGl6ZUhhbmRsZXIucmVuZGVyKHsKICAgICAgICAgIGFzOiAndmlzdWFsaXphdGlvbicsCiAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICB2aXNUeXBlOiAkc2NvcGUudmlzLnR5cGUubmFtZSwKICAgICAgICAgICAgdmlzRGF0YTogcmVzcCwKICAgICAgICAgICAgdmlzQ29uZmlnOiAkc2NvcGUudmlzLnBhcmFtcywKICAgICAgICAgICAgcGFyYW1zOiB7fQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAkc2NvcGUuaGl0cyA9IHJlc3AuaGl0cy50b3RhbDsKICAgICRzY29wZS5yb3dzID0gcmVzcC5oaXRzLmhpdHM7IC8vIGlmIHdlIGhhdmVuJ3QgY291bnRlZCB5ZXQsIHJlc2V0IHRoZSBjb3VudHMKCiAgICB2YXIgY291bnRzID0gJHNjb3BlLmZpZWxkQ291bnRzID0gJHNjb3BlLmZpZWxkQ291bnRzIHx8IHt9OwogICAgJHNjb3BlLnJvd3MuZm9yRWFjaChmdW5jdGlvbiAoaGl0KSB7CiAgICAgIHZhciBmaWVsZHMgPSBPYmplY3Qua2V5cygkc2NvcGUuaW5kZXhQYXR0ZXJuLmZsYXR0ZW5IaXQoaGl0KSk7CiAgICAgIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZE5hbWUpIHsKICAgICAgICBjb3VudHNbZmllbGROYW1lXSA9IChjb3VudHNbZmllbGROYW1lXSB8fCAwKSArIDE7CiAgICAgIH0pOwogICAgfSk7CiAgICAkc2NvcGUuZmV0Y2hTdGF0dXMgPSBmZXRjaFN0YXR1c2VzLkNPTVBMRVRFOwogIH0KCiAgdmFyIGluc3BlY3RvclJlcXVlc3Q7CgogIGZ1bmN0aW9uIGxvZ0luc3BlY3RvclJlcXVlc3QoKSB7CiAgICBpbnNwZWN0b3JBZGFwdGVycy5yZXF1ZXN0cy5yZXNldCgpOwoKICAgIHZhciB0aXRsZSA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uZGlzY292ZXIuaW5zcGVjdG9yUmVxdWVzdERhdGFUaXRsZScsIHsKICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEYXRhJwogICAgfSk7CgogICAgdmFyIGRlc2NyaXB0aW9uID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5pbnNwZWN0b3JSZXF1ZXN0RGVzY3JpcHRpb24nLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhpcyByZXF1ZXN0IHF1ZXJpZXMgRWxhc3RpY3NlYXJjaCB0byBmZXRjaCB0aGUgZGF0YSBmb3IgdGhlIHNlYXJjaC4nCiAgICB9KTsKCiAgICBpbnNwZWN0b3JSZXF1ZXN0ID0gaW5zcGVjdG9yQWRhcHRlcnMucmVxdWVzdHMuc3RhcnQodGl0bGUsIHsKICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uCiAgICB9KTsKICAgIGluc3BlY3RvclJlcXVlc3Quc3RhdHMoKDAsIF9jb3VyaWVyX2luc3BlY3Rvcl91dGlscy5nZXRSZXF1ZXN0SW5zcGVjdG9yU3RhdHMpKCRzY29wZS5zZWFyY2hTb3VyY2UpKTsKICAgICRzY29wZS5zZWFyY2hTb3VyY2UuZ2V0U2VhcmNoUmVxdWVzdEJvZHkoKS50aGVuKGZ1bmN0aW9uIChib2R5KSB7CiAgICAgIGluc3BlY3RvclJlcXVlc3QuanNvbihib2R5KTsKICAgIH0pOwogIH0KCiAgZnVuY3Rpb24gbG9nSW5zcGVjdG9yUmVzcG9uc2UocmVzcCkgewogICAgaW5zcGVjdG9yUmVxdWVzdC5zdGF0cygoMCwgX2NvdXJpZXJfaW5zcGVjdG9yX3V0aWxzLmdldFJlc3BvbnNlSW5zcGVjdG9yU3RhdHMpKCRzY29wZS5zZWFyY2hTb3VyY2UsIHJlc3ApKS5vayh7CiAgICAgIGpzb246IHJlc3AKICAgIH0pOwogIH0KCiAgJHNjb3BlLnVwZGF0ZVRpbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAkc2NvcGUudGltZVJhbmdlID0gewogICAgICBmcm9tOiBfZGF0ZW1hdGguZGVmYXVsdC5wYXJzZShfdGltZWZpbHRlci50aW1lZmlsdGVyLmdldFRpbWUoKS5mcm9tKSwKICAgICAgdG86IF9kYXRlbWF0aC5kZWZhdWx0LnBhcnNlKF90aW1lZmlsdGVyLnRpbWVmaWx0ZXIuZ2V0VGltZSgpLnRvLCB7CiAgICAgICAgcm91bmRVcDogdHJ1ZQogICAgICB9KQogICAgfTsKICAgICRzY29wZS50aW1lID0gX3RpbWVmaWx0ZXIudGltZWZpbHRlci5nZXRUaW1lKCk7CiAgfTsKCiAgJHNjb3BlLnRvTW9tZW50ID0gZnVuY3Rpb24gKGRhdGV0aW1lKSB7CiAgICByZXR1cm4gKDAsIF9tb21lbnQuZGVmYXVsdCkoZGF0ZXRpbWUpLmZvcm1hdChjb25maWcuZ2V0KCdkYXRlRm9ybWF0JykpOwogIH07CgogICRzY29wZS51cGRhdGVSZWZyZXNoSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7CiAgICB2YXIgbmV3SW50ZXJ2YWwgPSBfdGltZWZpbHRlci50aW1lZmlsdGVyLmdldFJlZnJlc2hJbnRlcnZhbCgpOwoKICAgIHZhciBzaG91bGRGZXRjaCA9IF9sb2Rhc2guZGVmYXVsdC5nZXQoJHNjb3BlLCAncmVmcmVzaEludGVydmFsLnBhdXNlJykgPT09IHRydWUgJiYgbmV3SW50ZXJ2YWwucGF1c2UgPT09IGZhbHNlOwogICAgJHNjb3BlLnJlZnJlc2hJbnRlcnZhbCA9IG5ld0ludGVydmFsOwoKICAgIGlmIChzaG91bGRGZXRjaCkgewogICAgICAkc2NvcGUuZmV0Y2goKTsKICAgIH0KICB9OwoKICAkc2NvcGUub25SZWZyZXNoQ2hhbmdlID0gZnVuY3Rpb24gKF9yZWY5KSB7CiAgICB2YXIgaXNQYXVzZWQgPSBfcmVmOS5pc1BhdXNlZCwKICAgICAgICByZWZyZXNoSW50ZXJ2YWwgPSBfcmVmOS5yZWZyZXNoSW50ZXJ2YWw7CgogICAgX3RpbWVmaWx0ZXIudGltZWZpbHRlci5zZXRSZWZyZXNoSW50ZXJ2YWwoewogICAgICBwYXVzZTogaXNQYXVzZWQsCiAgICAgIHZhbHVlOiByZWZyZXNoSW50ZXJ2YWwgPyByZWZyZXNoSW50ZXJ2YWwgOiAkc2NvcGUucmVmcmVzaEludGVydmFsLnZhbHVlCiAgICB9KTsKICB9OwoKICAkc2NvcGUucmVzZXRRdWVyeSA9IGZ1bmN0aW9uICgpIHsKICAgIGtiblVybC5jaGFuZ2UoJy9kaXNjb3Zlci97e2lkfX0nLCB7CiAgICAgIGlkOiAkcm91dGUuY3VycmVudC5wYXJhbXMuaWQKICAgIH0pOwogIH07CgogICRzY29wZS5uZXdRdWVyeSA9IGZ1bmN0aW9uICgpIHsKICAgIGtiblVybC5jaGFuZ2UoJy9kaXNjb3ZlcicpOwogIH07CgogICRzY29wZS51cGRhdGVEYXRhU291cmNlID0gUHJvbWlzZS5tZXRob2QoZnVuY3Rpb24gdXBkYXRlRGF0YVNvdXJjZSgpIHsKICAgICRzY29wZS5zZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ3NpemUnLCAkc2NvcGUub3B0cy5zYW1wbGVTaXplKS5zZXRGaWVsZCgnc29ydCcsICgwLCBfZ2V0X3NvcnQuZ2V0U29ydCkoJHN0YXRlLnNvcnQsICRzY29wZS5pbmRleFBhdHRlcm4pKS5zZXRGaWVsZCgncXVlcnknLCAhJHN0YXRlLnF1ZXJ5ID8gbnVsbCA6ICRzdGF0ZS5xdWVyeSkuc2V0RmllbGQoJ2ZpbHRlcicsIHF1ZXJ5RmlsdGVyLmdldEZpbHRlcnMoKSk7CiAgfSk7CgogICRzY29wZS5zZXRTb3J0T3JkZXIgPSBmdW5jdGlvbiBzZXRTb3J0T3JkZXIoc29ydFBhaXIpIHsKICAgICRzY29wZS5zdGF0ZS5zb3J0ID0gc29ydFBhaXI7CiAgfTsgLy8gVE9ETzogT24gYXJyYXkgZmllbGRzLCBuZWdhdGluZyBkb2VzIG5vdCBuZWdhdGUgdGhlIGNvbWJpbmF0aW9uLCByYXRoZXIgYWxsIHRlcm1zCgoKICAkc2NvcGUuZmlsdGVyUXVlcnkgPSBmdW5jdGlvbiAoZmllbGQsIHZhbHVlcywgb3BlcmF0aW9uKSB7CiAgICAkc2NvcGUuaW5kZXhQYXR0ZXJuLnBvcHVsYXJpemVGaWVsZChmaWVsZCwgMSk7CiAgICBmaWx0ZXJBY3Rpb25zLmFkZEZpbHRlcihmaWVsZCwgdmFsdWVzLCBvcGVyYXRpb24sICRzY29wZS5pbmRleFBhdHRlcm4uaWQsICRzY29wZS5zdGF0ZSwgZmlsdGVyR2VuKTsKICB9OwoKICAkc2NvcGUuYWRkQ29sdW1uID0gZnVuY3Rpb24gYWRkQ29sdW1uKGNvbHVtbk5hbWUpIHsKICAgICRzY29wZS5pbmRleFBhdHRlcm4ucG9wdWxhcml6ZUZpZWxkKGNvbHVtbk5hbWUsIDEpOwogICAgY29sdW1uQWN0aW9ucy5hZGRDb2x1bW4oJHNjb3BlLnN0YXRlLmNvbHVtbnMsIGNvbHVtbk5hbWUpOwogIH07CgogICRzY29wZS5yZW1vdmVDb2x1bW4gPSBmdW5jdGlvbiByZW1vdmVDb2x1bW4oY29sdW1uTmFtZSkgewogICAgJHNjb3BlLmluZGV4UGF0dGVybi5wb3B1bGFyaXplRmllbGQoY29sdW1uTmFtZSwgMSk7CiAgICBjb2x1bW5BY3Rpb25zLnJlbW92ZUNvbHVtbigkc2NvcGUuc3RhdGUuY29sdW1ucywgY29sdW1uTmFtZSk7CiAgfTsKCiAgJHNjb3BlLm1vdmVDb2x1bW4gPSBmdW5jdGlvbiBtb3ZlQ29sdW1uKGNvbHVtbk5hbWUsIG5ld0luZGV4KSB7CiAgICBjb2x1bW5BY3Rpb25zLm1vdmVDb2x1bW4oJHNjb3BlLnN0YXRlLmNvbHVtbnMsIGNvbHVtbk5hbWUsIG5ld0luZGV4KTsKICB9OwoKICAkc2NvcGUuc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbiAoKSB7CiAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApOwogIH07CgogICRzY29wZS5zY3JvbGxUb0JvdHRvbSA9IGZ1bmN0aW9uICgpIHsKICAgIC8vIGRlbGF5IHNjcm9sbGluZyB0byBhZnRlciB0aGUgcm93cyBoYXZlIGJlZW4gcmVuZGVyZWQKICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgJGVsZW1lbnQuZmluZCgnI2Rpc2NvdmVyQm90dG9tTWFya2VyJykuZm9jdXMoKTsKICAgIH0sIDApOwogIH07CgogICRzY29wZS5zaG93QWxsUm93cyA9IGZ1bmN0aW9uICgpIHsKICAgICRzY29wZS5taW5pbXVtVmlzaWJsZVJvd3MgPSAkc2NvcGUuaGl0czsKICB9OwoKICAkc2NvcGUub25RdWVyeVNhdmVkID0gZnVuY3Rpb24gKHNhdmVkUXVlcnkpIHsKICAgICRzY29wZS5zYXZlZFF1ZXJ5ID0gc2F2ZWRRdWVyeTsKICB9OwoKICAkc2NvcGUub25TYXZlZFF1ZXJ5VXBkYXRlZCA9IGZ1bmN0aW9uIChzYXZlZFF1ZXJ5KSB7CiAgICAkc2NvcGUuc2F2ZWRRdWVyeSA9IF9vYmplY3RTcHJlYWQoe30sIHNhdmVkUXVlcnkpOwogIH07CgogICRzY29wZS5vbkNsZWFyU2F2ZWRRdWVyeSA9IGZ1bmN0aW9uICgpIHsKICAgIGRlbGV0ZSAkc2NvcGUuc2F2ZWRRdWVyeTsKICAgIGRlbGV0ZSAkc3RhdGUuc2F2ZWRRdWVyeTsKICAgICRzdGF0ZS5xdWVyeSA9IHsKICAgICAgcXVlcnk6ICcnLAogICAgICBsYW5ndWFnZTogbG9jYWxTdG9yYWdlLmdldCgna2liYW5hLnVzZXJRdWVyeUxhbmd1YWdlJykgfHwgY29uZmlnLmdldCgnc2VhcmNoOnF1ZXJ5TGFuZ3VhZ2UnKQogICAgfTsKICAgIHF1ZXJ5RmlsdGVyLnJlbW92ZUFsbCgpOwogICAgJHN0YXRlLnNhdmUoKTsKICAgICRzY29wZS5mZXRjaCgpOwogIH07CgogIHZhciB1cGRhdGVTdGF0ZUZyb21TYXZlZFF1ZXJ5ID0gZnVuY3Rpb24gdXBkYXRlU3RhdGVGcm9tU2F2ZWRRdWVyeShzYXZlZFF1ZXJ5KSB7CiAgICAkc3RhdGUucXVlcnkgPSBzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMucXVlcnk7CiAgICBxdWVyeUZpbHRlci5zZXRGaWx0ZXJzKHNhdmVkUXVlcnkuYXR0cmlidXRlcy5maWx0ZXJzIHx8IFtdKTsKCiAgICBpZiAoc2F2ZWRRdWVyeS5hdHRyaWJ1dGVzLnRpbWVmaWx0ZXIpIHsKICAgICAgX3RpbWVmaWx0ZXIudGltZWZpbHRlci5zZXRUaW1lKHsKICAgICAgICBmcm9tOiBzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMudGltZWZpbHRlci5mcm9tLAogICAgICAgIHRvOiBzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMudGltZWZpbHRlci50bwogICAgICB9KTsKCiAgICAgIGlmIChzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMudGltZWZpbHRlci5yZWZyZXNoSW50ZXJ2YWwpIHsKICAgICAgICBfdGltZWZpbHRlci50aW1lZmlsdGVyLnNldFJlZnJlc2hJbnRlcnZhbChzYXZlZFF1ZXJ5LmF0dHJpYnV0ZXMudGltZWZpbHRlci5yZWZyZXNoSW50ZXJ2YWwpOwogICAgICB9CiAgICB9CgogICAgJHNjb3BlLmZldGNoKCk7CiAgfTsKCiAgJHNjb3BlLiR3YXRjaCgnc2F2ZWRRdWVyeScsIGZ1bmN0aW9uIChuZXdTYXZlZFF1ZXJ5LCBvbGRTYXZlZFF1ZXJ5KSB7CiAgICBpZiAoIW5ld1NhdmVkUXVlcnkpIHJldHVybjsKICAgICRzdGF0ZS5zYXZlZFF1ZXJ5ID0gbmV3U2F2ZWRRdWVyeS5pZDsKICAgICRzdGF0ZS5zYXZlKCk7CgogICAgaWYgKG5ld1NhdmVkUXVlcnkuaWQgPT09IChvbGRTYXZlZFF1ZXJ5ICYmIG9sZFNhdmVkUXVlcnkuaWQpKSB7CiAgICAgIHVwZGF0ZVN0YXRlRnJvbVNhdmVkUXVlcnkobmV3U2F2ZWRRdWVyeSk7CiAgICB9CiAgfSk7CiAgJHNjb3BlLiR3YXRjaCgnc3RhdGUuc2F2ZWRRdWVyeScsIGZ1bmN0aW9uIChuZXdTYXZlZFF1ZXJ5SWQpIHsKICAgIGlmICghbmV3U2F2ZWRRdWVyeUlkKSB7CiAgICAgICRzY29wZS5zYXZlZFF1ZXJ5ID0gdW5kZWZpbmVkOwogICAgICByZXR1cm47CiAgICB9CgogICAgc2F2ZWRRdWVyeVNlcnZpY2UuZ2V0U2F2ZWRRdWVyeShuZXdTYXZlZFF1ZXJ5SWQpLnRoZW4oZnVuY3Rpb24gKHNhdmVkUXVlcnkpIHsKICAgICAgJHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5zYXZlZFF1ZXJ5ID0gc2F2ZWRRdWVyeTsKICAgICAgICB1cGRhdGVTdGF0ZUZyb21TYXZlZFF1ZXJ5KHNhdmVkUXVlcnkpOwogICAgICB9KTsKICAgIH0pOwogIH0pOwoKICBmdW5jdGlvbiBzZXR1cFZpc3VhbGl6YXRpb24oKSB7CiAgICByZXR1cm4gX3NldHVwVmlzdWFsaXphdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgZnVuY3Rpb24gX3NldHVwVmlzdWFsaXphdGlvbigpIHsKICAgIF9zZXR1cFZpc3VhbGl6YXRpb24gPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICB2YXIgdmlzU3RhdGVBZ2dzLCB2aXNTdGF0ZSwgdmlzU2F2ZWRPYmplY3Q7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ4LnByZXYgPSBfY29udGV4dDgubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKCRzY29wZS5vcHRzLnRpbWVmaWVsZCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgdmlzU3RhdGVBZ2dzID0gW3sKICAgICAgICAgICAgICAgIHR5cGU6ICdjb3VudCcsCiAgICAgICAgICAgICAgICBzY2hlbWE6ICdtZXRyaWMnCiAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdHlwZTogJ2RhdGVfaGlzdG9ncmFtJywKICAgICAgICAgICAgICAgIHNjaGVtYTogJ3NlZ21lbnQnLAogICAgICAgICAgICAgICAgcGFyYW1zOiB7CiAgICAgICAgICAgICAgICAgIGZpZWxkOiAkc2NvcGUub3B0cy50aW1lZmllbGQsCiAgICAgICAgICAgICAgICAgIGludGVydmFsOiAkc3RhdGUuaW50ZXJ2YWwsCiAgICAgICAgICAgICAgICAgIHRpbWVSYW5nZTogX3RpbWVmaWx0ZXIudGltZWZpbHRlci5nZXRUaW1lKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9XTsKCiAgICAgICAgICAgICAgaWYgKCEkc2NvcGUudmlzKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDg7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHZpc1N0YXRlID0gJHNjb3BlLnZpcy5nZXRFbmFibGVkU3RhdGUoKTsKICAgICAgICAgICAgICB2aXNTdGF0ZS5hZ2dzID0gdmlzU3RhdGVBZ2dzOwogICAgICAgICAgICAgICRzY29wZS52aXMuc2V0U3RhdGUodmlzU3RhdGUpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICB2aXNTYXZlZE9iamVjdCA9IHsKICAgICAgICAgICAgICAgIGluZGV4UGF0dGVybjogJHNjb3BlLmluZGV4UGF0dGVybi5pZCwKICAgICAgICAgICAgICAgIHZpc1N0YXRlOiB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdoaXN0b2dyYW0nLAogICAgICAgICAgICAgICAgICB0aXRsZTogc2F2ZWRTZWFyY2gudGl0bGUsCiAgICAgICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgICAgIGFkZExlZ2VuZDogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgYWRkVGltZU1hcmtlcjogdHJ1ZQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBhZ2dzOiB2aXNTdGF0ZUFnZ3MKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICRzY29wZS52aXMgPSBuZXcgVmlzKCRzY29wZS5zZWFyY2hTb3VyY2UuZ2V0RmllbGQoJ2luZGV4JyksIHZpc1NhdmVkT2JqZWN0LnZpc1N0YXRlKTsKICAgICAgICAgICAgICB2aXNTYXZlZE9iamVjdC52aXMgPSAkc2NvcGUudmlzOwogICAgICAgICAgICAgICRzY29wZS5zZWFyY2hTb3VyY2Uub25SZXF1ZXN0U3RhcnQoZnVuY3Rpb24gKHNlYXJjaFNvdXJjZSwgc2VhcmNoUmVxdWVzdCkgewogICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS52aXMuZ2V0QWdnQ29uZmlnKCkub25TZWFyY2hSZXF1ZXN0U3RhcnQoc2VhcmNoU291cmNlLCBzZWFyY2hSZXF1ZXN0KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoU291cmNlLnNldEZpZWxkKCdhZ2dzJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS52aXMuZ2V0QWdnQ29uZmlnKCkudG9Ec2woKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAkdGltZW91dCgKICAgICAgICAgICAgICAvKiNfX1BVUkVfXyovCiAgICAgICAgICAgICAgX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgICAgICAgICAgdmFyIHZpc0VsOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgdmlzRWwgPSAkZWxlbWVudC5maW5kKCcjZGlzY292ZXJIaXN0b2dyYW0nKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlzdWFsaXplTG9hZGVyLmVtYmVkVmlzdWFsaXphdGlvbldpdGhTYXZlZE9iamVjdCh2aXNFbCwgdmlzU2F2ZWRPYmplY3QsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvRmV0Y2g6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgdmlzdWFsaXplSGFuZGxlciA9IF9jb250ZXh0Ny5zZW50OwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgX2NhbGxlZTcpOwogICAgICAgICAgICAgIH0pKSk7CgogICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTgpOwogICAgfSkpOwogICAgcmV0dXJuIF9zZXR1cFZpc3VhbGl6YXRpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIGZ1bmN0aW9uIHJlc29sdmVJbmRleFBhdHRlcm5Mb2FkaW5nKCkgewogICAgdmFyIF8kcm91dGUkY3VycmVudCRsb2NhbCA9ICRyb3V0ZS5jdXJyZW50LmxvY2Fscy5pcCwKICAgICAgICBsb2FkZWRJbmRleFBhdHRlcm4gPSBfJHJvdXRlJGN1cnJlbnQkbG9jYWwubG9hZGVkLAogICAgICAgIHN0YXRlVmFsID0gXyRyb3V0ZSRjdXJyZW50JGxvY2FsLnN0YXRlVmFsLAogICAgICAgIHN0YXRlVmFsRm91bmQgPSBfJHJvdXRlJGN1cnJlbnQkbG9jYWwuc3RhdGVWYWxGb3VuZDsKICAgIHZhciBvd25JbmRleFBhdHRlcm4gPSAkc2NvcGUuc2VhcmNoU291cmNlLmdldE93bkZpZWxkKCdpbmRleCcpOwoKICAgIGlmIChvd25JbmRleFBhdHRlcm4gJiYgIXN0YXRlVmFsKSB7CiAgICAgIHJldHVybiBvd25JbmRleFBhdHRlcm47CiAgICB9CgogICAgaWYgKHN0YXRlVmFsICYmICFzdGF0ZVZhbEZvdW5kKSB7CiAgICAgIHZhciB3YXJuaW5nVGl0bGUgPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLnZhbHVlSXNOb3RDb25maWd1cmVkSW5kZXhQYXR0ZXJuSURXYXJuaW5nVGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICd7c3RhdGVWYWx9IGlzIG5vdCBhIGNvbmZpZ3VyZWQgaW5kZXggcGF0dGVybiBJRCcsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBzdGF0ZVZhbDogIlwiIi5jb25jYXQoc3RhdGVWYWwsICJcIiIpCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIGlmIChvd25JbmRleFBhdHRlcm4pIHsKICAgICAgICBfbm90aWZ5LnRvYXN0Tm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKHsKICAgICAgICAgIHRpdGxlOiB3YXJuaW5nVGl0bGUsCiAgICAgICAgICB0ZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLmRpc2NvdmVyLnNob3dpbmdTYXZlZEluZGV4UGF0dGVybldhcm5pbmdEZXNjcmlwdGlvbicsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdTaG93aW5nIHRoZSBzYXZlZCBpbmRleCBwYXR0ZXJuOiAie293bkluZGV4UGF0dGVyblRpdGxlfSIgKHtvd25JbmRleFBhdHRlcm5JZH0pJywKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgb3duSW5kZXhQYXR0ZXJuVGl0bGU6IG93bkluZGV4UGF0dGVybi50aXRsZSwKICAgICAgICAgICAgICBvd25JbmRleFBhdHRlcm5JZDogb3duSW5kZXhQYXR0ZXJuLmlkCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBvd25JbmRleFBhdHRlcm47CiAgICAgIH0KCiAgICAgIF9ub3RpZnkudG9hc3ROb3RpZmljYXRpb25zLmFkZFdhcm5pbmcoewogICAgICAgIHRpdGxlOiB3YXJuaW5nVGl0bGUsCiAgICAgICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5kaXNjb3Zlci5zaG93aW5nRGVmYXVsdEluZGV4UGF0dGVybldhcm5pbmdEZXNjcmlwdGlvbicsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnU2hvd2luZyB0aGUgZGVmYXVsdCBpbmRleCBwYXR0ZXJuOiAie2xvYWRlZEluZGV4UGF0dGVyblRpdGxlfSIgKHtsb2FkZWRJbmRleFBhdHRlcm5JZH0pJywKICAgICAgICAgIHZhbHVlczogewogICAgICAgICAgICBsb2FkZWRJbmRleFBhdHRlcm5UaXRsZTogbG9hZGVkSW5kZXhQYXR0ZXJuLnRpdGxlLAogICAgICAgICAgICBsb2FkZWRJbmRleFBhdHRlcm5JZDogbG9hZGVkSW5kZXhQYXR0ZXJuLmlkCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgfSk7CiAgICB9CgogICAgcmV0dXJuIGxvYWRlZEluZGV4UGF0dGVybjsKICB9IC8vIEJsb2NrIHRoZSBVSSBmcm9tIGxvYWRpbmcgaWYgdGhlIHVzZXIgaGFzIGxvYWRlZCBhIHJvbGx1cCBpbmRleCBwYXR0ZXJuIGJ1dCBpdCBpc24ndAogIC8vIHN1cHBvcnRlZC4KCgogICRzY29wZS5pc1Vuc3VwcG9ydGVkSW5kZXhQYXR0ZXJuID0gISgwLCBfY291cmllci5pc0RlZmF1bHRUeXBlSW5kZXhQYXR0ZXJuKSgkcm91dGUuY3VycmVudC5sb2NhbHMuaXAubG9hZGVkKSAmJiAhKDAsIF9jb3VyaWVyLmhhc1NlYXJjaFN0YXRlZ3lGb3JJbmRleFBhdHRlcm4pKCRyb3V0ZS5jdXJyZW50LmxvY2Fscy5pcC5sb2FkZWQpOwoKICBpZiAoJHNjb3BlLmlzVW5zdXBwb3J0ZWRJbmRleFBhdHRlcm4pIHsKICAgICRzY29wZS51bnN1cHBvcnRlZEluZGV4UGF0dGVyblR5cGUgPSAkcm91dGUuY3VycmVudC5sb2NhbHMuaXAubG9hZGVkLnR5cGU7CiAgICByZXR1cm47CiAgfQoKICBpbml0KCk7Cn0="},null]}