{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/console/public/src/autocomplete/engine.js","dependencies":[{"path":"src/legacy/core_plugins/console/public/src/autocomplete/engine.js","mtime":1572296409236},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLndyYXBDb21wb25lbnRXaXRoRGVmYXVsdHMgPSB3cmFwQ29tcG9uZW50V2l0aERlZmF1bHRzOwpleHBvcnRzLldhbGtpbmdTdGF0ZSA9IFdhbGtpbmdTdGF0ZTsKZXhwb3J0cy53YWxrVG9rZW5QYXRoID0gd2Fsa1Rva2VuUGF0aDsKZXhwb3J0cy5wb3B1bGF0ZUNvbnRleHQgPSBwb3B1bGF0ZUNvbnRleHQ7CgovKgogKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IKICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQKICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlcgogKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heQogKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KICogIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQogKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiAqIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KdmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTsKCmZ1bmN0aW9uIHdyYXBDb21wb25lbnRXaXRoRGVmYXVsdHMoY29tcG9uZW50LCBkZWZhdWx0cykgewogIHZhciBvcmlnaW5hbEdldFRlcm1zID0gY29tcG9uZW50LmdldFRlcm1zOwoKICBjb21wb25lbnQuZ2V0VGVybXMgPSBmdW5jdGlvbiAoY29udGV4dCwgZWRpdG9yKSB7CiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWxHZXRUZXJtcy5jYWxsKGNvbXBvbmVudCwgY29udGV4dCwgZWRpdG9yKTsKCiAgICBpZiAoIXJlc3VsdCkgewogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIHJlc3VsdCA9IF8ubWFwKHJlc3VsdCwgZnVuY3Rpb24gKHRlcm0pIHsKICAgICAgaWYgKCFfLmlzT2JqZWN0KHRlcm0pKSB7CiAgICAgICAgdGVybSA9IHsKICAgICAgICAgIG5hbWU6IHRlcm0KICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gXy5kZWZhdWx0cyh0ZXJtLCBkZWZhdWx0cyk7CiAgICB9LCB0aGlzKTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgcmV0dXJuIGNvbXBvbmVudDsKfQoKdmFyIHRyYWNlciA9IGZ1bmN0aW9uIHRyYWNlcigpIHsKICBpZiAod2luZG93LmVuZ2luZV90cmFjZSkgewogICAgY29uc29sZS5sb2cuY2FsbChjb25zb2xlLCBhcmd1bWVudHMpOwogIH0KfTsKCmZ1bmN0aW9uIHBhc3NUaHJvdWdoQ29udGV4dChjb250ZXh0LCBleHRlbnNpb25MaXN0KSB7CiAgZnVuY3Rpb24gUFRDKCkge30KCiAgUFRDLnByb3RvdHlwZSA9IGNvbnRleHQ7CiAgdmFyIHJlc3VsdCA9IG5ldyBQVEMoKTsKCiAgaWYgKGV4dGVuc2lvbkxpc3QpIHsKICAgIGV4dGVuc2lvbkxpc3QudW5zaGlmdChyZXN1bHQpOwoKICAgIF8uYXNzaWduLmFwcGx5KF8sIGV4dGVuc2lvbkxpc3QpOwoKICAgIGV4dGVuc2lvbkxpc3Quc2hpZnQoKTsKICB9CgogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIFdhbGtpbmdTdGF0ZShwYXJlbnROYW1lLCBjb21wb25lbnRzLCBjb250ZXh0RXh0ZW5zaW9uTGlzdCwgZGVwdGgsIHByaW9yaXR5KSB7CiAgdGhpcy5wYXJlbnROYW1lID0gcGFyZW50TmFtZTsKICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzOwogIHRoaXMuY29udGV4dEV4dGVuc2lvbkxpc3QgPSBjb250ZXh0RXh0ZW5zaW9uTGlzdDsKICB0aGlzLmRlcHRoID0gZGVwdGggfHwgMDsKICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7Cn0KCmZ1bmN0aW9uIHdhbGtUb2tlblBhdGgodG9rZW5QYXRoLCB3YWxraW5nU3RhdGVzLCBjb250ZXh0LCBlZGl0b3IpIHsKICBpZiAoIXRva2VuUGF0aCB8fCB0b2tlblBhdGgubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gd2Fsa2luZ1N0YXRlczsKICB9CgogIHZhciB0b2tlbiA9IHRva2VuUGF0aFswXTsKICB2YXIgbmV4dFdhbGtpbmdTdGF0ZXMgPSBbXTsKICB0cmFjZXIoJ3N0YXJ0aW5nIHRva2VuIGV2YWx1YXRpb24gWycgKyB0b2tlbiArICddJyk7CgogIF8uZWFjaCh3YWxraW5nU3RhdGVzLCBmdW5jdGlvbiAod3MpIHsKICAgIHZhciBjb250ZXh0Rm9yU3RhdGUgPSBwYXNzVGhyb3VnaENvbnRleHQoY29udGV4dCwgd3MuY29udGV4dEV4dGVuc2lvbkxpc3QpOwoKICAgIF8uZWFjaCh3cy5jb21wb25lbnRzLCBmdW5jdGlvbiAoY29tcG9uZW50KSB7CiAgICAgIHRyYWNlcignZXZhbHVhdGluZyBbJyArIHRva2VuICsgJ10gd2l0aCBbJyArIGNvbXBvbmVudC5uYW1lICsgJ10nLCBjb21wb25lbnQpOwogICAgICB2YXIgcmVzdWx0ID0gY29tcG9uZW50Lm1hdGNoKHRva2VuLCBjb250ZXh0Rm9yU3RhdGUsIGVkaXRvcik7CgogICAgICBpZiAocmVzdWx0ICYmICFfLmlzRW1wdHkocmVzdWx0KSkgewogICAgICAgIHRyYWNlcignbWF0Y2hlZCBbJyArIHRva2VuICsgJ10gd2l0aDonLCByZXN1bHQpOwogICAgICAgIHZhciBuZXh0OwogICAgICAgIHZhciBleHRlbnNpb25MaXN0OwoKICAgICAgICBpZiAocmVzdWx0Lm5leHQgJiYgIUFycmF5LmlzQXJyYXkocmVzdWx0Lm5leHQpKSB7CiAgICAgICAgICBuZXh0ID0gW3Jlc3VsdC5uZXh0XTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgbmV4dCA9IHJlc3VsdC5uZXh0OwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlc3VsdC5jb250ZXh0X3ZhbHVlcykgewogICAgICAgICAgZXh0ZW5zaW9uTGlzdCA9IFtdOwogICAgICAgICAgW10ucHVzaC5hcHBseShleHRlbnNpb25MaXN0LCB3cy5jb250ZXh0RXh0ZW5zaW9uTGlzdCk7CiAgICAgICAgICBleHRlbnNpb25MaXN0LnB1c2gocmVzdWx0LmNvbnRleHRfdmFsdWVzKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZXh0ZW5zaW9uTGlzdCA9IHdzLmNvbnRleHRFeHRlbnNpb25MaXN0OwogICAgICAgIH0KCiAgICAgICAgdmFyIHByaW9yaXR5ID0gd3MucHJpb3JpdHk7CgogICAgICAgIGlmIChfLmlzTnVtYmVyKHJlc3VsdC5wcmlvcml0eSkpIHsKICAgICAgICAgIGlmIChfLmlzTnVtYmVyKHByaW9yaXR5KSkgewogICAgICAgICAgICBwcmlvcml0eSA9IE1hdGgubWluKHByaW9yaXR5LCByZXN1bHQucHJpb3JpdHkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcHJpb3JpdHkgPSByZXN1bHQucHJpb3JpdHk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBuZXh0V2Fsa2luZ1N0YXRlcy5wdXNoKG5ldyBXYWxraW5nU3RhdGUoY29tcG9uZW50Lm5hbWUsIG5leHQsIGV4dGVuc2lvbkxpc3QsIHdzLmRlcHRoICsgMSwgcHJpb3JpdHkpKTsKICAgICAgfQogICAgfSk7CiAgfSk7CgogIGlmIChuZXh0V2Fsa2luZ1N0YXRlcy5sZW5ndGggPT09IDApIHsKICAgIC8vIG5vIHdoZXJlIHRvIGdvLCBzdGlsbCByZXR1cm4gY29udGV4dCB2YXJpYWJsZXMgcmV0dXJuZWQgc28gZmFyLi4KICAgIHJldHVybiBfLm1hcCh3YWxraW5nU3RhdGVzLCBmdW5jdGlvbiAod3MpIHsKICAgICAgcmV0dXJuIG5ldyBXYWxraW5nU3RhdGUod3MubmFtZSwgW10sIHdzLmNvbnRleHRFeHRlbnNpb25MaXN0KTsKICAgIH0pOwogIH0KCiAgcmV0dXJuIHdhbGtUb2tlblBhdGgodG9rZW5QYXRoLnNsaWNlKDEpLCBuZXh0V2Fsa2luZ1N0YXRlcywgY29udGV4dCwgZWRpdG9yKTsKfQoKZnVuY3Rpb24gcG9wdWxhdGVDb250ZXh0KHRva2VuUGF0aCwgY29udGV4dCwgZWRpdG9yLCBpbmNsdWRlQXV0b0NvbXBsZXRlLCBjb21wb25lbnRzKSB7CiAgdmFyIHdhbGtTdGF0ZXMgPSB3YWxrVG9rZW5QYXRoKHRva2VuUGF0aCwgW25ldyBXYWxraW5nU3RhdGUoJ1JPT1QnLCBjb21wb25lbnRzLCBbXSldLCBjb250ZXh0LCBlZGl0b3IpOwoKICBpZiAoaW5jbHVkZUF1dG9Db21wbGV0ZSkgewogICAgdmFyIGF1dG9Db21wbGV0ZVNldCA9IFtdOwoKICAgIF8uZWFjaCh3YWxrU3RhdGVzLCBmdW5jdGlvbiAod3MpIHsKICAgICAgdmFyIGNvbnRleHRGb3JTdGF0ZSA9IHBhc3NUaHJvdWdoQ29udGV4dChjb250ZXh0LCB3cy5jb250ZXh0RXh0ZW5zaW9uTGlzdCk7CgogICAgICBfLmVhY2god3MuY29tcG9uZW50cywgZnVuY3Rpb24gKGNvbXBvbmVudCkgewogICAgICAgIF8uZWFjaChjb21wb25lbnQuZ2V0VGVybXMoY29udGV4dEZvclN0YXRlLCBlZGl0b3IpLCBmdW5jdGlvbiAodGVybSkgewogICAgICAgICAgaWYgKCFfLmlzT2JqZWN0KHRlcm0pKSB7CiAgICAgICAgICAgIHRlcm0gPSB7CiAgICAgICAgICAgICAgbmFtZTogdGVybQogICAgICAgICAgICB9OwogICAgICAgICAgfQoKICAgICAgICAgIGF1dG9Db21wbGV0ZVNldC5wdXNoKHRlcm0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0pOwoKICAgIGF1dG9Db21wbGV0ZVNldCA9IF8udW5pcShhdXRvQ29tcGxldGVTZXQsIGZhbHNlKTsKICAgIGNvbnRleHQuYXV0b0NvbXBsZXRlU2V0ID0gYXV0b0NvbXBsZXRlU2V0OwogIH0gLy8gYXBwbHkgd2hhdCB2YWx1ZXMgd2VyZSBzZXQgc28gZmFyIHRvIGNvbnRleHQsIHNlbGVjdGluZyB0aGUgZGVlcGVzdCBvbiB3aGljaCBzZXRzIHRoZSBjb250ZXh0CgoKICBpZiAod2Fsa1N0YXRlcy5sZW5ndGggIT09IDApIHsKICAgIHZhciB3c1RvVXNlOwogICAgd2Fsa1N0YXRlcyA9IF8uc29ydEJ5KHdhbGtTdGF0ZXMsIGZ1bmN0aW9uICh3cykgewogICAgICByZXR1cm4gXy5pc051bWJlcih3cy5wcmlvcml0eSkgPyB3cy5wcmlvcml0eSA6IE51bWJlci5NQVhfVkFMVUU7CiAgICB9KTsKICAgIHdzVG9Vc2UgPSBfLmZpbmQod2Fsa1N0YXRlcywgZnVuY3Rpb24gKHdzKSB7CiAgICAgIHJldHVybiBfLmlzRW1wdHkod3MuY29tcG9uZW50cyk7CiAgICB9KTsKCiAgICBpZiAoIXdzVG9Vc2UgJiYgd2Fsa1N0YXRlcy5sZW5ndGggPiAxICYmICFpbmNsdWRlQXV0b0NvbXBsZXRlKSB7CiAgICAgIGNvbnNvbGUuaW5mbygnbW9yZSB0aGVuIG9uZSBjb250ZXh0IGFjdGl2ZSBmb3IgY3VycmVudCBwYXRoLCBidXQgYXV0b2NvbXBsZXRlIGlzblwndCByZXF1ZXN0ZWQnLCB3YWxrU3RhdGVzKTsKICAgIH0KCiAgICBpZiAoIXdzVG9Vc2UpIHsKICAgICAgd3NUb1VzZSA9IHdhbGtTdGF0ZXNbMF07CiAgICB9CgogICAgXy5lYWNoKHdzVG9Vc2UuY29udGV4dEV4dGVuc2lvbkxpc3QsIGZ1bmN0aW9uIChleHRlbnNpb24pIHsKICAgICAgXy5hc3NpZ24oY29udGV4dCwgZXh0ZW5zaW9uKTsKICAgIH0pOwogIH0KfQ=="},null]}