{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/interpreter/public/lib/ajax_stream/ajax_stream.js","dependencies":[{"path":"src/legacy/core_plugins/interpreter/public/lib/ajax_stream/ajax_stream.js","mtime":1572296409836},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmFqYXhTdHJlYW0gPSBhamF4U3RyZWFtOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgewogIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7CiAgdmFyIF9hcnIgPSBbXTsKICB2YXIgX24gPSB0cnVlOwogIHZhciBfZCA9IGZhbHNlOwogIHZhciBfZSA9IHVuZGVmaW5lZDsKCiAgdHJ5IHsKICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsKICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTsKCiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9kID0gdHJ1ZTsKICAgIF9lID0gZXJyOwogIH0gZmluYWxseSB7CiAgICB0cnkgewogICAgICBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsKICAgIH0gZmluYWxseSB7CiAgICAgIGlmIChfZCkgdGhyb3cgX2U7CiAgICB9CiAgfQoKICByZXR1cm4gX2FycjsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7Cn0gLy8gQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gc3VjY2Vzc2l2ZWx5IHBhc3NlZCBzdHJlYW1pbmcgcmVzcG9uc2UgdGV4dCwKLy8gY2FsbHMgYSBoYW5kbGVyIGNhbGxiYWNrIHdpdGggZWFjaCByZXNwb25zZSBpbiB0aGUgYmF0Y2guCgoKZnVuY3Rpb24gcHJvY2Vzc0JhdGNoUmVzcG9uc2VTdHJlYW0oaGFuZGxlcikgewogIHZhciBpbmRleCA9IDA7CiAgcmV0dXJuIGZ1bmN0aW9uICh0ZXh0KSB7CiAgICAvLyBXaGlsZSB0aGVyZSdzIHRleHQgdG8gcHJvY2Vzcy4uLgogICAgd2hpbGUgKGluZGV4IDwgdGV4dC5sZW5ndGgpIHsKICAgICAgLy8gT3VyIG1lc3NhZ2VzIGFyZSBkZWxpbWl0ZWQgYnkgY29sb246IGxlbjpqc29uCiAgICAgIHZhciBkZWxpbSA9ICc6JzsKICAgICAgdmFyIGRlbGltSW5kZXggPSB0ZXh0LmluZGV4T2YoZGVsaW0sIGluZGV4KTsKICAgICAgdmFyIHBheWxvYWRTdGFydCA9IGRlbGltSW5kZXggKyBkZWxpbS5sZW5ndGg7IC8vIFdlJ3ZlIGdvdCBhbiBpbmNvbXBsZXRlIGJhdGNoIGxlbmd0aAoKICAgICAgaWYgKGRlbGltSW5kZXggPCAwKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgcmF3TGVuID0gdGV4dC5zbGljZShpbmRleCwgZGVsaW1JbmRleCk7CiAgICAgIHZhciBwYXlsb2FkTGVuID0gcGFyc2VJbnQocmF3TGVuLCAxMCk7CiAgICAgIHZhciBwYXlsb2FkRW5kID0gcGF5bG9hZFN0YXJ0ICsgcGF5bG9hZExlbjsgLy8gV2UndmUgZ290IGFuIGludmFsaWQgYmF0Y2ggbWVzc2FnZSAoZS5nLiBvbmUgd2l0aG91dCBhIG51bWVyaWMgbGVuZ3RoOiBwcmVmaXgpCgogICAgICBpZiAoaXNOYU4ocGF5bG9hZExlbikpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgc3RyZWFtIHJlc3BvbnNlIGxlbmd0aDogIi5jb25jYXQocmF3TGVuKSk7CiAgICAgIH0gLy8gV2UndmUgZ290IGFuIGluY29tcGxldGUgYmF0Y2ggbWVzc2FnZQoKCiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA8IHBheWxvYWRFbmQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZSh0ZXh0LnNsaWNlKHBheWxvYWRTdGFydCwgcGF5bG9hZEVuZCkpOwogICAgICBoYW5kbGVyKHBheWxvYWQpOwogICAgICBpbmRleCA9IHBheWxvYWRFbmQ7CiAgICB9CiAgfTsKfQovKioKICogU2VuZHMgYW4gQUpBWCByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIsIGFuZCBwcm9jZXNzZXMgdGhlIHJlc3VsdCBhcyBhCiAqIHN0cmVhbWluZyBIVFRQLzEgcmVzcG9uc2UuCiAqCiAqIEBwYXJhbSBiYXNlUGF0aCAtIFRoZSBLaWJhbmEgYmFzZXBhdGgKICogQHBhcmFtIGRlZmF1bHRIZWFkZXJzIC0gVGhlIGRlZmF1bHQgSFRUUCBoZWFkZXJzIHRvIGJlIHNlbnQgd2l0aCBlYWNoIHJlcXVlc3QKICogQHBhcmFtIHJlcSAtIFRoZSBYTUxIdHRwUmVxdWVzdAogKiBAcGFyYW0gb3B0cyAtIFRoZSByZXF1ZXN0IG9wdGlvbnMKICogQHJldHVybnMgQSBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gdGhlIGVudGlyZSBiYXRjaCByZXNwb25zZSBoYXMgYmVlbiBwcm9jZXNzZWQuCiAqLwoKCmZ1bmN0aW9uIGFqYXhTdHJlYW0oYmFzZVBhdGgsIGRlZmF1bHRIZWFkZXJzLCByZXEsIG9wdHMpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgdmFyIHVybCA9IG9wdHMudXJsLAogICAgICAgIG1ldGhvZCA9IG9wdHMubWV0aG9kLAogICAgICAgIGhlYWRlcnMgPSBvcHRzLmhlYWRlcnM7IC8vIFRoZXJlIGFyZSBzZXZlcmFsIHBhdGhzIGJ5IHdoaWNoIHRoZSBwcm9taXNlIG1heSByZXNvbHZlIG9yIHJlamVjdC4gV2Ugd3JhcCB0aGlzCiAgICAvLyBpbiAib25jZSIgYXMgYSBzYWZlZ3VhcmQgYWdhaW5zdCBjYXNlcyB3aGVyZSB3ZSBhdHRlbXB0IG1vcmUgdGhhbiBvbmUgY2FsbC4gKGUuZy4KICAgIC8vIGEgYmF0Y2ggaGFuZGxlciBmYWlscywgc28gd2UgcmVqZWN0IHRoZSBwcm9taXNlLCBidXQgdGhlbiBuZXcgZGF0YSBjb21lcyBpbiBmb3IKICAgIC8vIGEgc3Vic2VxdWVudCBiYXRjaCBpdGVtKQoKICAgIHZhciBjb21wbGV0ZSA9ICgwLCBfbG9kYXNoLm9uY2UpKGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGVyciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkOwogICAgICByZXR1cm4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlcSk7CiAgICB9KTsgLy8gQmVnaW4gdGhlIHJlcXVlc3QKCiAgICByZXEub3BlbihtZXRob2QgfHwgJ1BPU1QnLCAiIi5jb25jYXQoYmFzZVBhdGgsICIvIikuY29uY2F0KHVybC5yZXBsYWNlKC9eXC8vLCAnJykpKTsKICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlOyAvLyBTZXQgdGhlIEhUVFAgaGVhZGVycwoKICAgIE9iamVjdC5lbnRyaWVzKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRIZWFkZXJzLCBoZWFkZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikgewogICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSwKICAgICAgICAgIGsgPSBfcmVmMlswXSwKICAgICAgICAgIHYgPSBfcmVmMlsxXTsKCiAgICAgIHJldHVybiByZXEuc2V0UmVxdWVzdEhlYWRlcihrLCB2KTsKICAgIH0pOwogICAgdmFyIGJhdGNoSGFuZGxlciA9IHByb2Nlc3NCYXRjaFJlc3BvbnNlU3RyZWFtKG9wdHMub25SZXNwb25zZSk7CgogICAgdmFyIHByb2Nlc3NCYXRjaCA9IGZ1bmN0aW9uIHByb2Nlc3NCYXRjaCgpIHsKICAgICAgdHJ5IHsKICAgICAgICBiYXRjaEhhbmRsZXIocmVxLnJlc3BvbnNlVGV4dCk7CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIHJlcS5hYm9ydCgpOwogICAgICAgIGNvbXBsZXRlKGVycik7CiAgICAgIH0KICAgIH07CgogICAgcmVxLm9ucHJvZ3Jlc3MgPSBwcm9jZXNzQmF0Y2g7CgogICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgLy8gT2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCBvbnByb2dyZXNzLCBzbyB3ZSBuZWVkCiAgICAgIC8vIHRvIGNhbGwgdGhpcyBoZXJlLCB0b28uIEl0J3Mgc2FmZSB0byBjYWxsIHRoaXMgbXVsdGlwbGUKICAgICAgLy8gdGltZXMgZXZlbiBmb3IgdGhlIHNhbWUgcHJvZ3Jlc3MgZXZlbnQuCiAgICAgIHByb2Nlc3NCYXRjaCgpOyAvLyA0IGlzIHRoZSBtYWdpYyBudW1iZXIgdGhhdCBtZWFucyB0aGUgcmVxdWVzdCBpcyBkb25lCgogICAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT09IDQpIHsKICAgICAgICAvLyAwIGluZGljYXRlcyBhIG5ldHdvcmsgZmFpbHVyZS4gNDAwKyBtZXNzYWdlcyBhcmUgY29uc2lkZXJlZCBzZXJ2ZXIgZXJyb3JzCiAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDAgfHwgcmVxLnN0YXR1cyA+PSA0MDApIHsKICAgICAgICAgIGNvbXBsZXRlKG5ldyBFcnJvcigiQmF0Y2ggcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgIi5jb25jYXQocmVxLnN0YXR1cykpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29tcGxldGUoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07IC8vIFNlbmQgdGhlIHBheWxvYWQgdG8gdGhlIHNlcnZlcgoKCiAgICByZXEuc2VuZChvcHRzLmJvZHkpOwogIH0pOwp9"},null]}