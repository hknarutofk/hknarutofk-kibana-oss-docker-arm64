{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/visualize/loader/pipeline_helpers/build_pipeline.js","dependencies":[{"path":"src/legacy/ui/public/visualize/loader/pipeline_helpers/build_pipeline.js","mtime":1572296413436},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuYnVpbGRQaXBlbGluZSA9IGV4cG9ydHMuZ2V0VmlzUGFyYW1zID0gZXhwb3J0cy5idWlsZFZpc2xpYkRpbWVuc2lvbnMgPSBleHBvcnRzLmJ1aWxkUGlwZWxpbmVWaXNGdW5jdGlvbiA9IGV4cG9ydHMucHJlcGFyZURpbWVuc2lvbiA9IGV4cG9ydHMucHJlcGFyZVZhbHVlID0gZXhwb3J0cy5wcmVwYXJlU3RyaW5nID0gZXhwb3J0cy5lc2NhcGVTdHJpbmcgPSBleHBvcnRzLnByZXBhcmVKc29uID0gZXhwb3J0cy5nZXRTY2hlbWFzID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfZGF0ZV9oaXN0b2dyYW0gPSByZXF1aXJlKCJ1aS9hZ2dfdHlwZXMvYnVja2V0cy9kYXRlX2hpc3RvZ3JhbSIpOwoKdmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIm1vbWVudCIpKTsKCnZhciBfdXRpbGl0aWVzID0gcmVxdWlyZSgiLi91dGlsaXRpZXMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsKICB0cnkgewogICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOwogICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmVqZWN0KGVycm9yKTsKICAgIHJldHVybjsKICB9CgogIGlmIChpbmZvLmRvbmUpIHsKICAgIHJlc29sdmUodmFsdWUpOwogIH0gZWxzZSB7CiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7CiAgfQp9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgYXJncyA9IGFyZ3VtZW50czsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsKCiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsKICAgICAgfQoKICAgICAgX25leHQodW5kZWZpbmVkKTsKICAgIH0pOwogIH07Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogIGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09ICJzeW1ib2wiKSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0gZWxzZSB7CiAgICBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfQoKICByZXR1cm4gX3R5cGVvZihvYmopOwp9Cgp2YXIgdmlzbGliQ2hhcnRzID0gWydhcmVhJywgJ2dhdWdlJywgJ2dvYWwnLCAnaGVhdG1hcCcsICdoaXN0b2dyYW0nLCAnaG9yaXpvbnRhbF9iYXInLCAnbGluZSddOwoKdmFyIGdldFNjaGVtYXMgPSBmdW5jdGlvbiBnZXRTY2hlbWFzKHZpcywgdGltZVJhbmdlKSB7CiAgdmFyIGNyZWF0ZVNjaGVtYUNvbmZpZyA9IGZ1bmN0aW9uIGNyZWF0ZVNjaGVtYUNvbmZpZyhhY2Nlc3NvciwgYWdnKSB7CiAgICBpZiAoYWdnLnR5cGUubmFtZSA9PT0gJ2RhdGVfaGlzdG9ncmFtJykgewogICAgICBhZ2cucGFyYW1zLnRpbWVSYW5nZSA9IHRpbWVSYW5nZTsKICAgICAgKDAsIF9kYXRlX2hpc3RvZ3JhbS5zZXRCb3VuZHMpKGFnZywgdHJ1ZSk7CiAgICB9CgogICAgdmFyIGhhc1N1YkFnZyA9IFsnZGVyaXZhdGl2ZScsICdtb3ZpbmdfYXZnJywgJ3NlcmlhbF9kaWZmJywgJ2N1bXVsYXRpdmVfc3VtJywgJ3N1bV9idWNrZXQnLCAnYXZnX2J1Y2tldCcsICdtaW5fYnVja2V0JywgJ21heF9idWNrZXQnXS5pbmNsdWRlcyhhZ2cudHlwZS5uYW1lKTsKICAgIHZhciBmb3JtYXQgPSAoMCwgX3V0aWxpdGllcy5jcmVhdGVGb3JtYXQpKGhhc1N1YkFnZyA/IGFnZy5wYXJhbXMuY3VzdG9tTWV0cmljIHx8IGFnZy5hZ2dDb25maWdzLmJ5SWRbYWdnLnBhcmFtcy5tZXRyaWNBZ2ddIDogYWdnKTsKICAgIHZhciBwYXJhbXMgPSB7fTsKCiAgICBpZiAoYWdnLnR5cGUubmFtZSA9PT0gJ2dlb2hhc2hfZ3JpZCcpIHsKICAgICAgcGFyYW1zLnByZWNpc2lvbiA9IGFnZy5wYXJhbXMucHJlY2lzaW9uOwogICAgICBwYXJhbXMudXNlR2VvY2VudHJvaWQgPSBhZ2cucGFyYW1zLnVzZUdlb2NlbnRyb2lkOwogICAgfQoKICAgIHJldHVybiB7CiAgICAgIGFjY2Vzc29yOiBhY2Nlc3NvciwKICAgICAgZm9ybWF0OiBmb3JtYXQsCiAgICAgIHBhcmFtczogcGFyYW1zLAogICAgICBhZ2dUeXBlOiBhZ2cudHlwZS5uYW1lCiAgICB9OwogIH07CgogIHZhciBjbnQgPSAwOwogIHZhciBzY2hlbWFzID0gewogICAgbWV0cmljOiBbXQogIH07CiAgdmFyIHJlc3BvbnNlQWdncyA9IHZpcy5hZ2dzLmdldFJlc3BvbnNlQWdncygpLmZpbHRlcihmdW5jdGlvbiAoYWdnKSB7CiAgICByZXR1cm4gYWdnLmVuYWJsZWQ7CiAgfSk7CiAgdmFyIGlzSGllcmFyY2hpY2FsID0gdmlzLmlzSGllcmFyY2hpY2FsKCk7CiAgdmFyIG1ldHJpY3MgPSByZXNwb25zZUFnZ3MuZmlsdGVyKGZ1bmN0aW9uIChhZ2cpIHsKICAgIHJldHVybiBhZ2cudHlwZS50eXBlID09PSAnbWV0cmljcyc7CiAgfSk7CiAgcmVzcG9uc2VBZ2dzLmZvckVhY2goZnVuY3Rpb24gKGFnZykgewogICAgdmFyIHNraXBNZXRyaWNzID0gZmFsc2U7CiAgICB2YXIgc2NoZW1hTmFtZSA9IGFnZy5zY2hlbWEgPyBhZ2cuc2NoZW1hLm5hbWUgfHwgYWdnLnNjaGVtYSA6IG51bGw7CgogICAgaWYgKF90eXBlb2Yoc2NoZW1hTmFtZSkgPT09ICdvYmplY3QnKSB7CiAgICAgIHNjaGVtYU5hbWUgPSBudWxsOwogICAgfQoKICAgIGlmICghc2NoZW1hTmFtZSkgewogICAgICBpZiAoYWdnLnR5cGUubmFtZSA9PT0gJ2dlb19jZW50cm9pZCcpIHsKICAgICAgICBzY2hlbWFOYW1lID0gJ2dlb19jZW50cm9pZCc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY250Kys7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICB9CgogICAgaWYgKHNjaGVtYU5hbWUgPT09ICdzcGxpdCcpIHsKICAgICAgc2NoZW1hTmFtZSA9ICJzcGxpdF8iLmNvbmNhdChhZ2cucGFyYW1zLnJvdyA/ICdyb3cnIDogJ2NvbHVtbicpOwogICAgICBza2lwTWV0cmljcyA9IHJlc3BvbnNlQWdncy5sZW5ndGggLSBtZXRyaWNzLmxlbmd0aCA+IDE7CiAgICB9CgogICAgaWYgKCFzY2hlbWFzW3NjaGVtYU5hbWVdKSB7CiAgICAgIHNjaGVtYXNbc2NoZW1hTmFtZV0gPSBbXTsKICAgIH0KCiAgICBpZiAoIWlzSGllcmFyY2hpY2FsIHx8IGFnZy50eXBlLnR5cGUgIT09ICdtZXRyaWNzJykgewogICAgICBzY2hlbWFzW3NjaGVtYU5hbWVdLnB1c2goY3JlYXRlU2NoZW1hQ29uZmlnKGNudCsrLCBhZ2cpKTsKICAgIH0KCiAgICBpZiAoaXNIaWVyYXJjaGljYWwgJiYgKGFnZy50eXBlLnR5cGUgIT09ICdtZXRyaWNzJyB8fCBtZXRyaWNzLmxlbmd0aCA9PT0gcmVzcG9uc2VBZ2dzLmxlbmd0aCkpIHsKICAgICAgbWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRyaWMpIHsKICAgICAgICB2YXIgc2NoZW1hQ29uZmlnID0gY3JlYXRlU2NoZW1hQ29uZmlnKGNudCsrLCBtZXRyaWMpOwoKICAgICAgICBpZiAoIXNraXBNZXRyaWNzKSB7CiAgICAgICAgICBzY2hlbWFzLm1ldHJpYy5wdXNoKHNjaGVtYUNvbmZpZyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9KTsKICByZXR1cm4gc2NoZW1hczsKfTsKCmV4cG9ydHMuZ2V0U2NoZW1hcyA9IGdldFNjaGVtYXM7Cgp2YXIgcHJlcGFyZUpzb24gPSBmdW5jdGlvbiBwcmVwYXJlSnNvbih2YXJpYWJsZSwgZGF0YSkgewogIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiAnJzsKICB9CgogIHJldHVybiAiIi5jb25jYXQodmFyaWFibGUsICI9JyIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShkYXRhKS5yZXBsYWNlKC9cXC9nLCAiXFxcXCIpLnJlcGxhY2UoLycvZywgIlxcJyIpLCAiJyAiKTsKfTsKCmV4cG9ydHMucHJlcGFyZUpzb24gPSBwcmVwYXJlSnNvbjsKCnZhciBlc2NhcGVTdHJpbmcgPSBmdW5jdGlvbiBlc2NhcGVTdHJpbmcoZGF0YSkgewogIHJldHVybiBkYXRhLnJlcGxhY2UoL1xcL2csICJcXFxcIikucmVwbGFjZSgvJy9nLCAiXFwnIik7Cn07CgpleHBvcnRzLmVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZzsKCnZhciBwcmVwYXJlU3RyaW5nID0gZnVuY3Rpb24gcHJlcGFyZVN0cmluZyh2YXJpYWJsZSwgZGF0YSkgewogIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiAnJzsKICB9CgogIHJldHVybiAiIi5jb25jYXQodmFyaWFibGUsICI9JyIpLmNvbmNhdChlc2NhcGVTdHJpbmcoZGF0YSksICInICIpOwp9OwoKZXhwb3J0cy5wcmVwYXJlU3RyaW5nID0gcHJlcGFyZVN0cmluZzsKCnZhciBwcmVwYXJlVmFsdWUgPSBmdW5jdGlvbiBwcmVwYXJlVmFsdWUodmFyaWFibGUsIGRhdGEpIHsKICB2YXIgcmF3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuICcnOwogIH0KCiAgaWYgKHJhdykgewogICAgcmV0dXJuICIiLmNvbmNhdCh2YXJpYWJsZSwgIj0iKS5jb25jYXQoZGF0YSwgIiAiKTsKICB9CgogIHN3aXRjaCAoX3R5cGVvZihkYXRhKSkgewogICAgY2FzZSAnc3RyaW5nJzoKICAgICAgcmV0dXJuIHByZXBhcmVTdHJpbmcodmFyaWFibGUsIGRhdGEpOwoKICAgIGNhc2UgJ29iamVjdCc6CiAgICAgIHJldHVybiBwcmVwYXJlSnNvbih2YXJpYWJsZSwgZGF0YSk7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuICIiLmNvbmNhdCh2YXJpYWJsZSwgIj0iKS5jb25jYXQoZGF0YSwgIiAiKTsKICB9Cn07CgpleHBvcnRzLnByZXBhcmVWYWx1ZSA9IHByZXBhcmVWYWx1ZTsKCnZhciBwcmVwYXJlRGltZW5zaW9uID0gZnVuY3Rpb24gcHJlcGFyZURpbWVuc2lvbih2YXJpYWJsZSwgZGF0YSkgewogIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiAnJzsKICB9CgogIHZhciBleHByID0gIiIuY29uY2F0KHZhcmlhYmxlLCAiPXt2aXNkaW1lbnNpb24gIikuY29uY2F0KGRhdGEuYWNjZXNzb3IsICIgIik7CgogIGlmIChkYXRhLmZvcm1hdCkgewogICAgZXhwciArPSBwcmVwYXJlVmFsdWUoJ2Zvcm1hdCcsIGRhdGEuZm9ybWF0LmlkKTsKICAgIGV4cHIgKz0gcHJlcGFyZUpzb24oJ2Zvcm1hdFBhcmFtcycsIGRhdGEuZm9ybWF0LnBhcmFtcyk7CiAgfQoKICBleHByICs9ICd9ICc7CiAgcmV0dXJuIGV4cHI7Cn07CgpleHBvcnRzLnByZXBhcmVEaW1lbnNpb24gPSBwcmVwYXJlRGltZW5zaW9uOwoKdmFyIGFkanVzdFZpc2xpYkRpbWVuc2lvbkZvcm1tYXRlcnMgPSBmdW5jdGlvbiBhZGp1c3RWaXNsaWJEaW1lbnNpb25Gb3JtbWF0ZXJzKHZpcywgZGltZW5zaW9ucykgewogIHZhciB2aXNTdGF0ZSA9IHZpcy5nZXRDdXJyZW50U3RhdGUoKTsKICB2YXIgdmlzQ29uZmlnID0gdmlzU3RhdGUucGFyYW1zOwogIHZhciByZXNwb25zZUFnZ3MgPSB2aXMuYWdncy5nZXRSZXNwb25zZUFnZ3MoKS5maWx0ZXIoZnVuY3Rpb24gKGFnZykgewogICAgcmV0dXJuIGFnZy5lbmFibGVkOwogIH0pOwogIChkaW1lbnNpb25zLnkgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHlEaW1lbnNpb24pIHsKICAgIHZhciB5QWdnID0gcmVzcG9uc2VBZ2dzW3lEaW1lbnNpb24uYWNjZXNzb3JdOwogICAgdmFyIHNlcmllc1BhcmFtID0gKHZpc0NvbmZpZy5zZXJpZXNQYXJhbXMgfHwgW10pLmZpbmQoZnVuY3Rpb24gKHBhcmFtKSB7CiAgICAgIHJldHVybiBwYXJhbS5kYXRhLmlkID09PSB5QWdnLmlkOwogICAgfSk7CgogICAgaWYgKHNlcmllc1BhcmFtKSB7CiAgICAgIHZhciB1c2VkVmFsdWVBeGlzID0gKHZpc0NvbmZpZy52YWx1ZUF4ZXMgfHwgW10pLmZpbmQoZnVuY3Rpb24gKHZhbHVlQXhpcykgewogICAgICAgIHJldHVybiB2YWx1ZUF4aXMuaWQgPT09IHNlcmllc1BhcmFtLnZhbHVlQXhpczsKICAgICAgfSk7CgogICAgICBpZiAoKDAsIF9sb2Rhc2guZ2V0KSh1c2VkVmFsdWVBeGlzLCAnc2NhbGUubW9kZScpID09PSAncGVyY2VudGFnZScpIHsKICAgICAgICB5RGltZW5zaW9uLmZvcm1hdCA9IHsKICAgICAgICAgIGlkOiAncGVyY2VudCcKICAgICAgICB9OwogICAgICB9CiAgICB9CgogICAgaWYgKCgwLCBfbG9kYXNoLmdldCkodmlzQ29uZmlnLCAnZ2F1Z2UucGVyY2VudGFnZU1vZGUnKSA9PT0gdHJ1ZSkgewogICAgICB5RGltZW5zaW9uLmZvcm1hdCA9IHsKICAgICAgICBpZDogJ3BlcmNlbnQnCiAgICAgIH07CiAgICB9CiAgfSk7Cn07Cgp2YXIgYnVpbGRQaXBlbGluZVZpc0Z1bmN0aW9uID0gewogIHZlZ2E6IGZ1bmN0aW9uIHZlZ2EodmlzU3RhdGUpIHsKICAgIHJldHVybiAidmVnYSAiLmNvbmNhdChwcmVwYXJlU3RyaW5nKCdzcGVjJywgdmlzU3RhdGUucGFyYW1zLnNwZWMpKTsKICB9LAogIGlucHV0X2NvbnRyb2xfdmlzOiBmdW5jdGlvbiBpbnB1dF9jb250cm9sX3Zpcyh2aXNTdGF0ZSkgewogICAgcmV0dXJuICJpbnB1dF9jb250cm9sX3ZpcyAiLmNvbmNhdChwcmVwYXJlSnNvbigndmlzQ29uZmlnJywgdmlzU3RhdGUucGFyYW1zKSk7CiAgfSwKICBtZXRyaWNzOiBmdW5jdGlvbiBtZXRyaWNzKHZpc1N0YXRlLCBzY2hlbWFzKSB7CiAgICB2YXIgdWlTdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CiAgICB2YXIgcGFyYW1zSnNvbiA9IHByZXBhcmVKc29uKCdwYXJhbXMnLCB2aXNTdGF0ZS5wYXJhbXMpOwogICAgdmFyIHVpU3RhdGVKc29uID0gcHJlcGFyZUpzb24oJ3VpU3RhdGUnLCB1aVN0YXRlKTsKICAgIHJldHVybiAidHN2YiAiLmNvbmNhdChwYXJhbXNKc29uLCAiICIpLmNvbmNhdCh1aVN0YXRlSnNvbik7CiAgfSwKICB0aW1lbGlvbjogZnVuY3Rpb24gdGltZWxpb24odmlzU3RhdGUpIHsKICAgIHZhciBleHByZXNzaW9uID0gcHJlcGFyZVN0cmluZygnZXhwcmVzc2lvbicsIHZpc1N0YXRlLnBhcmFtcy5leHByZXNzaW9uKTsKICAgIHZhciBpbnRlcnZhbCA9IHByZXBhcmVTdHJpbmcoJ2ludGVydmFsJywgdmlzU3RhdGUucGFyYW1zLmludGVydmFsKTsKICAgIHJldHVybiAidGltZWxpb25fdmlzICIuY29uY2F0KGV4cHJlc3Npb24pLmNvbmNhdChpbnRlcnZhbCk7CiAgfSwKICBtYXJrZG93bjogZnVuY3Rpb24gbWFya2Rvd24odmlzU3RhdGUpIHsKICAgIHZhciBfdmlzU3RhdGUkcGFyYW1zID0gdmlzU3RhdGUucGFyYW1zLAogICAgICAgIG1hcmtkb3duID0gX3Zpc1N0YXRlJHBhcmFtcy5tYXJrZG93biwKICAgICAgICBmb250U2l6ZSA9IF92aXNTdGF0ZSRwYXJhbXMuZm9udFNpemUsCiAgICAgICAgb3BlbkxpbmtzSW5OZXdUYWIgPSBfdmlzU3RhdGUkcGFyYW1zLm9wZW5MaW5rc0luTmV3VGFiOwogICAgdmFyIGVzY2FwZWRNYXJrZG93biA9ICcnOwoKICAgIGlmICh0eXBlb2YgbWFya2Rvd24gPT09ICdzdHJpbmcnIHx8IG1hcmtkb3duIGluc3RhbmNlb2YgU3RyaW5nKSB7CiAgICAgIGVzY2FwZWRNYXJrZG93biA9IGVzY2FwZVN0cmluZyhtYXJrZG93bi50b1N0cmluZygpKTsKICAgIH0KCiAgICB2YXIgZXhwciA9ICJtYXJrZG93bnZpcyAnIi5jb25jYXQoZXNjYXBlZE1hcmtkb3duLCAiJyAiKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdmb250JywgIntmb250IHNpemU9Ii5jb25jYXQoZm9udFNpemUsICJ9IiksIHRydWUpOwogICAgZXhwciArPSBwcmVwYXJlVmFsdWUoJ29wZW5MaW5rc0luTmV3VGFiJywgb3BlbkxpbmtzSW5OZXdUYWIpOwogICAgcmV0dXJuIGV4cHI7CiAgfSwKICB0YWJsZTogZnVuY3Rpb24gdGFibGUodmlzU3RhdGUsIHNjaGVtYXMpIHsKICAgIHZhciB2aXNDb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB2aXNTdGF0ZS5wYXJhbXMsIHt9LCBidWlsZFZpc0NvbmZpZy50YWJsZShzY2hlbWFzLCB2aXNTdGF0ZS5wYXJhbXMpKTsKCiAgICByZXR1cm4gImtpYmFuYV90YWJsZSAiLmNvbmNhdChwcmVwYXJlSnNvbigndmlzQ29uZmlnJywgdmlzQ29uZmlnKSk7CiAgfSwKICBtZXRyaWM6IGZ1bmN0aW9uIG1ldHJpYyh2aXNTdGF0ZSwgc2NoZW1hcykgewogICAgdmFyIF92aXNTdGF0ZSRwYXJhbXMkbWV0ciA9IHZpc1N0YXRlLnBhcmFtcy5tZXRyaWMsCiAgICAgICAgcGVyY2VudGFnZU1vZGUgPSBfdmlzU3RhdGUkcGFyYW1zJG1ldHIucGVyY2VudGFnZU1vZGUsCiAgICAgICAgdXNlUmFuZ2VzID0gX3Zpc1N0YXRlJHBhcmFtcyRtZXRyLnVzZVJhbmdlcywKICAgICAgICBjb2xvclNjaGVtYSA9IF92aXNTdGF0ZSRwYXJhbXMkbWV0ci5jb2xvclNjaGVtYSwKICAgICAgICBtZXRyaWNDb2xvck1vZGUgPSBfdmlzU3RhdGUkcGFyYW1zJG1ldHIubWV0cmljQ29sb3JNb2RlLAogICAgICAgIGNvbG9yc1JhbmdlID0gX3Zpc1N0YXRlJHBhcmFtcyRtZXRyLmNvbG9yc1JhbmdlLAogICAgICAgIGxhYmVscyA9IF92aXNTdGF0ZSRwYXJhbXMkbWV0ci5sYWJlbHMsCiAgICAgICAgaW52ZXJ0Q29sb3JzID0gX3Zpc1N0YXRlJHBhcmFtcyRtZXRyLmludmVydENvbG9ycywKICAgICAgICBzdHlsZSA9IF92aXNTdGF0ZSRwYXJhbXMkbWV0ci5zdHlsZTsKICAgIHZhciBfYnVpbGRWaXNDb25maWckbWV0cmkgPSBidWlsZFZpc0NvbmZpZy5tZXRyaWMoc2NoZW1hcykuZGltZW5zaW9ucywKICAgICAgICBtZXRyaWNzID0gX2J1aWxkVmlzQ29uZmlnJG1ldHJpLm1ldHJpY3MsCiAgICAgICAgYnVja2V0ID0gX2J1aWxkVmlzQ29uZmlnJG1ldHJpLmJ1Y2tldDsgLy8gZml4IGZvcm1hdHRlciBmb3IgcGVyY2VudGFnZSBtb2RlCgogICAgaWYgKCgwLCBfbG9kYXNoLmdldCkodmlzU3RhdGUucGFyYW1zLCAnbWV0cmljLnBlcmNlbnRhZ2VNb2RlJykgPT09IHRydWUpIHsKICAgICAgbWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRyaWMpIHsKICAgICAgICBtZXRyaWMuZm9ybWF0ID0gewogICAgICAgICAgaWQ6ICdwZXJjZW50JwogICAgICAgIH07CiAgICAgIH0pOwogICAgfQoKICAgIHZhciBleHByID0gIm1ldHJpY3ZpcyAiOwogICAgZXhwciArPSBwcmVwYXJlVmFsdWUoJ3BlcmNlbnRhZ2UnLCBwZXJjZW50YWdlTW9kZSk7CiAgICBleHByICs9IHByZXBhcmVWYWx1ZSgnY29sb3JTY2hlbWUnLCBjb2xvclNjaGVtYSk7CiAgICBleHByICs9IHByZXBhcmVWYWx1ZSgnY29sb3JNb2RlJywgbWV0cmljQ29sb3JNb2RlKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCd1c2VSYW5nZXMnLCB1c2VSYW5nZXMpOwogICAgZXhwciArPSBwcmVwYXJlVmFsdWUoJ2ludmVydENvbG9ycycsIGludmVydENvbG9ycyk7CiAgICBleHByICs9IHByZXBhcmVWYWx1ZSgnc2hvd0xhYmVscycsIGxhYmVscyAmJiBsYWJlbHMuc2hvdyk7CgogICAgaWYgKHN0eWxlKSB7CiAgICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdiZ0ZpbGwnLCBzdHlsZS5iZ0ZpbGwpOwogICAgICBleHByICs9IHByZXBhcmVWYWx1ZSgnZm9udCcsICJ7Zm9udCBzaXplPSIuY29uY2F0KHN0eWxlLmZvbnRTaXplLCAifSIpLCB0cnVlKTsKICAgICAgZXhwciArPSBwcmVwYXJlVmFsdWUoJ3N1YlRleHQnLCBzdHlsZS5zdWJUZXh0KTsKICAgICAgZXhwciArPSBwcmVwYXJlRGltZW5zaW9uKCdidWNrZXQnLCBidWNrZXQpOwogICAgfQoKICAgIGlmIChjb2xvcnNSYW5nZSkgewogICAgICBjb2xvcnNSYW5nZS5mb3JFYWNoKGZ1bmN0aW9uIChyYW5nZSkgewogICAgICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdjb2xvclJhbmdlJywgIntyYW5nZSBmcm9tPSIuY29uY2F0KHJhbmdlLmZyb20sICIgdG89IikuY29uY2F0KHJhbmdlLnRvLCAifSIpLCB0cnVlKTsKICAgICAgfSk7CiAgICB9CgogICAgbWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRyaWMpIHsKICAgICAgZXhwciArPSBwcmVwYXJlRGltZW5zaW9uKCdtZXRyaWMnLCBtZXRyaWMpOwogICAgfSk7CiAgICByZXR1cm4gZXhwcjsKICB9LAogIHRhZ2Nsb3VkOiBmdW5jdGlvbiB0YWdjbG91ZCh2aXNTdGF0ZSwgc2NoZW1hcykgewogICAgdmFyIF92aXNTdGF0ZSRwYXJhbXMyID0gdmlzU3RhdGUucGFyYW1zLAogICAgICAgIHNjYWxlID0gX3Zpc1N0YXRlJHBhcmFtczIuc2NhbGUsCiAgICAgICAgb3JpZW50YXRpb24gPSBfdmlzU3RhdGUkcGFyYW1zMi5vcmllbnRhdGlvbiwKICAgICAgICBtaW5Gb250U2l6ZSA9IF92aXNTdGF0ZSRwYXJhbXMyLm1pbkZvbnRTaXplLAogICAgICAgIG1heEZvbnRTaXplID0gX3Zpc1N0YXRlJHBhcmFtczIubWF4Rm9udFNpemUsCiAgICAgICAgc2hvd0xhYmVsID0gX3Zpc1N0YXRlJHBhcmFtczIuc2hvd0xhYmVsOwoKICAgIHZhciBfYnVpbGRWaXNDb25maWckdGFnY2wgPSBidWlsZFZpc0NvbmZpZy50YWdjbG91ZChzY2hlbWFzKSwKICAgICAgICBtZXRyaWMgPSBfYnVpbGRWaXNDb25maWckdGFnY2wubWV0cmljLAogICAgICAgIGJ1Y2tldCA9IF9idWlsZFZpc0NvbmZpZyR0YWdjbC5idWNrZXQ7CgogICAgdmFyIGV4cHIgPSAidGFnY2xvdWQgbWV0cmljPXt2aXNkaW1lbnNpb24gIi5jb25jYXQobWV0cmljLmFjY2Vzc29yLCAifSAiKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdzY2FsZScsIHNjYWxlKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdvcmllbnRhdGlvbicsIG9yaWVudGF0aW9uKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdtaW5Gb250U2l6ZScsIG1pbkZvbnRTaXplKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdtYXhGb250U2l6ZScsIG1heEZvbnRTaXplKTsKICAgIGV4cHIgKz0gcHJlcGFyZVZhbHVlKCdzaG93TGFiZWwnLCBzaG93TGFiZWwpOwogICAgZXhwciArPSBwcmVwYXJlRGltZW5zaW9uKCdidWNrZXQnLCBidWNrZXQpOwogICAgcmV0dXJuIGV4cHI7CiAgfSwKICByZWdpb25fbWFwOiBmdW5jdGlvbiByZWdpb25fbWFwKHZpc1N0YXRlLCBzY2hlbWFzKSB7CiAgICB2YXIgdmlzQ29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdmlzU3RhdGUucGFyYW1zLCB7fSwgYnVpbGRWaXNDb25maWcucmVnaW9uX21hcChzY2hlbWFzKSk7CgogICAgcmV0dXJuICJyZWdpb25tYXAgIi5jb25jYXQocHJlcGFyZUpzb24oJ3Zpc0NvbmZpZycsIHZpc0NvbmZpZykpOwogIH0sCiAgdGlsZV9tYXA6IGZ1bmN0aW9uIHRpbGVfbWFwKHZpc1N0YXRlLCBzY2hlbWFzKSB7CiAgICB2YXIgdmlzQ29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdmlzU3RhdGUucGFyYW1zLCB7fSwgYnVpbGRWaXNDb25maWcudGlsZV9tYXAoc2NoZW1hcykpOwoKICAgIHJldHVybiAidGlsZW1hcCAiLmNvbmNhdChwcmVwYXJlSnNvbigndmlzQ29uZmlnJywgdmlzQ29uZmlnKSk7CiAgfSwKICBwaWU6IGZ1bmN0aW9uIHBpZSh2aXNTdGF0ZSwgc2NoZW1hcykgewogICAgdmFyIHZpc0NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHZpc1N0YXRlLnBhcmFtcywge30sIGJ1aWxkVmlzQ29uZmlnLnBpZShzY2hlbWFzKSk7CgogICAgcmV0dXJuICJraWJhbmFfcGllICIuY29uY2F0KHByZXBhcmVKc29uKCd2aXNDb25maWcnLCB2aXNDb25maWcpKTsKICB9Cn07CmV4cG9ydHMuYnVpbGRQaXBlbGluZVZpc0Z1bmN0aW9uID0gYnVpbGRQaXBlbGluZVZpc0Z1bmN0aW9uOwp2YXIgYnVpbGRWaXNDb25maWcgPSB7CiAgdGFibGU6IGZ1bmN0aW9uIHRhYmxlKHNjaGVtYXMpIHsKICAgIHZhciB2aXNQYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9OwogICAgdmFyIHZpc0NvbmZpZyA9IHt9OwogICAgdmFyIG1ldHJpY3MgPSBzY2hlbWFzLm1ldHJpYzsKICAgIHZhciBidWNrZXRzID0gc2NoZW1hcy5idWNrZXQgfHwgW107CiAgICB2aXNDb25maWcuZGltZW5zaW9ucyA9IHsKICAgICAgbWV0cmljczogbWV0cmljcywKICAgICAgYnVja2V0czogYnVja2V0cywKICAgICAgc3BsaXRSb3c6IHNjaGVtYXMuc3BsaXRfcm93LAogICAgICBzcGxpdENvbHVtbjogc2NoZW1hcy5zcGxpdF9jb2x1bW4KICAgIH07CgogICAgaWYgKHZpc1BhcmFtcy5zaG93TWV0cmljc0F0QWxsTGV2ZWxzID09PSBmYWxzZSAmJiB2aXNQYXJhbXMuc2hvd1BhcnRpYWxSb3dzID09PSB0cnVlKSB7CiAgICAgIC8vIEhhbmRsZSBjYXNlIHdoZXJlIHVzZXIgd2FudHMgdG8gc2VlIHBhcnRpYWwgcm93cyBidXQgbm90IG1ldHJpY3MgYXQgYWxsIGxldmVscy4KICAgICAgLy8gVGhpcyByZXF1aXJlcyBjYWxjdWxhdGluZyBob3cgbWFueSBtZXRyaWNzIHdpbGwgY29tZSBiYWNrIGluIHRoZSB0YWJpZmllZCByZXNwb25zZSwKICAgICAgLy8gYW5kIHJlbW92aW5nIGFsbCBtZXRyaWNzIGZyb20gdGhlIGRpbWVuc2lvbnMgZXhjZXB0IHRoZSBsYXN0IHNldC4KICAgICAgdmFyIG1ldHJpY3NQZXJCdWNrZXQgPSBtZXRyaWNzLmxlbmd0aCAvIGJ1Y2tldHMubGVuZ3RoOwogICAgICB2aXNDb25maWcuZGltZW5zaW9ucy5tZXRyaWNzLnNwbGljZSgwLCBtZXRyaWNzUGVyQnVja2V0ICogYnVja2V0cy5sZW5ndGggLSBtZXRyaWNzUGVyQnVja2V0KTsKICAgIH0KCiAgICByZXR1cm4gdmlzQ29uZmlnOwogIH0sCiAgbWV0cmljOiBmdW5jdGlvbiBtZXRyaWMoc2NoZW1hcykgewogICAgdmFyIHZpc0NvbmZpZyA9IHsKICAgICAgZGltZW5zaW9uczoge30KICAgIH07CiAgICB2aXNDb25maWcuZGltZW5zaW9ucy5tZXRyaWNzID0gc2NoZW1hcy5tZXRyaWM7CgogICAgaWYgKHNjaGVtYXMuZ3JvdXApIHsKICAgICAgdmlzQ29uZmlnLmRpbWVuc2lvbnMuYnVja2V0ID0gc2NoZW1hcy5ncm91cFswXTsKICAgIH0KCiAgICByZXR1cm4gdmlzQ29uZmlnOwogIH0sCiAgdGFnY2xvdWQ6IGZ1bmN0aW9uIHRhZ2Nsb3VkKHNjaGVtYXMpIHsKICAgIHZhciB2aXNDb25maWcgPSB7fTsKICAgIHZpc0NvbmZpZy5tZXRyaWMgPSBzY2hlbWFzLm1ldHJpY1swXTsKCiAgICBpZiAoc2NoZW1hcy5zZWdtZW50KSB7CiAgICAgIHZpc0NvbmZpZy5idWNrZXQgPSBzY2hlbWFzLnNlZ21lbnRbMF07CiAgICB9CgogICAgcmV0dXJuIHZpc0NvbmZpZzsKICB9LAogIHJlZ2lvbl9tYXA6IGZ1bmN0aW9uIHJlZ2lvbl9tYXAoc2NoZW1hcykgewogICAgdmFyIHZpc0NvbmZpZyA9IHt9OwogICAgdmlzQ29uZmlnLm1ldHJpYyA9IHNjaGVtYXMubWV0cmljWzBdOwoKICAgIGlmIChzY2hlbWFzLnNlZ21lbnQpIHsKICAgICAgdmlzQ29uZmlnLmJ1Y2tldCA9IHNjaGVtYXMuc2VnbWVudFswXTsKICAgIH0KCiAgICByZXR1cm4gdmlzQ29uZmlnOwogIH0sCiAgdGlsZV9tYXA6IGZ1bmN0aW9uIHRpbGVfbWFwKHNjaGVtYXMpIHsKICAgIHZhciB2aXNDb25maWcgPSB7fTsKICAgIHZpc0NvbmZpZy5kaW1lbnNpb25zID0gewogICAgICBtZXRyaWM6IHNjaGVtYXMubWV0cmljWzBdLAogICAgICBnZW9oYXNoOiBzY2hlbWFzLnNlZ21lbnQgPyBzY2hlbWFzLnNlZ21lbnRbMF0gOiBudWxsLAogICAgICBnZW9jZW50cm9pZDogc2NoZW1hcy5nZW9fY2VudHJvaWQgPyBzY2hlbWFzLmdlb19jZW50cm9pZFswXSA6IG51bGwKICAgIH07CiAgICByZXR1cm4gdmlzQ29uZmlnOwogIH0sCiAgcGllOiBmdW5jdGlvbiBwaWUoc2NoZW1hcykgewogICAgdmFyIHZpc0NvbmZpZyA9IHt9OwogICAgdmlzQ29uZmlnLmRpbWVuc2lvbnMgPSB7CiAgICAgIG1ldHJpYzogc2NoZW1hcy5tZXRyaWNbMF0sCiAgICAgIGJ1Y2tldHM6IHNjaGVtYXMuc2VnbWVudCwKICAgICAgc3BsaXRSb3c6IHNjaGVtYXMuc3BsaXRfcm93LAogICAgICBzcGxpdENvbHVtbjogc2NoZW1hcy5zcGxpdF9jb2x1bW4KICAgIH07CiAgICByZXR1cm4gdmlzQ29uZmlnOwogIH0KfTsKCnZhciBidWlsZFZpc2xpYkRpbWVuc2lvbnMgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHZpcywgcGFyYW1zKSB7CiAgICB2YXIgc2NoZW1hcywgZGltZW5zaW9ucywgeEFnZywgX3hBZ2ckYnVja2V0cyRnZXRJbnRlLCBlc1VuaXQsIGVzVmFsdWUsIGludGVydmFsUGFyYW0sIG91dHB1dCwgc2VhcmNoUmVxdWVzdDsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHNjaGVtYXMgPSBnZXRTY2hlbWFzKHZpcywgcGFyYW1zLnRpbWVSYW5nZSk7CiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB7CiAgICAgICAgICAgICAgeDogc2NoZW1hcy5zZWdtZW50ID8gc2NoZW1hcy5zZWdtZW50WzBdIDogbnVsbCwKICAgICAgICAgICAgICB5OiBzY2hlbWFzLm1ldHJpYywKICAgICAgICAgICAgICB6OiBzY2hlbWFzLnJhZGl1cywKICAgICAgICAgICAgICB3aWR0aDogc2NoZW1hcy53aWR0aCwKICAgICAgICAgICAgICBzZXJpZXM6IHNjaGVtYXMuZ3JvdXAsCiAgICAgICAgICAgICAgc3BsaXRSb3c6IHNjaGVtYXMuc3BsaXRfcm93LAogICAgICAgICAgICAgIHNwbGl0Q29sdW1uOiBzY2hlbWFzLnNwbGl0X2NvbHVtbgogICAgICAgICAgICB9OwoKICAgICAgICAgICAgaWYgKCFzY2hlbWFzLnNlZ21lbnQpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHhBZ2cgPSB2aXMuYWdncy5nZXRSZXNwb25zZUFnZ3MoKVtkaW1lbnNpb25zLnguYWNjZXNzb3JdOwoKICAgICAgICAgICAgaWYgKCEoeEFnZy50eXBlLm5hbWUgPT09ICdkYXRlX2hpc3RvZ3JhbScpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkaW1lbnNpb25zLngucGFyYW1zLmRhdGUgPSB0cnVlOwogICAgICAgICAgICBfeEFnZyRidWNrZXRzJGdldEludGUgPSB4QWdnLmJ1Y2tldHMuZ2V0SW50ZXJ2YWwoKSwgZXNVbml0ID0gX3hBZ2ckYnVja2V0cyRnZXRJbnRlLmVzVW5pdCwgZXNWYWx1ZSA9IF94QWdnJGJ1Y2tldHMkZ2V0SW50ZS5lc1ZhbHVlOwogICAgICAgICAgICBkaW1lbnNpb25zLngucGFyYW1zLmludGVydmFsID0gX21vbWVudC5kZWZhdWx0LmR1cmF0aW9uKGVzVmFsdWUsIGVzVW5pdCk7CiAgICAgICAgICAgIGRpbWVuc2lvbnMueC5wYXJhbXMuZm9ybWF0ID0geEFnZy5idWNrZXRzLmdldFNjYWxlZERhdGVGb3JtYXQoKTsKICAgICAgICAgICAgZGltZW5zaW9ucy54LnBhcmFtcy5ib3VuZHMgPSB4QWdnLmJ1Y2tldHMuZ2V0Qm91bmRzKCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgaWYgKCEoeEFnZy50eXBlLm5hbWUgPT09ICdoaXN0b2dyYW0nKSkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW50ZXJ2YWxQYXJhbSA9IHhBZ2cudHlwZS5wYXJhbXMuYnlOYW1lLmludGVydmFsOwogICAgICAgICAgICBvdXRwdXQgPSB7CiAgICAgICAgICAgICAgcGFyYW1zOiB7fQogICAgICAgICAgICB9OwogICAgICAgICAgICBzZWFyY2hSZXF1ZXN0ID0gewogICAgICAgICAgICAgIHdoZW5BYm9ydGVkOiBmdW5jdGlvbiB3aGVuQWJvcnRlZChmbikgewogICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5hYm9ydFNpZ25hbCkgewogICAgICAgICAgICAgICAgICBwYXJhbXMuYWJvcnRTaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBmbik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7CiAgICAgICAgICAgIHJldHVybiBpbnRlcnZhbFBhcmFtLm1vZGlmeUFnZ0NvbmZpZ09uU2VhcmNoUmVxdWVzdFN0YXJ0KHhBZ2csIHBhcmFtcy5zZWFyY2hTb3VyY2UsIHNlYXJjaFJlcXVlc3QpOwoKICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgIGludGVydmFsUGFyYW0ud3JpdGUoeEFnZywgb3V0cHV0KTsKICAgICAgICAgICAgZGltZW5zaW9ucy54LnBhcmFtcy5pbnRlcnZhbCA9IG91dHB1dC5wYXJhbXMuaW50ZXJ2YWw7CgogICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgYWRqdXN0VmlzbGliRGltZW5zaW9uRm9ybW1hdGVycyh2aXMsIGRpbWVuc2lvbnMpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBkaW1lbnNpb25zKTsKCiAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGJ1aWxkVmlzbGliRGltZW5zaW9ucyhfeCwgX3gyKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsgLy8gSWYgbm90IHVzaW5nIHRoZSBleHByZXNzaW9uIHBpcGVsaW5lIChpLmUuIHZpc3VhbGl6ZV9kYXRhX2xvYWRlciksIHdlIG5lZWQgYSBtZWNoYW5pc20gdG8KLy8gdGFrZSBhIFZpcyBvYmplY3QgYW5kIGRlY29yYXRlIGl0IHdpdGggdGhlIG5lY2Vzc2FyeSBwYXJhbXMgKGRpbWVuc2lvbnMsIGJ1Y2tldCwgbWV0cmljLCBldGMpCgoKZXhwb3J0cy5idWlsZFZpc2xpYkRpbWVuc2lvbnMgPSBidWlsZFZpc2xpYkRpbWVuc2lvbnM7Cgp2YXIgZ2V0VmlzUGFyYW1zID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKHZpcywgcGFyYW1zKSB7CiAgICB2YXIgc2NoZW1hcywgdmlzQ29uZmlnOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgc2NoZW1hcyA9IGdldFNjaGVtYXModmlzLCBwYXJhbXMudGltZVJhbmdlKTsKICAgICAgICAgICAgdmlzQ29uZmlnID0gKDAsIF9sb2Rhc2guY2xvbmVEZWVwKSh2aXMucGFyYW1zKTsKCiAgICAgICAgICAgIGlmICghYnVpbGRWaXNDb25maWdbdmlzLnR5cGUubmFtZV0pIHsKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZpc0NvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHZpc0NvbmZpZywge30sIGJ1aWxkVmlzQ29uZmlnW3Zpcy50eXBlLm5hbWVdKHNjaGVtYXMsIHZpc0NvbmZpZykpOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEwOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGlmICghdmlzbGliQ2hhcnRzLmluY2x1ZGVzKHZpcy50eXBlLm5hbWUpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICByZXR1cm4gYnVpbGRWaXNsaWJEaW1lbnNpb25zKHZpcywgcGFyYW1zKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgIHZpc0NvbmZpZy5kaW1lbnNpb25zID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHZpc0NvbmZpZyk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIGdldFZpc1BhcmFtcyhfeDMsIF94NCkgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0cy5nZXRWaXNQYXJhbXMgPSBnZXRWaXNQYXJhbXM7Cgp2YXIgYnVpbGRQaXBlbGluZSA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyh2aXMsIHBhcmFtcykgewogICAgdmFyIHNlYXJjaFNvdXJjZSwgaW5kZXhQYXR0ZXJuLCBxdWVyeSwgZmlsdGVycywgdmlzU3RhdGUsIHVpU3RhdGUsIHBpcGVsaW5lLCBzY2hlbWFzLCB2aXNDb25maWcsIF92aXNDb25maWc7CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgc2VhcmNoU291cmNlID0gcGFyYW1zLnNlYXJjaFNvdXJjZTsKICAgICAgICAgICAgaW5kZXhQYXR0ZXJuID0gdmlzLmluZGV4UGF0dGVybjsKICAgICAgICAgICAgcXVlcnkgPSBzZWFyY2hTb3VyY2UuZ2V0RmllbGQoJ3F1ZXJ5Jyk7CiAgICAgICAgICAgIGZpbHRlcnMgPSBzZWFyY2hTb3VyY2UuZ2V0RmllbGQoJ2ZpbHRlcicpOwogICAgICAgICAgICB2aXNTdGF0ZSA9IHZpcy5nZXRDdXJyZW50U3RhdGUoKTsKICAgICAgICAgICAgdWlTdGF0ZSA9IHZpcy5nZXRVaVN0YXRlKCk7IC8vIGNvbnRleHQKCiAgICAgICAgICAgIHBpcGVsaW5lID0gImtpYmFuYSB8IGtpYmFuYV9jb250ZXh0ICI7CgogICAgICAgICAgICBpZiAocXVlcnkpIHsKICAgICAgICAgICAgICBwaXBlbGluZSArPSBwcmVwYXJlSnNvbigncXVlcnknLCBxdWVyeSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChmaWx0ZXJzKSB7CiAgICAgICAgICAgICAgcGlwZWxpbmUgKz0gcHJlcGFyZUpzb24oJ2ZpbHRlcnMnLCBmaWx0ZXJzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHZpcy5zYXZlZFNlYXJjaElkKSB7CiAgICAgICAgICAgICAgcGlwZWxpbmUgKz0gcHJlcGFyZVN0cmluZygnc2F2ZWRTZWFyY2hJZCcsIHZpcy5zYXZlZFNlYXJjaElkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcGlwZWxpbmUgKz0gJ3wgJzsgLy8gcmVxdWVzdCBoYW5kbGVyCgogICAgICAgICAgICBpZiAodmlzLnR5cGUucmVxdWVzdEhhbmRsZXIgPT09ICdjb3VyaWVyJykgewogICAgICAgICAgICAgIHBpcGVsaW5lICs9ICJlc2FnZ3NcbiAgICAiLmNvbmNhdChwcmVwYXJlU3RyaW5nKCdpbmRleCcsIGluZGV4UGF0dGVybi5pZCksICJcbiAgICBtZXRyaWNzQXRBbGxMZXZlbHM9IikuY29uY2F0KHZpcy5pc0hpZXJhcmNoaWNhbCgpLCAiXG4gICAgcGFydGlhbFJvd3M9IikuY29uY2F0KHZpcy50eXBlLnJlcXVpcmVzUGFydGlhbFJvd3MgfHwgdmlzLnBhcmFtcy5zaG93UGFydGlhbFJvd3MgfHwgZmFsc2UsICJcbiAgICAiKS5jb25jYXQocHJlcGFyZUpzb24oJ2FnZ0NvbmZpZ3MnLCB2aXNTdGF0ZS5hZ2dzKSwgIiB8ICIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBzY2hlbWFzID0gZ2V0U2NoZW1hcyh2aXMsIHBhcmFtcy50aW1lUmFuZ2UpOwoKICAgICAgICAgICAgaWYgKCFidWlsZFBpcGVsaW5lVmlzRnVuY3Rpb25bdmlzLnR5cGUubmFtZV0pIHsKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE3OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBwaXBlbGluZSArPSBidWlsZFBpcGVsaW5lVmlzRnVuY3Rpb25bdmlzLnR5cGUubmFtZV0odmlzU3RhdGUsIHNjaGVtYXMsIHVpU3RhdGUpOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM2OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICBpZiAoIXZpc2xpYkNoYXJ0cy5pbmNsdWRlcyh2aXMudHlwZS5uYW1lKSkgewogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZpc0NvbmZpZyA9IHZpc1N0YXRlLnBhcmFtczsKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyMTsKICAgICAgICAgICAgcmV0dXJuIGJ1aWxkVmlzbGliRGltZW5zaW9ucyh2aXMsIHBhcmFtcyk7CgogICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgdmlzQ29uZmlnLmRpbWVuc2lvbnMgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgcGlwZWxpbmUgKz0gInZpc2xpYiB0eXBlPSciLmNvbmNhdCh2aXMudHlwZS5uYW1lLCAiJyAiKS5jb25jYXQocHJlcGFyZUpzb24oJ3Zpc0NvbmZpZycsIHZpc1N0YXRlLnBhcmFtcykpOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDM2OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICBpZiAoIXZpcy50eXBlLnRvRXhwcmVzc2lvbikgewogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMzI7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIF9jb250ZXh0My50MCA9IHBpcGVsaW5lOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI5OwogICAgICAgICAgICByZXR1cm4gdmlzLnR5cGUudG9FeHByZXNzaW9uKHZpcywgcGFyYW1zKTsKCiAgICAgICAgICBjYXNlIDI5OgogICAgICAgICAgICBwaXBlbGluZSA9IF9jb250ZXh0My50MCArPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzNjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAzMjoKICAgICAgICAgICAgX3Zpc0NvbmZpZyA9IHZpc1N0YXRlLnBhcmFtczsKICAgICAgICAgICAgX3Zpc0NvbmZpZy5kaW1lbnNpb25zID0gc2NoZW1hczsKICAgICAgICAgICAgcGlwZWxpbmUgKz0gInZpc3VhbGl6YXRpb24gdHlwZT0nIi5jb25jYXQodmlzLnR5cGUubmFtZSwgIidcbiAgICAiKS5jb25jYXQocHJlcGFyZUpzb24oJ3Zpc0NvbmZpZycsIF92aXNDb25maWcpLCAiXG4gICAgbWV0cmljc0F0QWxsTGV2ZWxzPSIpLmNvbmNhdCh2aXMuaXNIaWVyYXJjaGljYWwoKSwgIlxuICAgIHBhcnRpYWxSb3dzPSIpLmNvbmNhdCh2aXMudHlwZS5yZXF1aXJlc1BhcnRpYWxSb3dzIHx8IHZpcy5wYXJhbXMuc2hvd1BhcnRpYWxSb3dzIHx8IGZhbHNlLCAiICIpOwoKICAgICAgICAgICAgaWYgKGluZGV4UGF0dGVybikgewogICAgICAgICAgICAgIHBpcGVsaW5lICs9ICIiLmNvbmNhdChwcmVwYXJlU3RyaW5nKCdpbmRleCcsIGluZGV4UGF0dGVybi5pZCkpOwogICAgICAgICAgICB9CgogICAgICAgICAgY2FzZSAzNjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHBpcGVsaW5lKTsKCiAgICAgICAgICBjYXNlIDM3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gYnVpbGRQaXBlbGluZShfeDUsIF94NikgewogICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0cy5idWlsZFBpcGVsaW5lID0gYnVpbGRQaXBlbGluZTs="},null]}