{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/vis_type_vega/public/vega_view/vega_base_view.js","dependencies":[{"path":"src/legacy/core_plugins/vis_type_vega/public/vega_view/vega_base_view.js","mtime":1572296411708},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmJ5cGFzc0V4dGVybmFsVXJsQ2hlY2sgPSBieXBhc3NFeHRlcm5hbFVybENoZWNrOwpleHBvcnRzLlZlZ2FCYXNlVmlldyA9IHZvaWQgMDsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX2pxdWVyeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgianF1ZXJ5IikpOwoKdmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIm1vbWVudCIpKTsKCnZhciBfZGF0ZW1hdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBlbGFzdGljL2RhdGVtYXRoIikpOwoKdmFyIHZlZ2EgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJ2ZWdhLWxpYiIpKTsKCnZhciB2ZWdhTGl0ZSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInZlZ2EtbGl0ZSIpKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCIuLi9kYXRhX21vZGVsL3V0aWxzIik7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3ZlZ2FfdG9vbHRpcCA9IHJlcXVpcmUoIi4vdmVnYV90b29sdGlwIik7Cgp2YXIgX2VzUXVlcnkgPSByZXF1aXJlKCJAa2JuL2VzLXF1ZXJ5Iik7Cgp2YXIgX3ZlZ2FfY29uZmlnX3Byb3ZpZGVyID0gcmVxdWlyZSgiLi4vaGVscGVycy92ZWdhX2NvbmZpZ19wcm92aWRlciIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmVnYS5zY2hlbWUoJ2VsYXN0aWMnLCBfZXVpLlZJU1VBTElaQVRJT05fQ09MT1JTKTsgLy8gVmVnYSdzIGV4dGVuc2lvbiBmdW5jdGlvbnMgYXJlIGdsb2JhbC4gV2hlbiBjYWxsZWQsCi8vIHdlIGZvcndhcmQgZXhlY3V0aW9uIHRvIHRoZSBpbnN0YW5jZS1zcGVjaWZpYyBoYW5kbGVyCi8vIFRoaXMgZnVuY3Rpb25zIG11c3QgYmUgZGVjbGFyZWQgaW4gdGhlIFZlZ2FCYXNlVmlldyBjbGFzcwoKdmFyIHZlZ2FGdW5jdGlvbnMgPSB7CiAga2liYW5hQWRkRmlsdGVyOiAnYWRkRmlsdGVySGFuZGxlcicsCiAga2liYW5hUmVtb3ZlRmlsdGVyOiAncmVtb3ZlRmlsdGVySGFuZGxlcicsCiAga2liYW5hUmVtb3ZlQWxsRmlsdGVyczogJ3JlbW92ZUFsbEZpbHRlcnNIYW5kbGVyJywKICBraWJhbmFTZXRUaW1lRmlsdGVyOiAnc2V0VGltZUZpbHRlckhhbmRsZXInCn07Cgp2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHsKICB2YXIgZnVuY05hbWUgPSBfT2JqZWN0JGtleXNbX2ldOwoKICBpZiAoIXZlZ2EuZXhwcmVzc2lvbkZ1bmN0aW9uKGZ1bmNOYW1lKSkgewogICAgdmVnYS5leHByZXNzaW9uRnVuY3Rpb24oZnVuY05hbWUsIGZ1bmN0aW9uIGhhbmRsZXJGd2QoKSB7CiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTsKICAgICAgfQoKICAgICAgdmFyIHZpZXcgPSB0aGlzLmNvbnRleHQuZGF0YWZsb3c7CiAgICAgIHZpZXcucnVuQWZ0ZXIoZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfdmlldyRfa2liYW5hVmlldzsKCiAgICAgICAgcmV0dXJuIChfdmlldyRfa2liYW5hVmlldyA9IHZpZXcuX2tpYmFuYVZpZXcpLnZlZ2FGdW5jdGlvbnNIYW5kbGVyLmFwcGx5KF92aWV3JF9raWJhbmFWaWV3LCBbZnVuY05hbWVdLmNvbmNhdChhcmdzKSk7CiAgICAgIH0pOwogICAgfSk7CiAgfQp9OwoKZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyh2ZWdhRnVuY3Rpb25zKTsgX2kgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaSsrKSB7CiAgX2xvb3AoKTsKfQoKdmFyIGJ5cGFzc1Rva2VuID0gU3ltYm9sKCk7CgpmdW5jdGlvbiBieXBhc3NFeHRlcm5hbFVybENoZWNrKHVybCkgewogIC8vIHByb2Nlc3NlZCBpbiB0aGUgIGxvYWRlci5zYW5pdGl6ZSAgYmVsb3cKICByZXR1cm4gewogICAgdXJsOiB1cmwsCiAgICBieXBhc3NUb2tlbjogYnlwYXNzVG9rZW4KICB9Owp9Cgp2YXIgVmVnYUJhc2VWaWV3ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gVmVnYUJhc2VWaWV3KG9wdHMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBWZWdhQmFzZVZpZXcpOwoKICAgIHRoaXMuXyRwYXJlbnRFbCA9ICgwLCBfanF1ZXJ5LmRlZmF1bHQpKG9wdHMucGFyZW50RWwpOwogICAgdGhpcy5fcGFyc2VyID0gb3B0cy52ZWdhUGFyc2VyOwogICAgdGhpcy5fc2VydmljZVNldHRpbmdzID0gb3B0cy5zZXJ2aWNlU2V0dGluZ3M7CiAgICB0aGlzLl9xdWVyeWZpbHRlciA9IG9wdHMucXVlcnlmaWx0ZXI7CiAgICB0aGlzLl90aW1lZmlsdGVyID0gb3B0cy50aW1lZmlsdGVyOwogICAgdGhpcy5fZmluZEluZGV4ID0gb3B0cy5maW5kSW5kZXg7CiAgICB0aGlzLl92aWV3ID0gbnVsbDsKICAgIHRoaXMuX3ZlZ2FWaWV3Q29uZmlnID0gbnVsbDsKICAgIHRoaXMuXyRtZXNzYWdlcyA9IG51bGw7CiAgICB0aGlzLl9kZXN0cm95SGFuZGxlcnMgPSBbXTsKICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7CiAgICB0aGlzLl9lbmFibGVFeHRlcm5hbFVybHMgPSAoMCwgX3ZlZ2FfY29uZmlnX3Byb3ZpZGVyLmdldEVuYWJsZUV4dGVybmFsVXJscykoKTsKICB9CgogIF9jcmVhdGVDbGFzcyhWZWdhQmFzZVZpZXcsIFt7CiAgICBrZXk6ICJpbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaW5pdCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24sIF9kaWRJdGVyYXRvckVycm9yLCBfaXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yLCBfc3RlcCwgd2FybjsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pbml0aWFsaXplZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIC8vIHNhZmV0eQogICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM7CgogICAgICAgICAgICAgICAgdGhpcy5fJHBhcmVudEVsLmVtcHR5KCkuYWRkQ2xhc3MoInZnYVZpcyIpLmNzcygnZmxleC1kaXJlY3Rpb24nLCB0aGlzLl9wYXJzZXIuY29udGFpbmVyRGlyKTsgLy8gYnlwYXNzIHRoZSBvbldhcm4gd2FybmluZyBjaGVja3MgLSBpbiBzb21lIGNhc2VzIHdhcm5pbmdzIG1heSBzdGlsbCBuZWVkIHRvIGJlIHNob3duIGRlc3BpdGUgYmVpbmcgZGlzYWJsZWQKCgogICAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7CiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gODsKCiAgICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvciA9IHRoaXMuX3BhcnNlci53YXJuaW5nc1tTeW1ib2wuaXRlcmF0b3JdKCk7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICB3YXJuID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKCd3YXJuJywgd2Fybik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDgpOwogICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNjsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNzsKCiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybiAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOTsKCiAgICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE5KTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5maW5pc2goMTYpOwoKICAgICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXJzZXIuZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKCdlcnInLCB0aGlzLl9wYXJzZXIuZXJyb3IpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwoKICAgICAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICAgICAgdGhpcy5fJGNvbnRhaW5lciA9ICgwLCBfanF1ZXJ5LmRlZmF1bHQpKCc8ZGl2IGNsYXNzPSJ2Z2FWaXNfX3ZpZXciPicpIC8vIEZvcmNlIGEgaGVpZ2h0IGhlcmUgYmVjYXVzZSBjc3MgaXMgbm90IGxvYWRlZCBpbiBtb2NoYSB0ZXN0CiAgICAgICAgICAgICAgICAuY3NzKCdoZWlnaHQnLCAnMTAwJScpLmFwcGVuZFRvKHRoaXMuXyRwYXJlbnRFbCk7CiAgICAgICAgICAgICAgICB0aGlzLl8kY29udHJvbHMgPSAoMCwgX2pxdWVyeS5kZWZhdWx0KSgiPGRpdiBjbGFzcz1cInZnYVZpc19fY29udHJvbHMgdmdhVmlzX19jb250cm9scy0tIi5jb25jYXQodGhpcy5fcGFyc2VyLmNvbnRyb2xzRGlyLCAiXCI+IikpLmFwcGVuZFRvKHRoaXMuXyRwYXJlbnRFbCk7CgogICAgICAgICAgICAgICAgdGhpcy5fYWRkRGVzdHJveUhhbmRsZXIoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuXyRjb250YWluZXIpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5fJGNvbnRhaW5lci5yZW1vdmUoKTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuXyRjb250YWluZXIgPSBudWxsOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuXyRjb250cm9scykgewogICAgICAgICAgICAgICAgICAgIF90aGlzLl8kY29udHJvbHMucmVtb3ZlKCk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLl8kY29udHJvbHMgPSBudWxsOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuXyRtZXNzYWdlcykgewogICAgICAgICAgICAgICAgICAgIF90aGlzLl8kbWVzc2FnZXMucmVtb3ZlKCk7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLl8kbWVzc2FnZXMgPSBudWxsOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3ZpZXcpIHsKICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdmlldy5maW5hbGl6ZSgpOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBfdGhpcy5fdmlldyA9IG51bGw7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICB0aGlzLl92ZWdhVmlld0NvbmZpZyA9IHRoaXMuY3JlYXRlVmlld0NvbmZpZygpOyAvLyBUaGUgZGVyaXZlZCBjbGFzcyBzaG91bGQgY3JlYXRlIHRoaXMgbWV0aG9kCgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luaXRWaWV3Q3VzdG9taXphdGlvbnMoKTsKCiAgICAgICAgICAgICAgY2FzZSAzMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM1OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dFsiY2F0Y2giXSgzKTsKICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihfY29udGV4dC50MSk7CgogICAgICAgICAgICAgIGNhc2UgMzg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzMsIDM1XSwgWzgsIDEyLCAxNiwgMjRdLCBbMTcsLCAxOSwgMjNdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgICAgcmV0dXJuIF9pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbml0OwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY3JlYXRlVmlld0NvbmZpZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVmlld0NvbmZpZygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgY29uZmlnID0gewogICAgICAgIGxvZ0xldmVsOiB2ZWdhLldhcm4sCiAgICAgICAgcmVuZGVyZXI6IHRoaXMuX3BhcnNlci5yZW5kZXJlcgogICAgICB9OyAvLyBPdmVycmlkZSBVUkwgc2FuaXRpemVyIHRvIHByZXZlbnQgZXh0ZXJuYWwgZGF0YSBsb2FkaW5nIChpZiBkaXNhYmxlZCkKCiAgICAgIHZhciBsb2FkZXIgPSB2ZWdhLmxvYWRlcigpOwogICAgICB2YXIgb3JpZ2luYWxTYW5pdGl6ZSA9IGxvYWRlci5zYW5pdGl6ZS5iaW5kKGxvYWRlcik7CgogICAgICBsb2FkZXIuc2FuaXRpemUgPSBmdW5jdGlvbiAodXJpLCBvcHRpb25zKSB7CiAgICAgICAgaWYgKHVyaS5ieXBhc3NUb2tlbiA9PT0gYnlwYXNzVG9rZW4pIHsKICAgICAgICAgIC8vIElmIHVyaSBoYXMgYSBieXBhc3MgdG9rZW4sIHRoZSB1cmkgd2FzIGVuY29kZWQgYnkgYnlwYXNzRXh0ZXJuYWxVcmxDaGVjaygpIGFib3ZlLgogICAgICAgICAgLy8gYmVjYXVzZSB1c2VyIGNhbiBvbmx5IHN1cHBseSBwdXJlIEpTT04gZGF0YSBzdHJ1Y3R1cmUuCiAgICAgICAgICB1cmkgPSB1cmkudXJsOwogICAgICAgIH0gZWxzZSBpZiAoIV90aGlzMi5fZW5hYmxlRXh0ZXJuYWxVcmxzKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLnZlZ2FQYXJzZXIuYmFzZVZpZXcuZXh0ZXJuYWxVcmxzQXJlTm90RW5hYmxlZEVycm9yTWVzc2FnZScsIHsKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdFeHRlcm5hbCBVUkxzIGFyZSBub3QgZW5hYmxlZC4gQWRkICAge2VuYWJsZUV4dGVybmFsVXJsc30gICB0byB7a2liYW5hQ29uZmlnRmlsZU5hbWV9JywKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgZW5hYmxlRXh0ZXJuYWxVcmxzOiAndmVnYS5lbmFibGVFeHRlcm5hbFVybHM6IHRydWUnLAogICAgICAgICAgICAgIGtpYmFuYUNvbmZpZ0ZpbGVOYW1lOiAna2liYW5hLnltbCcKICAgICAgICAgICAgfQogICAgICAgICAgfSkpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIG9yaWdpbmFsU2FuaXRpemUodXJpLCBvcHRpb25zKTsKICAgICAgfTsKCiAgICAgIGNvbmZpZy5sb2FkZXIgPSBsb2FkZXI7CiAgICAgIHJldHVybiBjb25maWc7CiAgICB9CiAgfSwgewogICAga2V5OiAib25FcnJvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25FcnJvcigpIHsKICAgICAgdGhpcy5fYWRkTWVzc2FnZSgnZXJyJywgX3V0aWxzLlV0aWxzLmZvcm1hdEVycm9yVG9TdHIuYXBwbHkoX3V0aWxzLlV0aWxzLCBhcmd1bWVudHMpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvbldhcm4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uV2FybigpIHsKICAgICAgaWYgKCF0aGlzLl9wYXJzZXIgfHwgIXRoaXMuX3BhcnNlci5oaWRlV2FybmluZ3MpIHsKICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKCd3YXJuJywgX3V0aWxzLlV0aWxzLmZvcm1hdFdhcm5pbmdUb1N0ci5hcHBseShfdXRpbHMuVXRpbHMsIGFyZ3VtZW50cykpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX2FkZE1lc3NhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRNZXNzYWdlKHR5cGUsIHRleHQpIHsKICAgICAgaWYgKCF0aGlzLl8kbWVzc2FnZXMpIHsKICAgICAgICB0aGlzLl8kbWVzc2FnZXMgPSAoMCwgX2pxdWVyeS5kZWZhdWx0KSgiPHVsIGNsYXNzPVwidmdhVmlzX19tZXNzYWdlc1wiPiIpLmFwcGVuZFRvKHRoaXMuXyRwYXJlbnRFbCk7CiAgICAgIH0KCiAgICAgIHRoaXMuXyRtZXNzYWdlcy5hcHBlbmQoKDAsIF9qcXVlcnkuZGVmYXVsdCkoIjxsaSBjbGFzcz1cInZnYVZpc19fbWVzc2FnZSB2Z2FWaXNfX21lc3NhZ2UtLSIuY29uY2F0KHR5cGUsICJcIj4iKSkuYXBwZW5kKCgwLCBfanF1ZXJ5LmRlZmF1bHQpKCI8cHJlIGNsYXNzPVwidmdhVmlzX19tZXNzYWdlQ29kZVwiPiIpLnRleHQodGV4dCkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXNpemUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHsKICAgICAgaWYgKHRoaXMuX3BhcnNlci51c2VSZXNpemUgJiYgdGhpcy5fdmlldyAmJiB0aGlzLnVwZGF0ZVZlZ2FTaXplKHRoaXMuX3ZpZXcpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXcucnVuQXN5bmMoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInVwZGF0ZVZlZ2FTaXplIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVWZWdhU2l6ZSh2aWV3KSB7CiAgICAgIC8vIEZvciBzb21lIHJlYXNvbiB0aGUgb2JqZWN0IGlzIHNsaWdodGx5IHNjcm9sbGFibGUgd2l0aG91dCB0aGUgZXh0cmEgcGFkZGluZy4KICAgICAgLy8gVGhpcyBtaWdodCBiZSBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvaXNzdWVzLzM4MDgKICAgICAgLy8gV2hpY2ggaXMgYmVpbmcgZml4ZWQgYXMgcGFydCBvZiBqUXVlcnkgMy4zLjAKICAgICAgdmFyIGhlaWdodEV4dHJhUGFkZGluZyA9IDY7CiAgICAgIHZhciB3aWR0aCA9IE1hdGgubWF4KDAsIHRoaXMuXyRjb250YWluZXIud2lkdGgoKSAtIHRoaXMuX3BhcnNlci5wYWRkaW5nV2lkdGgpOwogICAgICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoMCwgdGhpcy5fJGNvbnRhaW5lci5oZWlnaHQoKSAtIHRoaXMuX3BhcnNlci5wYWRkaW5nSGVpZ2h0KSAtIGhlaWdodEV4dHJhUGFkZGluZzsgLy8gU29tZWhvdyB0aGUgYGhlaWdodGAgc2lnbmFsIGluIHZlZ2EgYmVjb21lcyB6ZXJvIGlmIHRoZSBoZWlnaHQgaXMgc2V0IGV4YWN0bHkgdG8KICAgICAgLy8gYW4gZXZlbiBudW1iZXIuIFRoaXMgaXMgYSBkaXJ0eSB3b3JrYXJvdW5kIGZvciB0aGlzLgogICAgICAvLyB3aGVuIHZlZ2EgaXRzZWxmIGlzIHVwZGF0ZWQgYWdhaW4sIGl0IHNob3VsZCBiZSBjaGVja2VkIHdoZXRoZXIgdGhpcyBpcyBzdGlsbAogICAgICAvLyBuZWNlc3NhcnkuCgogICAgICB2YXIgYWRqdXN0ZWRIZWlnaHQgPSBoZWlnaHQgKyAwLjAwMDAwMDAxOwoKICAgICAgaWYgKHZpZXcud2lkdGgoKSAhPT0gd2lkdGggfHwgdmlldy5oZWlnaHQoKSAhPT0gYWRqdXN0ZWRIZWlnaHQpIHsKICAgICAgICB2aWV3LndpZHRoKHdpZHRoKS5oZWlnaHQoYWRqdXN0ZWRIZWlnaHQpOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0VmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Vmlldyh2aWV3KSB7CiAgICAgIGlmICh0aGlzLl92aWV3ID09PSB2aWV3KSByZXR1cm47CgogICAgICBpZiAodGhpcy5fdmlldykgewogICAgICAgIHRoaXMuX3ZpZXcuZmluYWxpemUoKTsKICAgICAgfQoKICAgICAgdGhpcy5fdmlldyA9IHZpZXc7CgogICAgICBpZiAodmlldykgewogICAgICAgIC8vIEdsb2JhbCB2ZWdhIGV4cHJlc3Npb24gaGFuZGxlciB1c2VzIGl0IHRvIGNhbGwgY3VzdG9tIGZ1bmN0aW9ucwogICAgICAgIHZpZXcuX2tpYmFuYVZpZXcgPSB0aGlzOwoKICAgICAgICBpZiAodGhpcy5fcGFyc2VyLnRvb2x0aXBzKSB7CiAgICAgICAgICAvLyBwb3NpdGlvbiBhbmQgcGFkZGluZyBjYW4gYmUgc3BlY2lmaWVkIHdpdGgKICAgICAgICAgIC8vIHtjb25maWc6e2tpYmFuYTp7dG9vbHRpcHM6IHtwb3NpdGlvbjogJ3RvcCcsIHBhZGRpbmc6IDE1IH0gfX19CiAgICAgICAgICB2YXIgdHRoYW5kbGVyID0gbmV3IF92ZWdhX3Rvb2x0aXAuVG9vbHRpcEhhbmRsZXIodGhpcy5fJGNvbnRhaW5lclswXSwgdmlldywgdGhpcy5fcGFyc2VyLnRvb2x0aXBzKTsgLy8gVmVnYSBidWcgd29ya2Fyb3VuZCAtIG5lZWQgdG8gZGVzdHJveSB0b29sdGlwIGJ5IGhhbmQKCiAgICAgICAgICB0aGlzLl9hZGREZXN0cm95SGFuZGxlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB0dGhhbmRsZXIuaGlkZVRvb2x0aXAoKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHZpZXcucnVuQXN5bmMoKTsgLy8gQWxsb3dzIGNhbGxlcnMgdG8gYXdhaXQgcmVuZGVyaW5nCiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogSGFuZGxlCiAgICAgKiBAcGFyYW0gZnVuY05hbWUKICAgICAqIEBwYXJhbSBhcmdzCiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJ2ZWdhRnVuY3Rpb25zSGFuZGxlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3ZlZ2FGdW5jdGlvbnNIYW5kbGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZnVuY05hbWUpIHsKICAgICAgICB2YXIgaGFuZGxlckZ1bmMsCiAgICAgICAgICAgIF9sZW4sCiAgICAgICAgICAgIGFyZ3MsCiAgICAgICAgICAgIF9rZXksCiAgICAgICAgICAgIF9hcmdzMiA9IGFyZ3VtZW50czsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIGhhbmRsZXJGdW5jID0gdmVnYUZ1bmN0aW9uc1tmdW5jTmFtZV07CgogICAgICAgICAgICAgICAgaWYgKCEoIWhhbmRsZXJGdW5jIHx8ICF0aGlzW2hhbmRsZXJGdW5jXSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoX2kxOG4uaTE4bi50cmFuc2xhdGUoJ3Zpc1R5cGVWZWdhLnZlZ2FQYXJzZXIuYmFzZVZpZXcuZnVuY3Rpb25Jc05vdERlZmluZWRGb3JHcmFwaEVycm9yTWVzc2FnZScsIHsKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICd7ZnVuY05hbWV9IGlzIG5vdCBkZWZpbmVkIGZvciB0aGlzIGdyYXBoJywKICAgICAgICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgICAgICAgZnVuY05hbWU6ICIiLmNvbmNhdChmdW5jTmFtZSwgIigpIikKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBmb3IgKF9sZW4gPSBfYXJnczIubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBfYXJnczJbX2tleV07CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbaGFuZGxlckZ1bmNdLmFwcGx5KHRoaXMsIGFyZ3MpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gOTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihfY29udGV4dDIudDApOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzLCBbWzAsIDldXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHZlZ2FGdW5jdGlvbnNIYW5kbGVyKF94KSB7CiAgICAgICAgcmV0dXJuIF92ZWdhRnVuY3Rpb25zSGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gdmVnYUZ1bmN0aW9uc0hhbmRsZXI7CiAgICB9KCkKICAgIC8qKgogICAgICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5IEVsYXN0aWMgUXVlcnkgRFNMIHNuaXBwZXQsIGFzIHVzZWQgaW4gdGhlIHF1ZXJ5IERTTCBlZGl0b3IKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbaW5kZXhdIGFzIGRlZmluZWQgaW4gS2liYW5hLCBvciBkZWZhdWx0IGlmIG1pc3NpbmcKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJhZGRGaWx0ZXJIYW5kbGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfYWRkRmlsdGVySGFuZGxlciA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHF1ZXJ5LCBpbmRleCkgewogICAgICAgIHZhciBpbmRleElkLCBmaWx0ZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9maW5kSW5kZXgoaW5kZXgpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBpbmRleElkID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICBmaWx0ZXIgPSAoMCwgX2VzUXVlcnkuYnVpbGRRdWVyeUZpbHRlcikocXVlcnksIGluZGV4SWQpOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5ZmlsdGVyLmFkZEZpbHRlcnMoZmlsdGVyKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYWRkRmlsdGVySGFuZGxlcihfeDIsIF94MykgewogICAgICAgIHJldHVybiBfYWRkRmlsdGVySGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gYWRkRmlsdGVySGFuZGxlcjsKICAgIH0oKQogICAgLyoqCiAgICAgKiBAcGFyYW0ge29iamVjdH0gcXVlcnkgRWxhc3RpYyBRdWVyeSBEU0wgc25pcHBldCwgYXMgdXNlZCBpbiB0aGUgcXVlcnkgRFNMIGVkaXRvcgogICAgICogQHBhcmFtIHtzdHJpbmd9IFtpbmRleF0gYXMgZGVmaW5lZCBpbiBLaWJhbmEsIG9yIGRlZmF1bHQgaWYgbWlzc2luZwogICAgICovCgogIH0sIHsKICAgIGtleTogInJlbW92ZUZpbHRlckhhbmRsZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZW1vdmVGaWx0ZXJIYW5kbGVyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQocXVlcnksIGluZGV4KSB7CiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICAgIHZhciAkaW5qZWN0b3IsIGluZGV4SWQsIGZpbHRlcjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jaHJvbWUuZGVmYXVsdC5kYW5nZXJvdXNseUdldEFjdGl2ZUluamVjdG9yKCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICRpbmplY3RvciA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRJbmRleChpbmRleCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGluZGV4SWQgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIGZpbHRlciA9ICgwLCBfZXNRdWVyeS5idWlsZFF1ZXJ5RmlsdGVyKShxdWVyeSwgaW5kZXhJZCk7IC8vIFRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciB0aGUgaHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMva2liYW5hL2lzc3Vlcy8xODg2MwogICAgICAgICAgICAgICAgLy8gT25jZSBmaXhlZCwgcmVwbGFjZSB3aXRoIGEgZGlyZWN0IGNhbGwgKG5vIGF3YWl0IGlzIG5lZWRlZCBiZWNhdXNlIGl0cyBub3QgYXN5bmMpCiAgICAgICAgICAgICAgICAvLyAgdGhpcy5fcXVlcnlmaWx0ZXIucmVtb3ZlRmlsdGVyKGZpbHRlcik7CgogICAgICAgICAgICAgICAgJGluamVjdG9yLmdldCgnJHJvb3RTY29wZScpLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIF90aGlzMy5fcXVlcnlmaWx0ZXIucmVtb3ZlRmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICAgICAgICAgIF90aGlzMy5vbkVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZW1vdmVGaWx0ZXJIYW5kbGVyKF94NCwgX3g1KSB7CiAgICAgICAgcmV0dXJuIF9yZW1vdmVGaWx0ZXJIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZW1vdmVGaWx0ZXJIYW5kbGVyOwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVtb3ZlQWxsRmlsdGVyc0hhbmRsZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUFsbEZpbHRlcnNIYW5kbGVyKCkgewogICAgICB0aGlzLl9xdWVyeWZpbHRlci5yZW1vdmVBbGwoKTsKICAgIH0KICAgIC8qKgogICAgICogVXBkYXRlIGRhc2hib2FyZCB0aW1lIGZpbHRlciB0byB0aGUgbmV3IHZhbHVlcwogICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfERhdGV9IHN0YXJ0CiAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8RGF0ZX0gZW5kCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2V0VGltZUZpbHRlckhhbmRsZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRpbWVGaWx0ZXJIYW5kbGVyKHN0YXJ0LCBlbmQpIHsKICAgICAgdGhpcy5fdGltZWZpbHRlci5zZXRUaW1lKFZlZ2FCYXNlVmlldy5fcGFyc2VUaW1lUmFuZ2Uoc3RhcnQsIGVuZCkpOwogICAgfQogICAgLyoqCiAgICAgKiBQYXJzZSBzdGFydCBhbmQgZW5kIHZhbHVlcywgZGV0ZXJtaW5pbmcgdGhlIG1vZGUsIGFuZCBpZiBvcmRlciBzaG91bGQgYmUgcmV2ZXJzZWQKICAgICAqIEBwcml2YXRlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2V0RGVidWdWYWx1ZXMiLAoKICAgIC8qKgogICAgICogU2V0IGdsb2JhbCBkZWJ1ZyB2YXJpYWJsZSB0byBzaW1wbGlmeSB2ZWdhIGRlYnVnZ2luZyBpbiBjb25zb2xlLiBTaG93IGluZm8gbWVzc2FnZSBmaXJzdCB0aW1lCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREZWJ1Z1ZhbHVlcyh2aWV3LCBzcGVjLCB2bHNwZWMpIHsKICAgICAgaWYgKHdpbmRvdykgewogICAgICAgIGlmICh3aW5kb3cuVkVHQV9ERUJVRyA9PT0gdW5kZWZpbmVkICYmIGNvbnNvbGUpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCclY1dlbGNvbWUgdG8gS2liYW5hIFZlZ2EgUGx1Z2luIScsICdmb250LXNpemU6IDE2cHg7IGZvbnQtd2VpZ2h0OiBib2xkOycpOwogICAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjYW4gYWNjZXNzIHRoZSBWZWdhIHZpZXcgd2l0aCBWRUdBX0RFQlVHLiAnICsgJ0xlYXJuIG1vcmUgYXQgaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhL2RvY3MvYXBpL2RlYnVnZ2luZy8uJyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgZGVidWdPYmogPSB7fTsKICAgICAgICB3aW5kb3cuVkVHQV9ERUJVRyA9IGRlYnVnT2JqOwogICAgICAgIHdpbmRvdy5WRUdBX0RFQlVHLlZFR0FfVkVSU0lPTiA9IHZlZ2EudmVyc2lvbjsKICAgICAgICB3aW5kb3cuVkVHQV9ERUJVRy5WRUdBX0xJVEVfVkVSU0lPTiA9IHZlZ2FMaXRlLnZlcnNpb247CiAgICAgICAgd2luZG93LlZFR0FfREVCVUcudmlldyA9IHZpZXc7CiAgICAgICAgd2luZG93LlZFR0FfREVCVUcudmVnYV9zcGVjID0gc3BlYzsKICAgICAgICB3aW5kb3cuVkVHQV9ERUJVRy52ZWdhbGl0ZV9zcGVjID0gdmxzcGVjOyAvLyBPbiBkaXNwb3NlLCBjbGVhbiB1cCwgYnV0IGRvbid0IHVzZSB1bmRlZmluZWQgdG8gcHJldmVudCByZXBlYXRlZCBkZWJ1ZyBzdGF0ZW1lbnRzCgogICAgICAgIHRoaXMuX2FkZERlc3Ryb3lIYW5kbGVyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmIChkZWJ1Z09iaiA9PT0gd2luZG93LlZFR0FfREVCVUcpIHsKICAgICAgICAgICAgd2luZG93LlZFR0FfREVCVUcgPSBudWxsOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgLy8gcHJvcGVybHkgaGFuZGxlIG11bHRpcGxlIGRlc3Ryb3koKSBjYWxscyBieSBjb252ZXJ0aW5nIHRoaXMuX2Rlc3Ryb3lIYW5kbGVycwogICAgICAvLyBpbnRvIHRoZSBfb25nb2luZ0Rlc3Ryb3kgcHJvbWlzZSwgd2hpbGUgaGFuZGxlcnMgYXJlIGJlaW5nIGRpc3Bvc2VkCiAgICAgIGlmICh0aGlzLl9kZXN0cm95SGFuZGxlcnMpIHsKICAgICAgICAvLyBJZiBubyBkZXN0cm95IGlzIHlldCBydW5uaW5nLCBleGVjdXRlIGFsbCBoYW5kbGVycyBhbmQgd2FpdCBmb3IgYWxsIG9mIHRoZW0gdG8gcmVzb2x2ZS4KICAgICAgICB0aGlzLl9vbmdvaW5nRGVzdHJveSA9IFByb21pc2UuYWxsKHRoaXMuX2Rlc3Ryb3lIYW5kbGVycy5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgICAgIHJldHVybiB2KCk7CiAgICAgICAgfSkpOwogICAgICAgIHRoaXMuX2Rlc3Ryb3lIYW5kbGVycyA9IG51bGw7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl9vbmdvaW5nRGVzdHJveTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfYWRkRGVzdHJveUhhbmRsZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGREZXN0cm95SGFuZGxlcihoYW5kbGVyKSB7CiAgICAgIC8vIElmIGRpc3Bvc2luZyBoYXNuJ3Qgc3RhcnRlZCB5ZXQsIGVucXVldWUgaXQsIG90aGVyd2lzZSBkaXNwb3NlIHJpZ2h0IGF3YXkKICAgICAgLy8gVGhpcyBjcmVhdGVzIGEgbWlub3IgaXNzdWUgLSBpZiBkaXNwb3NpbmcgaGFzIHN0YXJ0ZWQgYnV0IG5vdCB5ZXQgZmluaXNoZWQsCiAgICAgIC8vIGFuZCB3ZSBkaXNwb3NlIHRoZSBuZXcgaGFuZGxlciByaWdodCBhd2F5LCB0aGUgZGVzdHJveSgpIGRvZXMgbm90IHdhaXQgZm9yIGl0LgogICAgICAvLyBUaGlzIGJlaGF2aW9yIGlzIG5vIGRpZmZlcmVudCBmcm9tIHRoZSBjYXNlIHdoZW4gZGlzcG9zaW5nIGhhcyBhbHJlYWR5IGNvbXBsZXRlZCwKICAgICAgLy8gc28gaXQgc2hvdWxkbid0IGNyZWF0ZSBhbnkgaXNzdWVzLgogICAgICBpZiAodGhpcy5fZGVzdHJveUhhbmRsZXJzKSB7CiAgICAgICAgdGhpcy5fZGVzdHJveUhhbmRsZXJzLnB1c2goaGFuZGxlcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaGFuZGxlcigpOwogICAgICB9CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJfcGFyc2VUaW1lUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wYXJzZVRpbWVSYW5nZShzdGFydCwgZW5kKSB7CiAgICAgIHZhciBhYnNTdGFydCA9ICgwLCBfbW9tZW50LmRlZmF1bHQpKHN0YXJ0KTsKICAgICAgdmFyIGFic0VuZCA9ICgwLCBfbW9tZW50LmRlZmF1bHQpKGVuZCk7CiAgICAgIHZhciBpc1ZhbGlkQWJzU3RhcnQgPSBhYnNTdGFydC5pc1ZhbGlkKCk7CiAgICAgIHZhciBpc1ZhbGlkQWJzRW5kID0gYWJzRW5kLmlzVmFsaWQoKTsKICAgICAgdmFyIG1vZGUgPSAnYWJzb2x1dGUnOwogICAgICB2YXIgZnJvbTsKICAgICAgdmFyIHRvOwogICAgICB2YXIgcmV2ZXJzZTsKCiAgICAgIGlmIChpc1ZhbGlkQWJzU3RhcnQgJiYgaXNWYWxpZEFic0VuZCkgewogICAgICAgIC8vIEJvdGggYXJlIHZhbGlkIGFic29sdXRlIGRhdGVzLgogICAgICAgIGZyb20gPSBhYnNTdGFydDsKICAgICAgICB0byA9IGFic0VuZDsKICAgICAgICByZXZlcnNlID0gYWJzU3RhcnQuaXNBZnRlcihhYnNFbmQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFRyeSB0byBwYXJzZSBhcyByZWxhdGl2ZSBkYXRlcyB0b28gKGFic29sdXRlIGRhdGVzIHdpbGwgYWxzbyBiZSBhY2NlcHRlZCkKICAgICAgICB2YXIgc3RhcnREYXRlID0gX2RhdGVtYXRoLmRlZmF1bHQucGFyc2Uoc3RhcnQpOwoKICAgICAgICB2YXIgZW5kRGF0ZSA9IF9kYXRlbWF0aC5kZWZhdWx0LnBhcnNlKGVuZCk7CgogICAgICAgIGlmICghc3RhcnREYXRlIHx8ICFlbmREYXRlIHx8ICFzdGFydERhdGUuaXNWYWxpZCgpIHx8ICFlbmREYXRlLmlzVmFsaWQoKSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKF9pMThuLmkxOG4udHJhbnNsYXRlKCd2aXNUeXBlVmVnYS52ZWdhUGFyc2VyLmJhc2VWaWV3LnRpbWVWYWx1ZXNUeXBlRXJyb3JNZXNzYWdlJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0Vycm9yIHNldHRpbmcgdGltZSBmaWx0ZXI6IGJvdGggdGltZSB2YWx1ZXMgbXVzdCBiZSBlaXRoZXIgcmVsYXRpdmUgb3IgYWJzb2x1dGUgZGF0ZXMuIHtzdGFydH0sIHtlbmR9JywKICAgICAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICAgICAgc3RhcnQ6ICJzdGFydD0iLmNvbmNhdChKU09OLnN0cmluZ2lmeShzdGFydCkpLAogICAgICAgICAgICAgIGVuZDogImVuZD0iLmNvbmNhdChKU09OLnN0cmluZ2lmeShlbmQpKQogICAgICAgICAgICB9CiAgICAgICAgICB9KSk7CiAgICAgICAgfQoKICAgICAgICByZXZlcnNlID0gc3RhcnREYXRlLmlzQWZ0ZXIoZW5kRGF0ZSk7CgogICAgICAgIGlmIChpc1ZhbGlkQWJzU3RhcnQgfHwgaXNWYWxpZEFic0VuZCkgewogICAgICAgICAgLy8gTWl4aW5nIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSAtIHRyZWF0IHRoZW0gYXMgYWJzb2x1dGUKICAgICAgICAgIGZyb20gPSBzdGFydERhdGU7CiAgICAgICAgICB0byA9IGVuZERhdGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIEJvdGggZGF0ZXMgYXJlIHJlbGF0aXZlCiAgICAgICAgICBtb2RlID0gJ3JlbGF0aXZlJzsKICAgICAgICAgIGZyb20gPSBzdGFydDsKICAgICAgICAgIHRvID0gZW5kOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKHJldmVyc2UpIHsKICAgICAgICB2YXIgX3JlZiA9IFt0bywgZnJvbV07CiAgICAgICAgZnJvbSA9IF9yZWZbMF07CiAgICAgICAgdG8gPSBfcmVmWzFdOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIGZyb206IGZyb20sCiAgICAgICAgdG86IHRvLAogICAgICAgIG1vZGU6IG1vZGUKICAgICAgfTsKICAgIH0KICB9XSk7CgogIHJldHVybiBWZWdhQmFzZVZpZXc7Cn0oKTsKCmV4cG9ydHMuVmVnYUJhc2VWaWV3ID0gVmVnYUJhc2VWaWV3Ow=="},null]}