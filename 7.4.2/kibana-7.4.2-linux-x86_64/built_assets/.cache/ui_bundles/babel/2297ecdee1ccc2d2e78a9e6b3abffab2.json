{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/embeddable_api/public/np_ready/public/lib/panel/panel_header/panel_actions/add_panel/add_panel_flyout.js","dependencies":[{"path":"src/legacy/core_plugins/embeddable_api/public/np_ready/public/lib/panel/panel_header/panel_actions/add_panel/add_panel_flyout.js","mtime":1572296409652},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuQWRkUGFuZWxGbHlvdXQgPSB2b2lkIDA7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcmVhY3QgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX2Vycm9ycyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2Vycm9ycyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOwp9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICJbb2JqZWN0IEFyZ3VtZW50c10iKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsKfQoKZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHsKICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7CiAgICAgIGFycjJbaV0gPSBhcnJbaV07CiAgICB9CgogICAgcmV0dXJuIGFycjI7CiAgfQp9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewogIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CiAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsKICB9Cn0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7CiAgcmV0dXJuIENvbnN0cnVjdG9yOwp9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7CiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgewogICAgcmV0dXJuIGNhbGw7CiAgfQoKICByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsKfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgewogICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsKICB9OwogIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7Cn0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgewogIGlmIChzZWxmID09PSB2b2lkIDApIHsKICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7CiAgfQoKICByZXR1cm4gc2VsZjsKfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7CiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsKICAgIGNvbnN0cnVjdG9yOiB7CiAgICAgIHZhbHVlOiBzdWJDbGFzcywKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOwp9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgewogICAgby5fX3Byb3RvX18gPSBwOwogICAgcmV0dXJuIG87CiAgfTsKCiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCnZhciBBZGRQYW5lbEZseW91dCA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoQWRkUGFuZWxGbHlvdXQsIF9SZWFjdCRDb21wb25lbnQpOwoKICBmdW5jdGlvbiBBZGRQYW5lbEZseW91dChwcm9wcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBZGRQYW5lbEZseW91dCk7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQWRkUGFuZWxGbHlvdXQpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJsYXN0VG9hc3QiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInNob3dUb2FzdCIsIGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgIC8vIFRvIGF2b2lkIHRoZSBjbHV0dGVyIG9mIGhhdmluZyB0b2FzdCBtZXNzYWdlcyBjb3ZlciBmbHlvdXQKICAgICAgLy8gY2xvc2UgcHJldmlvdXMgdG9hc3QgbWVzc2FnZSBiZWZvcmUgY3JlYXRpbmcgYSBuZXcgb25lCiAgICAgIGlmIChfdGhpcy5sYXN0VG9hc3QpIHsKICAgICAgICBfdGhpcy5wcm9wcy5ub3RpZmljYXRpb25zLnRvYXN0cy5yZW1vdmUoX3RoaXMubGFzdFRvYXN0KTsKICAgICAgfQoKICAgICAgX3RoaXMubGFzdFRvYXN0ID0gX3RoaXMucHJvcHMubm90aWZpY2F0aW9ucy50b2FzdHMuYWRkU3VjY2Vzcyh7CiAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdlbWJlZGRhYmxlQXBpLmFkZFBhbmVsLnNhdmVkT2JqZWN0QWRkZWRUb0NvbnRhaW5lclN1Y2Nlc3NNZXNzYWdlVGl0bGUnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ3tzYXZlZE9iamVjdE5hbWV9IHdhcyBhZGRlZCcsCiAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgc2F2ZWRPYmplY3ROYW1lOiBuYW1lCiAgICAgICAgICB9CiAgICAgICAgfSksCiAgICAgICAgJ2RhdGEtdGVzdC1zdWJqJzogJ2FkZE9iamVjdFRvQ29udGFpbmVyU3VjY2VzcycKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjcmVhdGVOZXdFbWJlZGRhYmxlIiwKICAgIC8qI19fUFVSRV9fKi8KICAgIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHR5cGUpIHsKICAgICAgICB2YXIgZmFjdG9yeSwgZXhwbGljaXRJbnB1dCwgZW1iZWRkYWJsZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKCk7CgogICAgICAgICAgICAgICAgZmFjdG9yeSA9IF90aGlzLnByb3BzLmdldEZhY3RvcnkodHlwZSk7CgogICAgICAgICAgICAgICAgaWYgKGZhY3RvcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBfZXJyb3JzLkVtYmVkZGFibGVGYWN0b3J5Tm90Rm91bmRFcnJvcih0eXBlKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeS5nZXRFeHBsaWNpdElucHV0KCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGV4cGxpY2l0SW5wdXQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMuY29udGFpbmVyLmFkZE5ld0VtYmVkZGFibGUodHlwZSwgZXhwbGljaXRJbnB1dCk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIGVtYmVkZGFibGUgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChlbWJlZGRhYmxlKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLnNob3dUb2FzdChlbWJlZGRhYmxlLmdldElucHV0KCkudGl0bGUgfHwgJycpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gpIHsKICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkFkZFBhbmVsIiwKICAgIC8qI19fUFVSRV9fKi8KICAgIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoaWQsIHR5cGUsIG5hbWUpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXMucHJvcHMuY29udGFpbmVyLmFkZFNhdmVkT2JqZWN0RW1iZWRkYWJsZSh0eXBlLCBpZCk7CgogICAgICAgICAgICAgICAgX3RoaXMuc2hvd1RvYXN0KG5hbWUpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gKF94MiwgX3gzLCBfeDQpIHsKICAgICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEFkZFBhbmVsRmx5b3V0LCBbewogICAga2V5OiAiZ2V0U2VsZWN0Q3JlYXRlTmV3T3B0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VsZWN0Q3JlYXRlTmV3T3B0aW9ucygpIHsKICAgICAgdmFyIGxpc3QgPSBbewogICAgICAgIHZhbHVlOiAnY3JlYXRlTmV3JywKICAgICAgICBpbnB1dERpc3BsYXk6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAiZW1iZWRkYWJsZUFwaS5hZGRQYW5lbC5jcmVhdGVOZXdEZWZhdWx0T3B0aW9uIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQ3JlYXRlIG5ldyAuLi4iCiAgICAgICAgfSkpCiAgICAgIH1dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX3RvQ29uc3VtYWJsZUFycmF5KHRoaXMucHJvcHMuZ2V0QWxsRmFjdG9yaWVzKCkpLmZpbHRlcihmdW5jdGlvbiAoZmFjdG9yeSkgewogICAgICAgIHJldHVybiBmYWN0b3J5LmlzRWRpdGFibGUoKSAmJiAhZmFjdG9yeS5pc0NvbnRhaW5lclR5cGUgJiYgZmFjdG9yeS5jYW5DcmVhdGVOZXcoKTsKICAgICAgfSkubWFwKGZ1bmN0aW9uIChmYWN0b3J5KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlucHV0RGlzcGxheTogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUZXh0LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICBpZDogImVtYmVkZGFibGVBcGkuYWRkUGFuZWwuY3JlYXRlTmV3IiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJDcmVhdGUgbmV3IHtmYWN0b3J5TmFtZX0iLAogICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICBmYWN0b3J5TmFtZTogZmFjdG9yeS5nZXREaXNwbGF5TmFtZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKSwKICAgICAgICAgIHZhbHVlOiBmYWN0b3J5LnR5cGUsCiAgICAgICAgICAnZGF0YS10ZXN0LXN1YmonOiAiY3JlYXRlTmV3LSIuY29uY2F0KGZhY3RvcnkudHlwZSkKICAgICAgICB9OwogICAgICB9KSkpOwogICAgICByZXR1cm4gbGlzdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgU2F2ZWRPYmplY3RGaW5kZXIgPSB0aGlzLnByb3BzLlNhdmVkT2JqZWN0RmluZGVyOwoKICAgICAgdmFyIHNhdmVkT2JqZWN0c0ZpbmRlciA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFNhdmVkT2JqZWN0RmluZGVyLCB7CiAgICAgICAgb25DaG9vc2U6IHRoaXMub25BZGRQYW5lbCwKICAgICAgICBzYXZlZE9iamVjdE1ldGFEYXRhOiBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5wcm9wcy5nZXRBbGxGYWN0b3JpZXMoKSkuZmlsdGVyKGZ1bmN0aW9uIChlbWJlZGRhYmxlRmFjdG9yeSkgewogICAgICAgICAgcmV0dXJuIEJvb2xlYW4oZW1iZWRkYWJsZUZhY3Rvcnkuc2F2ZWRPYmplY3RNZXRhRGF0YSkgJiYgIWVtYmVkZGFibGVGYWN0b3J5LmlzQ29udGFpbmVyVHlwZTsKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7CiAgICAgICAgICB2YXIgc2F2ZWRPYmplY3RNZXRhRGF0YSA9IF9yZWYzLnNhdmVkT2JqZWN0TWV0YURhdGE7CiAgICAgICAgICByZXR1cm4gc2F2ZWRPYmplY3RNZXRhRGF0YTsKICAgICAgICB9KSwKICAgICAgICBzaG93RmlsdGVyOiB0cnVlLAogICAgICAgIG5vSXRlbXNNZXNzYWdlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnZW1iZWRkYWJsZUFwaS5hZGRQYW5lbC5ub01hdGNoaW5nT2JqZWN0c01lc3NhZ2UnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ05vIG1hdGNoaW5nIG9iamVjdHMgZm91bmQuJwogICAgICAgIH0pCiAgICAgIH0pOwoKICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0LCB7CiAgICAgICAgb3duRm9jdXM6IHRydWUsCiAgICAgICAgb25DbG9zZTogdGhpcy5wcm9wcy5vbkNsb3NlLAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJkYXNoYm9hcmRBZGRQYW5lbCIKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRIZWFkZXIsIHsKICAgICAgICBoYXNCb3JkZXI6IHRydWUKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUaXRsZSwgewogICAgICAgIHNpemU6ICJtIgogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDIiLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAiZW1iZWRkYWJsZUFwaS5hZGRQYW5lbC5UaXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBZGQgcGFuZWxzIgogICAgICB9KSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXRCb2R5LCBudWxsLCBzYXZlZE9iamVjdHNGaW5kZXIpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEZvb3RlciwgbnVsbCwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICBqdXN0aWZ5Q29udGVudDogImZsZXhFbmQiCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICBncm93OiB0cnVlCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3VwZXJTZWxlY3QsIHsKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiY3JlYXRlTmV3IiwKICAgICAgICBvcHRpb25zOiB0aGlzLmdldFNlbGVjdENyZWF0ZU5ld09wdGlvbnMoKSwKICAgICAgICB2YWx1ZU9mU2VsZWN0ZWQ6ICJjcmVhdGVOZXciLAogICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5jcmVhdGVOZXdFbWJlZGRhYmxlKHZhbHVlKTsKICAgICAgICB9CiAgICAgIH0pKSkpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBBZGRQYW5lbEZseW91dDsKfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTsKCmV4cG9ydHMuQWRkUGFuZWxGbHlvdXQgPSBBZGRQYW5lbEZseW91dDs="},null]}