{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/utils/collection.js","dependencies":[{"path":"src/legacy/ui/public/utils/collection.js","mtime":1572296413096},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLm1vdmUgPSBtb3ZlOwpleHBvcnRzLm9yZ2FuaXplQnkgPSBvcmdhbml6ZUJ5OwpleHBvcnRzLnB1c2hBbGwgPSBwdXNoQWxsOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KLyoKICogTGljZW5zZWQgdG8gRWxhc3RpY3NlYXJjaCBCLlYuIHVuZGVyIG9uZSBvciBtb3JlIGNvbnRyaWJ1dG9yCiAqIGxpY2Vuc2UgYWdyZWVtZW50cy4gU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAqIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiByZWdhcmRpbmcgY29weXJpZ2h0CiAqIG93bmVyc2hpcC4gRWxhc3RpY3NlYXJjaCBCLlYuIGxpY2Vuc2VzIHRoaXMgZmlsZSB0byB5b3UgdW5kZXIKICogdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkKICogbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsCiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuCiAqICJBUyBJUyIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWQogKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUKICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucwogKiB1bmRlciB0aGUgTGljZW5zZS4KICovCgovKioKICogbW92ZSBhbiBvYmogZWl0aGVyIHVwIG9yIGRvd24gaW4gdGhlIGNvbGxlY3Rpb24gYnkKICogaW5qZWN0aW5nIGl0IGVpdGhlciBiZWZvcmUvYWZ0ZXIgdGhlIHByZXYvbmV4dCBvYmogdGhhdAogKiBzYXRpc2ZpZWQgdGhlIHF1YWxpZmllcgogKgogKiBvciwganVzdCBmcm9tIG9uZSBpbmRleCB0byBhbm90aGVyLi4uCiAqCiAqIEBwYXJhbSAge2FycmF5fSBvYmpzIC0gdGhlIGxpc3QgdG8gbW92ZSB0aGUgb2JqZWN0IHdpdGhpbgogKiBAcGFyYW0gIHtudW1iZXJ8YW55fSBvYmogLSB0aGUgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIG1vdmVkLCBvciB0aGUgaW5kZXggdGhhdCB0aGUgb2JqZWN0IGlzIGN1cnJlbnRseSBhdAogKiBAcGFyYW0gIHtudW1iZXJ8Ym9vbGVhbn0gYmVsb3cgLSB0aGUgaW5kZXggdG8gbW92ZSB0aGUgb2JqZWN0IHRvLCBvciB3aGV0aGVyIGl0IHNob3VsZCBiZSBtb3ZlZCB1cCBvciBkb3duCiAqIEBwYXJhbSAge2Z1bmN0aW9ufSBxdWFsaWZpZXIgLSBhIGxvZGFzaC15IGNhbGxiYWNrLCBvYmplY3QgPSBfLndoZXJlLCBzdHJpbmcgPSBfLnBsdWNrCiAqIEByZXR1cm4ge2FycmF5fSAtIHRoZSBvYmpzIGFyZ3VtZW50CiAqLwoKCmZ1bmN0aW9uIG1vdmUob2Jqcywgb2JqLCBiZWxvdywgcXVhbGlmaWVyKSB7CiAgdmFyIG9yaWdJID0gX2xvZGFzaC5kZWZhdWx0LmlzTnVtYmVyKG9iaikgPyBvYmogOiBvYmpzLmluZGV4T2Yob2JqKTsKCiAgaWYgKG9yaWdJID09PSAtMSkgewogICAgcmV0dXJuIG9ianM7CiAgfQoKICBpZiAoX2xvZGFzaC5kZWZhdWx0LmlzTnVtYmVyKGJlbG93KSkgewogICAgLy8gbW92ZSB0byBhIHNwZWNpZmljIGluZGV4CiAgICBvYmpzLnNwbGljZShiZWxvdywgMCwgb2Jqcy5zcGxpY2Uob3JpZ0ksIDEpWzBdKTsKICAgIHJldHVybiBvYmpzOwogIH0KCiAgYmVsb3cgPSAhIWJlbG93OwogIHF1YWxpZmllciA9IF9sb2Rhc2guZGVmYXVsdC5jYWxsYmFjayhxdWFsaWZpZXIpOwogIHZhciBhYm92ZSA9ICFiZWxvdzsKICB2YXIgZmluZGVyID0gYmVsb3cgPyBfbG9kYXNoLmRlZmF1bHQuZmluZEluZGV4IDogX2xvZGFzaC5kZWZhdWx0LmZpbmRMYXN0SW5kZXg7IC8vIGZpbmQgdGhlIGluZGV4IG9mIHRoZSBuZXh0L3ByZXZpb3VzIG9iaiB0aGF0IG1lZXRzIHRoZSBxdWFsaWZpY2F0aW9ucwoKICB2YXIgdGFyZ2V0SSA9IGZpbmRlcihvYmpzLCBmdW5jdGlvbiAob3RoZXJBZ2csIG90aGVySSkgewogICAgaWYgKGJlbG93ICYmIG90aGVySSA8PSBvcmlnSSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKGFib3ZlICYmIG90aGVySSA+PSBvcmlnSSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgcmV0dXJuICEhcXVhbGlmaWVyKG90aGVyQWdnLCBvdGhlckkpOwogIH0pOwoKICBpZiAodGFyZ2V0SSA9PT0gLTEpIHsKICAgIHJldHVybiBvYmpzOwogIH0gLy8gcGxhY2UgdGhlIG9iaiBhdCBpdCdzIG5ldyBpbmRleAoKCiAgb2Jqcy5zcGxpY2UodGFyZ2V0SSwgMCwgb2Jqcy5zcGxpY2Uob3JpZ0ksIDEpWzBdKTsKICByZXR1cm4gb2JqczsKfQovKioKICogTGlrZSBfLmdyb3VwQnksIGJ1dCBhbGxvd3Mgc3BlY2lmeWluZyBtdWx0aXBsZSBncm91cHMgZm9yIGEKICogc2luZ2xlIG9iamVjdC4KICoKICogb3JnYW5pemVCeShbeyBhOiBbMSwgMiwgM10gfSwgeyBiOiB0cnVlLCBhOiBbMSwgNF0gfV0sICdhJykKICogLy8gT2JqZWN0IHsxOiBBcnJheVsyXSwgMjogQXJyYXlbMV0sIDM6IEFycmF5WzFdLCA0OiBBcnJheVsxXX0KICoKICogXy5ncm91cEJ5KFt7IGE6IFsxLCAyLCAzXSB9LCB7IGI6IHRydWUsIGE6IFsxLCA0XSB9XSwgJ2EnKQogKiAvLyBPYmplY3QgeycxLDIsMyc6IEFycmF5WzFdLCAnMSw0JzogQXJyYXlbMV19CiAqCiAqIEBwYXJhbSAge2FycmF5fSBjb2xsZWN0aW9uIC0gdGhlIGxpc3Qgb2YgdmFsdWVzIHRvIG9yZ2FuaXplCiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGVpdGhlciBhIHByb3BlcnR5IG5hbWUsIG9yIGEgY2FsbGJhY2suCiAqIEByZXR1cm4ge29iamVjdH0KICovCgoKZnVuY3Rpb24gb3JnYW5pemVCeShjb2xsZWN0aW9uLCBjYWxsYmFjaykgewogIHZhciBidWNrZXRzID0ge307CiAgdmFyIHByb3AgPSB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBmYWxzZSA6IGNhbGxiYWNrOwoKICBmdW5jdGlvbiBhZGQoa2V5LCBvYmopIHsKICAgIGlmICghYnVja2V0c1trZXldKSB7CiAgICAgIGJ1Y2tldHNba2V5XSA9IFtdOwogICAgfQoKICAgIGJ1Y2tldHNba2V5XS5wdXNoKG9iaik7CiAgfQoKICBfbG9kYXNoLmRlZmF1bHQuZWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbiAob2JqKSB7CiAgICB2YXIga2V5cyA9IHByb3AgPT09IGZhbHNlID8gY2FsbGJhY2sob2JqKSA6IG9ialtwcm9wXTsKCiAgICBpZiAoIUFycmF5LmlzQXJyYXkoa2V5cykpIHsKICAgICAgYWRkKGtleXMsIG9iaik7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CgogICAgd2hpbGUgKGxlbmd0aC0tID4gMCkgewogICAgICBhZGQoa2V5c1tsZW5ndGhdLCBvYmopOwogICAgfQogIH0pOwoKICByZXR1cm4gYnVja2V0czsKfQovKioKICogRWZmaWNpZW50IGFuZCBzYWZlIHZlcnNpb24gb2YgW10ucHVzaChkZXN0LCBzb3VyY2UpOwogKgogKiBAcGFyYW0gIHtBcnJheX0gc291cmNlIC0gdGhlIGFycmF5IHRvIHB1bGwgdmFsdWVzIGZyb20KICogQHBhcmFtICB7QXJyYXl9IGRlc3QgICAtIHRoZSBhcnJheSB0byBwdXNoIHZhbHVlcyBpbnRvCiAqIEByZXR1cm4ge0FycmF5fSBkZXN0CiAqLwoKCmZ1bmN0aW9uIHB1c2hBbGwoc291cmNlLCBkZXN0KSB7CiAgdmFyIHN0YXJ0ID0gZGVzdC5sZW5ndGg7CiAgdmFyIGFkZGluZyA9IHNvdXJjZS5sZW5ndGg7IC8vIGFsbG9jYXRlIC0gaHR0cDovL2dvby5nbC9lMmkwUzAKCiAgZGVzdC5sZW5ndGggPSBzdGFydCArIGFkZGluZzsgLy8gZmlsbCBzcGFyc2UgcG9zaXRpb25zCgogIHZhciBpID0gLTE7CgogIHdoaWxlICgrK2kgPCBhZGRpbmcpIHsKICAgIGRlc3Rbc3RhcnQgKyBpXSA9IHNvdXJjZVtpXTsKICB9CgogIHJldHVybiBkZXN0Owp9"},null]}