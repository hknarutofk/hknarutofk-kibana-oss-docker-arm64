{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/directives/saved_object_finder.js","dependencies":[{"path":"src/legacy/ui/public/directives/saved_object_finder.js","mtime":1572296412572},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfcmlzb25Ob2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyaXNvbi1ub2RlIikpOwoKdmFyIF9rZXlfbWFwID0gcmVxdWlyZSgiLi4vdXRpbHMva2V5X21hcCIpOwoKdmFyIF9zYXZlZF9vYmplY3RfcmVnaXN0cnkgPSByZXF1aXJlKCIuLi9zYXZlZF9vYmplY3RzL3NhdmVkX29iamVjdF9yZWdpc3RyeSIpOwoKdmFyIF9tb2R1bGVzID0gcmVxdWlyZSgiLi4vbW9kdWxlcyIpOwoKdmFyIF9zYXZlZF9vYmplY3RfZmluZGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCIuL3BhcnRpYWxzL3NhdmVkX29iamVjdF9maW5kZXIuaHRtbCIpKTsKCnJlcXVpcmUoIi4vaW5wdXRfZm9jdXMiKTsKCnJlcXVpcmUoIi4vcGFnaW5hdGUiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKgogKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IKICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQKICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlcgogKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heQogKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KICogIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQogKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiAqIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KdmFyIF9tb2R1bGUgPSBfbW9kdWxlcy51aU1vZHVsZXMuZ2V0KCdraWJhbmEnKTsKCl9tb2R1bGUuZGlyZWN0aXZlKCdzYXZlZE9iamVjdEZpbmRlcicsIGZ1bmN0aW9uICgkbG9jYXRpb24sIGtiblVybCwgUHJpdmF0ZSwgY29uZmlnKSB7CiAgdmFyIHNlcnZpY2VzID0gUHJpdmF0ZShfc2F2ZWRfb2JqZWN0X3JlZ2lzdHJ5LlNhdmVkT2JqZWN0UmVnaXN0cnlQcm92aWRlcikuYnlMb2FkZXJQcm9wZXJ0aWVzTmFtZTsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFJywKICAgIHNjb3BlOiB7CiAgICAgIHR5cGU6ICdAJywKICAgICAgLy8gb3B0aW9uYWwgbWFrZS11cmwgYXR0ciwgc2V0cyB0aGUgdXNlck1ha2VVcmwgaW4gb3VyIHNjb3BlCiAgICAgIHVzZXJNYWtlVXJsOiAnPT9tYWtlVXJsJywKICAgICAgLy8gb3B0aW9uYWwgb24tY2hvb3NlIGF0dHIsIHNldHMgdGhlIHVzZXJPbkNob29zZSBpbiBvdXIgc2NvcGUKICAgICAgdXNlck9uQ2hvb3NlOiAnPT9vbkNob29zZScsCiAgICAgIC8vIG9wdGlvbmFsIHVzZUxvY2FsTWFuYWdlbWVudCBhdHRyLCAgcmVtb3ZlcyBsaW5rIHRvIG1hbmFnZW1lbnQgc2VjdGlvbgogICAgICB1c2VMb2NhbE1hbmFnZW1lbnQ6ICc9P3VzZUxvY2FsTWFuYWdlbWVudCcsCgogICAgICAvKioKICAgICAgICogQHR5cGUge2Z1bmN0aW9ufSAtIGFuIG9wdGlvbmFsIGZ1bmN0aW9uLiBJZiBzdXBwbGllZCBhbiBgQWRkIG5ldyBYYCBidXR0b24gaXMgc2hvd24KICAgICAgICogYW5kIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIHdoZW4gY2xpY2tlZC4KICAgICAgICovCiAgICAgIG9uQWRkTmV3OiAnPScsCgogICAgICAvKioKICAgICAgICogQHt0eXBlfSBib29sZWFuIC0gc2V0IHRoaXMgdG8gdHJ1ZSwgaWYgeW91IGRvbid0IHdhbnQgdGhlIHNlYXJjaCBib3ggYWJvdmUgdGhlCiAgICAgICAqIHRhYmxlIHRvIGF1dG9tYXRpY2FsbHkgZ2FpbiBmb2N1cyBvbmNlIGxvYWRlZAogICAgICAgKi8KICAgICAgZGlzYWJsZUF1dG9Gb2N1czogJz0nCiAgICB9LAogICAgdGVtcGxhdGU6IF9zYXZlZF9vYmplY3RfZmluZGVyLmRlZmF1bHQsCiAgICBjb250cm9sbGVyQXM6ICdmaW5kZXInLAogICAgY29udHJvbGxlcjogZnVuY3Rpb24gY29udHJvbGxlcigkc2NvcGUsICRlbGVtZW50KSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsgLy8gdGhlIHRleHQgaW5wdXQgZWxlbWVudAoKICAgICAgdmFyICRpbnB1dCA9ICRlbGVtZW50LmZpbmQoJ2lucHV0W25nLW1vZGVsPWZpbHRlcl0nKTsgLy8gVGhlIG51bWJlciBvZiBpdGVtcyB0byBzaG93IGluIHRoZSBsaXN0CgogICAgICAkc2NvcGUucGVyUGFnZSA9IGNvbmZpZy5nZXQoJ3NhdmVkT2JqZWN0czpwZXJQYWdlJyk7IC8vIHRoZSBsaXN0IHRoYXQgd2lsbCBob2xkIHRoZSBzdWdnZXN0aW9ucwoKICAgICAgdmFyICRsaXN0ID0gJGVsZW1lbnQuZmluZCgndWwnKTsgLy8gdGhlIGN1cnJlbnQgZmlsdGVyIHN0cmluZywgdXNlZCB0byBjaGVjayB0aGF0IHJldHVybmVkIHJlc3VsdHMgYXJlIHN0aWxsIHVzZWZ1bAoKICAgICAgdmFyIGN1cnJlbnRGaWx0ZXIgPSAkc2NvcGUuZmlsdGVyOyAvLyB0aGUgbW9zdCByZWNlbnRseSBlbnRlcmVkIHNlYXJjaC9maWx0ZXIKCiAgICAgIHZhciBwcmV2U2VhcmNoOyAvLyB0aGUgbGlzdCBvZiBoaXRzLCB1c2VkIHRvIHJlbmRlciBkaXNwbGF5CgogICAgICBzZWxmLmhpdHMgPSBbXTsKICAgICAgc2VsZi5zZXJ2aWNlID0gc2VydmljZXNbJHNjb3BlLnR5cGVdOwogICAgICBzZWxmLnByb3BlcnRpZXMgPSBzZWxmLnNlcnZpY2UubG9hZGVyUHJvcGVydGllczsKICAgICAgZmlsdGVyUmVzdWx0cygpOwogICAgICAvKioKICAgICAgICogQm9vbGVhbiB0aGF0IGtlZXBzIHRyYWNrIG9mIHdoZXRoZXIgaGl0cyBhcmUgc29ydGVkIGFzY2VuZGluZyAodHJ1ZSkKICAgICAgICogb3IgZGVzY2VuZGluZyAoZmFsc2UpIGJ5IHRpdGxlCiAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgKi8KCiAgICAgIHNlbGYuaXNBc2NlbmRpbmcgPSB0cnVlOwogICAgICAvKioKICAgICAgICogU29ydHMgc2F2ZWQgb2JqZWN0IGZpbmRlciBoaXRzIGVpdGhlciBhc2NlbmRpbmcgb3IgZGVzY2VuZGluZwogICAgICAgKiBAcGFyYW0gIHtBcnJheX0gaGl0cyBBcnJheSBvZiBzYXZlZCBmaW5kZXIgb2JqZWN0IGhpdHMKICAgICAgICogQHJldHVybiB7QXJyYXl9IEFycmF5IHNvcnRlZCBlaXRoZXIgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcKICAgICAgICovCgogICAgICBzZWxmLnNvcnRIaXRzID0gZnVuY3Rpb24gKGhpdHMpIHsKICAgICAgICBzZWxmLmlzQXNjZW5kaW5nID0gIXNlbGYuaXNBc2NlbmRpbmc7CiAgICAgICAgc2VsZi5oaXRzID0gc2VsZi5pc0FzY2VuZGluZyA/IF9sb2Rhc2guZGVmYXVsdC5zb3J0QnkoaGl0cywgJ3RpdGxlJykgOiBfbG9kYXNoLmRlZmF1bHQuc29ydEJ5KGhpdHMsICd0aXRsZScpLnJldmVyc2UoKTsKICAgICAgfTsKICAgICAgLyoqCiAgICAgICAqIFBhc3NlZCB0aGUgaGl0IG9iamVjdHMgYW5kIHdpbGwgZGV0ZXJtaW5lIGlmIHRoZQogICAgICAgKiBoaXQgc2hvdWxkIGhhdmUgYSB1cmwgaW4gdGhlIFVJLCByZXR1cm5zIGl0IGlmIHNvCiAgICAgICAqIEByZXR1cm4ge3N0cmluZ3xudWxsfSAtIHRoZSB1cmwgb3Igbm90aGluZwogICAgICAgKi8KCgogICAgICBzZWxmLm1ha2VVcmwgPSBmdW5jdGlvbiAoaGl0KSB7CiAgICAgICAgaWYgKCRzY29wZS51c2VyTWFrZVVybCkgewogICAgICAgICAgcmV0dXJuICRzY29wZS51c2VyTWFrZVVybChoaXQpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCEkc2NvcGUudXNlck9uQ2hvb3NlKSB7CiAgICAgICAgICByZXR1cm4gaGl0LnVybDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAnIyc7CiAgICAgIH07CgogICAgICBzZWxmLnByZXZlbnRDbGljayA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgfTsKICAgICAgLyoqCiAgICAgICAqIENhbGxlZCB3aGVuIGEgaGl0IG9iamVjdCBpcyBjbGlja2VkLCBjYW4gb3ZlcnJpZGUgdGhlCiAgICAgICAqIHVybCBiZWhhdmlvciBpZiBuZWNlc3NhcnkuCiAgICAgICAqLwoKCiAgICAgIHNlbGYub25DaG9vc2UgPSBmdW5jdGlvbiAoaGl0LCAkZXZlbnQpIHsKICAgICAgICBpZiAoJHNjb3BlLnVzZXJPbkNob29zZSkgewogICAgICAgICAgJHNjb3BlLnVzZXJPbkNob29zZShoaXQsICRldmVudCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgdXJsID0gc2VsZi5tYWtlVXJsKGhpdCk7CiAgICAgICAgaWYgKCF1cmwgfHwgdXJsID09PSAnIycgfHwgdXJsLmNoYXJBdCgwKSAhPT0gJyMnKSByZXR1cm47CiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIHdlIHdhbnQgdGhlICcvcGF0aCcsIG5vdCAnIy9wYXRoJwoKICAgICAgICBrYm5VcmwuY2hhbmdlKHVybC5zdWJzdHIoMSkpOwogICAgICB9OwoKICAgICAgJHNjb3BlLiR3YXRjaCgnZmlsdGVyJywgZnVuY3Rpb24gKG5ld0ZpbHRlcikgewogICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBjdXJyZW50RmlsdGVyIGNoYW5nZXMgZnJvbSB1bmRlZmluZWQgdG8gJycKICAgICAgICAvLyB3aGljaCB0cmlnZ2VycwogICAgICAgIGN1cnJlbnRGaWx0ZXIgPSBuZXdGaWx0ZXIgfHwgJyc7CiAgICAgICAgZmlsdGVyUmVzdWx0cygpOwogICAgICB9KTsKICAgICAgJHNjb3BlLnBhZ2VGaXJzdEl0ZW0gPSAwOwogICAgICAkc2NvcGUucGFnZUxhc3RJdGVtID0gMDsKCiAgICAgICRzY29wZS5vblBhZ2VDaGFuZ2VkID0gZnVuY3Rpb24gKHBhZ2UpIHsKICAgICAgICAkc2NvcGUucGFnZUZpcnN0SXRlbSA9IHBhZ2UuZmlyc3RJdGVtOwogICAgICAgICRzY29wZS5wYWdlTGFzdEl0ZW0gPSBwYWdlLmxhc3RJdGVtOwogICAgICB9OyAvL21hbmFnZXMgdGhlIHN0YXRlIG9mIHRoZSBrZXlib2FyZCBzZWxlY3RvcgoKCiAgICAgIHNlbGYuc2VsZWN0b3IgPSB7CiAgICAgICAgZW5hYmxlZDogZmFsc2UsCiAgICAgICAgaW5kZXg6IC0xCiAgICAgIH07CgogICAgICBzZWxmLmdldExhYmVsID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQud29yZHMoc2VsZi5wcm9wZXJ0aWVzLm5vdW5zKS5tYXAoX2xvZGFzaC5kZWZhdWx0LmNhcGl0YWxpemUpLmpvaW4oJyAnKTsKICAgICAgfTsgLy9rZXkgaGFuZGxlciBmb3IgdGhlIGZpbHRlciB0ZXh0IGJveAoKCiAgICAgIHNlbGYuZmlsdGVyS2V5RG93biA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgICBzd2l0Y2ggKF9rZXlfbWFwLmtleU1hcFskZXZlbnQua2V5Q29kZV0pIHsKICAgICAgICAgIGNhc2UgJ2VudGVyJzoKICAgICAgICAgICAgaWYgKHNlbGYuaGl0Q291bnQgIT09IDEpIHJldHVybjsKICAgICAgICAgICAgdmFyIGhpdCA9IHNlbGYuaGl0c1swXTsKICAgICAgICAgICAgaWYgKCFoaXQpIHJldHVybjsKICAgICAgICAgICAgc2VsZi5vbkNob29zZShoaXQsICRldmVudCk7CiAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH07IC8va2V5IGhhbmRsZXIgZm9yIHRoZSBsaXN0IGl0ZW1zCgoKICAgICAgc2VsZi5oaXRLZXlEb3duID0gZnVuY3Rpb24gKCRldmVudCwgcGFnZSwgcGFnaW5hdGUpIHsKICAgICAgICBzd2l0Y2ggKF9rZXlfbWFwLmtleU1hcFskZXZlbnQua2V5Q29kZV0pIHsKICAgICAgICAgIGNhc2UgJ3RhYic6CiAgICAgICAgICAgIGlmICghc2VsZi5zZWxlY3Rvci5lbmFibGVkKSBicmVhazsKICAgICAgICAgICAgc2VsZi5zZWxlY3Rvci5pbmRleCA9IC0xOwogICAgICAgICAgICBzZWxmLnNlbGVjdG9yLmVuYWJsZWQgPSBmYWxzZTsgLy9pZiB0aGUgdXNlciB0eXBlcyBzaGlmdC10YWIgcmV0dXJuIHRvIHRoZSB0ZXh0Ym94CiAgICAgICAgICAgIC8vaWYgdGhlIHVzZXIgdHlwZXMgdGFiLCBzZXQgdGhlIGZvY3VzIHRvIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgaGl0LgoKICAgICAgICAgICAgaWYgKCRldmVudC5zaGlmdEtleSkgewogICAgICAgICAgICAgICRpbnB1dC5mb2N1cygpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICRsaXN0LmZpbmQoJ2xpLmFjdGl2ZSBhJykuZm9jdXMoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgJ2Rvd24nOgogICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0b3IuZW5hYmxlZCkgYnJlYWs7CgogICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3Rvci5pbmRleCArIDEgPCBwYWdlLmxlbmd0aCkgewogICAgICAgICAgICAgIHNlbGYuc2VsZWN0b3IuaW5kZXggKz0gMTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgJ3VwJzoKICAgICAgICAgICAgaWYgKCFzZWxmLnNlbGVjdG9yLmVuYWJsZWQpIGJyZWFrOwoKICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0b3IuaW5kZXggPiAwKSB7CiAgICAgICAgICAgICAgc2VsZi5zZWxlY3Rvci5pbmRleCAtPSAxOwogICAgICAgICAgICB9CgogICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAncmlnaHQnOgogICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0b3IuZW5hYmxlZCkgYnJlYWs7CgogICAgICAgICAgICBpZiAocGFnZS5udW1iZXIgPCBwYWdlLmNvdW50KSB7CiAgICAgICAgICAgICAgcGFnaW5hdGUuZ29Ub1BhZ2UocGFnZS5udW1iZXIgKyAxKTsKICAgICAgICAgICAgICBzZWxmLnNlbGVjdG9yLmluZGV4ID0gMDsKICAgICAgICAgICAgICBzZWxlY3RUb3BIaXQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgJ2xlZnQnOgogICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0b3IuZW5hYmxlZCkgYnJlYWs7CgogICAgICAgICAgICBpZiAocGFnZS5udW1iZXIgPiAxKSB7CiAgICAgICAgICAgICAgcGFnaW5hdGUuZ29Ub1BhZ2UocGFnZS5udW1iZXIgLSAxKTsKICAgICAgICAgICAgICBzZWxmLnNlbGVjdG9yLmluZGV4ID0gMDsKICAgICAgICAgICAgICBzZWxlY3RUb3BIaXQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgJ2VzY2FwZSc6CiAgICAgICAgICAgIGlmICghc2VsZi5zZWxlY3Rvci5lbmFibGVkKSBicmVhazsKICAgICAgICAgICAgJGlucHV0LmZvY3VzKCk7CiAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICdlbnRlcic6CiAgICAgICAgICAgIGlmICghc2VsZi5zZWxlY3Rvci5lbmFibGVkKSBicmVhazsKICAgICAgICAgICAgdmFyIGhpdEluZGV4ID0gKHBhZ2UubnVtYmVyIC0gMSkgKiBwYWdpbmF0ZS5wZXJQYWdlICsgc2VsZi5zZWxlY3Rvci5pbmRleDsKICAgICAgICAgICAgdmFyIGhpdCA9IHNlbGYuaGl0c1toaXRJbmRleF07CiAgICAgICAgICAgIGlmICghaGl0KSBicmVhazsKICAgICAgICAgICAgc2VsZi5vbkNob29zZShoaXQsICRldmVudCk7CiAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICdzaGlmdCc6CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICRpbnB1dC5mb2N1cygpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH07CgogICAgICBzZWxmLmhpdEJsdXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgc2VsZi5zZWxlY3Rvci5pbmRleCA9IC0xOwogICAgICAgIHNlbGYuc2VsZWN0b3IuZW5hYmxlZCA9IGZhbHNlOwogICAgICB9OwoKICAgICAgc2VsZi5tYW5hZ2VPYmplY3RzID0gZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICAkbG9jYXRpb24udXJsKCcvbWFuYWdlbWVudC9raWJhbmEvb2JqZWN0cz9fYT0nICsgX3Jpc29uTm9kZS5kZWZhdWx0LmVuY29kZSh7CiAgICAgICAgICB0YWI6IHR5cGUKICAgICAgICB9KSk7CiAgICAgIH07CgogICAgICBzZWxmLmhpdENvdW50Tm91biA9IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gKHNlbGYuaGl0Q291bnQgPT09IDEgPyBzZWxmLnByb3BlcnRpZXMubm91biA6IHNlbGYucHJvcGVydGllcy5ub3VucykudG9Mb3dlckNhc2UoKTsKICAgICAgfTsKCiAgICAgIGZ1bmN0aW9uIHNlbGVjdFRvcEhpdCgpIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIC8vdHJpZ2dlcmluZyBhIGZvY3VzIGV2ZW50IGtpY2tzIG9mZiBhIG5ldyBhbmd1bGFyIGRpZ2VzdCBjeWNsZS4KICAgICAgICAgICRsaXN0LmZpbmQoJ2E6Zmlyc3QnKS5mb2N1cygpOwogICAgICAgIH0sIDApOwogICAgICB9CgogICAgICBmdW5jdGlvbiBmaWx0ZXJSZXN1bHRzKCkgewogICAgICAgIGlmICghc2VsZi5zZXJ2aWNlKSByZXR1cm47CiAgICAgICAgaWYgKCFzZWxmLnByb3BlcnRpZXMpIHJldHVybjsgLy8gdHJhY2sgdGhlIGZpbHRlciB0aGF0IHdlIHVzZSBmb3IgdGhpcyBzZWFyY2gsCiAgICAgICAgLy8gYnV0IGVuc3VyZSB0aGF0IHdlIGRvbid0IHNlYXJjaCBmb3IgdGhlIHNhbWUKICAgICAgICAvLyB0aGluZyB0d2ljZS4gVGhpcyBpcyBjYWxsZWQgZnJvbSBtdWx0aXBsZSBwbGFjZXMKICAgICAgICAvLyBhbmQgbmVlZHMgdG8gYmUgc21hcnQgYWJvdXQgd2hlbiBpdCBhY3R1YWxseSBzZWFyY2hlcwoKICAgICAgICB2YXIgZmlsdGVyID0gY3VycmVudEZpbHRlcjsKICAgICAgICBpZiAocHJldlNlYXJjaCA9PT0gZmlsdGVyKSByZXR1cm47CiAgICAgICAgcHJldlNlYXJjaCA9IGZpbHRlcjsKICAgICAgICB2YXIgaXNMYWJzRW5hYmxlZCA9IGNvbmZpZy5nZXQoJ3Zpc3VhbGl6ZTplbmFibGVMYWJzJyk7CiAgICAgICAgc2VsZi5zZXJ2aWNlLmZpbmQoZmlsdGVyKS50aGVuKGZ1bmN0aW9uIChoaXRzKSB7CiAgICAgICAgICBoaXRzLmhpdHMgPSBoaXRzLmhpdHMuZmlsdGVyKGZ1bmN0aW9uIChoaXQpIHsKICAgICAgICAgICAgcmV0dXJuIGlzTGFic0VuYWJsZWQgfHwgX2xvZGFzaC5kZWZhdWx0LmdldChoaXQsICd0eXBlLnN0YWdlJykgIT09ICdleHBlcmltZW50YWwnOwogICAgICAgICAgfSk7CiAgICAgICAgICBoaXRzLnRvdGFsID0gaGl0cy5oaXRzLmxlbmd0aDsgLy8gZW5zdXJlIHRoYXQgd2UgZG9uJ3QgZGlzcGxheSBvbGQgcmVzdWx0cwogICAgICAgICAgLy8gYXMgd2UgY2FuJ3QgcmVhbGx5IGNhbmNlbCByZXF1ZXN0cwoKICAgICAgICAgIGlmIChjdXJyZW50RmlsdGVyID09PSBmaWx0ZXIpIHsKICAgICAgICAgICAgc2VsZi5oaXRDb3VudCA9IGhpdHMudG90YWw7CiAgICAgICAgICAgIHNlbGYuaGl0cyA9IF9sb2Rhc2guZGVmYXVsdC5zb3J0QnkoaGl0cy5oaXRzLCAndGl0bGUnKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH07Cn0pOw=="},null]}