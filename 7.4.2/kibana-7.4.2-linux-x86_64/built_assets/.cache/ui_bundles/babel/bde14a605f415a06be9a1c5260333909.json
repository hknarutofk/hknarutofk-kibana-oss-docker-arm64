{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kbn_vislib_vis_types/public/components/options/gauge/ranges_panel.js","dependencies":[{"path":"src/legacy/core_plugins/kbn_vislib_vis_types/public/components/options/gauge/ranges_panel.js","mtime":1572296409876},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}