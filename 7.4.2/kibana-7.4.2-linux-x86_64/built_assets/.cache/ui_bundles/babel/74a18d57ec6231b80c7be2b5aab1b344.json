{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/data/public/expressions/expression_runner.js","dependencies":[{"path":"src/legacy/core_plugins/data/public/expressions/expression_runner.js","mtime":1572296409380},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVJ1bkZuID0gdm9pZCAwOwoKdmFyIF9jb21tb24gPSByZXF1aXJlKCJAa2JuL2ludGVycHJldGVyL2NvbW1vbiIpOwoKdmFyIF9hZGFwdGVycyA9IHJlcXVpcmUoInVpL2luc3BlY3Rvci9hZGFwdGVycyIpOwoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKdmFyIGNyZWF0ZVJ1bkZuID0gZnVuY3Rpb24gY3JlYXRlUnVuRm4ocmVuZGVyZXJzUmVnaXN0cnksIGludGVycHJldGVyUHJvbWlzZSkgewogIHJldHVybiAoCiAgICAvKiNfX1BVUkVfXyovCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoZXhwcmVzc2lvbk9yQXN0LCBfcmVmKSB7CiAgICAgICAgdmFyIGVsZW1lbnQsIGNvbnRleHQsIGdldEluaXRpYWxDb250ZXh0LCBpbnRlcnByZXRlciwgYXN0LCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LCBjb250ZXh0ID0gX3JlZi5jb250ZXh0LCBnZXRJbml0aWFsQ29udGV4dCA9IF9yZWYuZ2V0SW5pdGlhbENvbnRleHQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnByZXRlclByb21pc2U7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGludGVycHJldGVyID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGFzdCA9IHR5cGVvZiBleHByZXNzaW9uT3JBc3QgPT09ICdzdHJpbmcnID8gKDAsIF9jb21tb24uZnJvbUV4cHJlc3Npb24pKGV4cHJlc3Npb25PckFzdCkgOiBleHByZXNzaW9uT3JBc3Q7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBpbnRlcnByZXRlci5pbnRlcnByZXRBc3QoYXN0LCBjb250ZXh0IHx8IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ251bGwnCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIGdldEluaXRpYWxDb250ZXh0OiBnZXRJbml0aWFsQ29udGV4dCB8fCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBpbnNwZWN0b3JBZGFwdGVyczogewogICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gY29ubmVjdCByZWFsIGFkYXB0ZXJzCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHM6IG5ldyBfYWRhcHRlcnMuUmVxdWVzdEFkYXB0ZXIoKSwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBuZXcgX2FkYXB0ZXJzLkRhdGFBZGFwdGVyKCkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIShyZXNwb25zZS50eXBlID09PSAnZXJyb3InKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IHJlc3BvbnNlOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgaWYgKCFlbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2UudHlwZSA9PT0gJ3JlbmRlcicgJiYgcmVzcG9uc2UuYXMgJiYgcmVuZGVyZXJzUmVnaXN0cnkuZ2V0KHJlc3BvbnNlLmFzKSAhPT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZW5kZXJlcnNSZWdpc3RyeS5nZXQocmVzcG9uc2UuYXMpLnJlbmRlcihlbGVtZW50LCByZXNwb25zZS52YWx1ZSwgewogICAgICAgICAgICAgICAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIG9uRGVzdHJveShmbikgey8vIFRPRE8gaW1wbGVtZW50CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uIGRvbmUoKSB7Ly8gVE9ETyBpbXBsZW1lbnQKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIHRocm93IHJlc3BvbnNlOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVzcG9uc2UpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MikgewogICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpCiAgKTsKfTsKCmV4cG9ydHMuY3JlYXRlUnVuRm4gPSBjcmVhdGVSdW5Gbjs="},null]}