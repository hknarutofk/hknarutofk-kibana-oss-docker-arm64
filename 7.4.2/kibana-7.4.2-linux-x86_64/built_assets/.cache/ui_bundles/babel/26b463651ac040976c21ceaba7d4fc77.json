{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/metrics/public/components/panel_config/timeseries.js","dependencies":[{"path":"src/legacy/core_plugins/metrics/public/components/panel_config/timeseries.js","mtime":1572296411080},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRpbWVzZXJpZXNQYW5lbENvbmZpZyA9IHZvaWQgMDsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoInJlYWN0IikpOwoKdmFyIF9zZXJpZXNfZWRpdG9yID0gcmVxdWlyZSgiLi4vc2VyaWVzX2VkaXRvciIpOwoKdmFyIF9hbm5vdGF0aW9uc19lZGl0b3IgPSByZXF1aXJlKCIuLi9hbm5vdGF0aW9uc19lZGl0b3IiKTsKCnZhciBfaW5kZXhfcGF0dGVybiA9IHJlcXVpcmUoIi4uL2luZGV4X3BhdHRlcm4iKTsKCnZhciBfY3JlYXRlX3NlbGVjdF9oYW5kbGVyID0gcmVxdWlyZSgiLi4vbGliL2NyZWF0ZV9zZWxlY3RfaGFuZGxlciIpOwoKdmFyIF9jcmVhdGVfdGV4dF9oYW5kbGVyID0gcmVxdWlyZSgiLi4vbGliL2NyZWF0ZV90ZXh0X2hhbmRsZXIiKTsKCnZhciBfY29sb3JfcGlja2VyID0gcmVxdWlyZSgiLi4vY29sb3JfcGlja2VyIik7Cgp2YXIgX3llc19ubyA9IHJlcXVpcmUoIi4uL3llc19ubyIpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX2dldF9kZWZhdWx0X3F1ZXJ5X2xhbmd1YWdlID0gcmVxdWlyZSgiLi4vbGliL2dldF9kZWZhdWx0X3F1ZXJ5X2xhbmd1YWdlIik7Cgp2YXIgX3F1ZXJ5X2Jhcl93cmFwcGVyID0gcmVxdWlyZSgiLi4vcXVlcnlfYmFyX3dyYXBwZXIiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9Cgp2YXIgVGltZXNlcmllc1BhbmVsQ29uZmlnVWkgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFRpbWVzZXJpZXNQYW5lbENvbmZpZ1VpLCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gVGltZXNlcmllc1BhbmVsQ29uZmlnVWkocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXNlcmllc1BhbmVsQ29uZmlnVWkpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFRpbWVzZXJpZXNQYW5lbENvbmZpZ1VpKS5jYWxsKHRoaXMsIHByb3BzKSk7CiAgICBfdGhpcy5zdGF0ZSA9IHsKICAgICAgc2VsZWN0ZWRUYWI6ICdkYXRhJwogICAgfTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhUaW1lc2VyaWVzUGFuZWxDb25maWdVaSwgW3sKICAgIGtleTogInN3aXRjaFRhYiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3dpdGNoVGFiKHNlbGVjdGVkVGFiKSB7CiAgICAgIHRoaXMuc2V0U3RhdGUoewogICAgICAgIHNlbGVjdGVkVGFiOiBzZWxlY3RlZFRhYgogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgZGVmYXVsdHMgPSB7CiAgICAgICAgZmlsdGVyOiB7CiAgICAgICAgICBxdWVyeTogJycsCiAgICAgICAgICBsYW5ndWFnZTogKDAsIF9nZXRfZGVmYXVsdF9xdWVyeV9sYW5ndWFnZS5nZXREZWZhdWx0UXVlcnlMYW5ndWFnZSkoKQogICAgICAgIH0sCiAgICAgICAgYXhpc19tYXg6ICcnLAogICAgICAgIGF4aXNfbWluOiAnJywKICAgICAgICBsZWdlbmRfcG9zaXRpb246ICdyaWdodCcsCiAgICAgICAgc2hvd19ncmlkOiAxCiAgICAgIH07CgogICAgICB2YXIgbW9kZWwgPSBfb2JqZWN0U3ByZWFkKHt9LCBkZWZhdWx0cywge30sIHRoaXMucHJvcHMubW9kZWwpOwoKICAgICAgdmFyIHNlbGVjdGVkVGFiID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFRhYjsKICAgICAgdmFyIGhhbmRsZVNlbGVjdENoYW5nZSA9ICgwLCBfY3JlYXRlX3NlbGVjdF9oYW5kbGVyLmNyZWF0ZVNlbGVjdEhhbmRsZXIpKHRoaXMucHJvcHMub25DaGFuZ2UpOwogICAgICB2YXIgaGFuZGxlVGV4dENoYW5nZSA9ICgwLCBfY3JlYXRlX3RleHRfaGFuZGxlci5jcmVhdGVUZXh0SGFuZGxlcikodGhpcy5wcm9wcy5vbkNoYW5nZSk7CiAgICAgIHZhciBodG1sSWQgPSAoMCwgX2V1aS5odG1sSWRHZW5lcmF0b3IpKCk7CiAgICAgIHZhciBpbnRsID0gdGhpcy5wcm9wcy5pbnRsOwogICAgICB2YXIgcG9zaXRpb25PcHRpb25zID0gW3sKICAgICAgICBsYWJlbDogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAndHN2Yi50aW1lc2VyaWVzLnBvc2l0aW9uT3B0aW9ucy5yaWdodExhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmlnaHQnCiAgICAgICAgfSksCiAgICAgICAgdmFsdWU6ICdyaWdodCcKICAgICAgfSwgewogICAgICAgIGxhYmVsOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd0c3ZiLnRpbWVzZXJpZXMucG9zaXRpb25PcHRpb25zLmxlZnRMYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0xlZnQnCiAgICAgICAgfSksCiAgICAgICAgdmFsdWU6ICdsZWZ0JwogICAgICB9XTsKICAgICAgdmFyIHNlbGVjdGVkUG9zaXRpb25PcHRpb24gPSBwb3NpdGlvbk9wdGlvbnMuZmluZChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgcmV0dXJuIG1vZGVsLmF4aXNfcG9zaXRpb24gPT09IG9wdGlvbi52YWx1ZTsKICAgICAgfSk7CiAgICAgIHZhciBzY2FsZU9wdGlvbnMgPSBbewogICAgICAgIGxhYmVsOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd0c3ZiLnRpbWVzZXJpZXMuc2NhbGVPcHRpb25zLm5vcm1hbExhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTm9ybWFsJwogICAgICAgIH0pLAogICAgICAgIHZhbHVlOiAnbm9ybWFsJwogICAgICB9LCB7CiAgICAgICAgbGFiZWw6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3RzdmIudGltZXNlcmllcy5zY2FsZU9wdGlvbnMubG9nTGFiZWwnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdMb2cnCiAgICAgICAgfSksCiAgICAgICAgdmFsdWU6ICdsb2cnCiAgICAgIH1dOwogICAgICB2YXIgc2VsZWN0ZWRBeGlzU2NhbGVPcHRpb24gPSBzY2FsZU9wdGlvbnMuZmluZChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgcmV0dXJuIG1vZGVsLmF4aXNfc2NhbGUgPT09IG9wdGlvbi52YWx1ZTsKICAgICAgfSk7CiAgICAgIHZhciBsZWdlbmRQb3NpdGlvbk9wdGlvbnMgPSBbewogICAgICAgIGxhYmVsOiBpbnRsLmZvcm1hdE1lc3NhZ2UoewogICAgICAgICAgaWQ6ICd0c3ZiLnRpbWVzZXJpZXMubGVnZW5kUG9zaXRpb25PcHRpb25zLnJpZ2h0TGFiZWwnLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdSaWdodCcKICAgICAgICB9KSwKICAgICAgICB2YWx1ZTogJ3JpZ2h0JwogICAgICB9LCB7CiAgICAgICAgbGFiZWw6IGludGwuZm9ybWF0TWVzc2FnZSh7CiAgICAgICAgICBpZDogJ3RzdmIudGltZXNlcmllcy5sZWdlbmRQb3NpdGlvbk9wdGlvbnMubGVmdExhYmVsJywKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGVmdCcKICAgICAgICB9KSwKICAgICAgICB2YWx1ZTogJ2xlZnQnCiAgICAgIH0sIHsKICAgICAgICBsYWJlbDogaW50bC5mb3JtYXRNZXNzYWdlKHsKICAgICAgICAgIGlkOiAndHN2Yi50aW1lc2VyaWVzLmxlZ2VuZFBvc2l0aW9uT3B0aW9ucy5ib3R0b21MYWJlbCcsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0JvdHRvbScKICAgICAgICB9KSwKICAgICAgICB2YWx1ZTogJ2JvdHRvbScKICAgICAgfV07CiAgICAgIHZhciBzZWxlY3RlZExlZ2VuZFBvc09wdGlvbiA9IGxlZ2VuZFBvc2l0aW9uT3B0aW9ucy5maW5kKGZ1bmN0aW9uIChvcHRpb24pIHsKICAgICAgICByZXR1cm4gbW9kZWwubGVnZW5kX3Bvc2l0aW9uID09PSBvcHRpb24udmFsdWU7CiAgICAgIH0pOwogICAgICB2YXIgdmlldzsKCiAgICAgIGlmIChzZWxlY3RlZFRhYiA9PT0gJ2RhdGEnKSB7CiAgICAgICAgdmlldyA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3Nlcmllc19lZGl0b3IuU2VyaWVzRWRpdG9yLCB7CiAgICAgICAgICBmaWVsZHM6IHRoaXMucHJvcHMuZmllbGRzLAogICAgICAgICAgbW9kZWw6IHRoaXMucHJvcHMubW9kZWwsCiAgICAgICAgICBuYW1lOiB0aGlzLnByb3BzLm5hbWUsCiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZQogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkVGFiID09PSAnYW5ub3RhdGlvbnMnKSB7CiAgICAgICAgdmlldyA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2Fubm90YXRpb25zX2VkaXRvci5Bbm5vdGF0aW9uc0VkaXRvciwgewogICAgICAgICAgZmllbGRzOiB0aGlzLnByb3BzLmZpZWxkcywKICAgICAgICAgIG1vZGVsOiB0aGlzLnByb3BzLm1vZGVsLAogICAgICAgICAgbmFtZTogImFubm90YXRpb25zIiwKICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLnByb3BzLm9uQ2hhbmdlCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmlldyA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAgIGNsYXNzTmFtZTogInR2YlBhbmVsQ29uZmlnX19jb250YWluZXIiCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVBhbmVsLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICAgIHNpemU6ICJzIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ0c3ZiLnRpbWVzZXJpZXMub3B0aW9uc1RhYi5kYXRhTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEYXRhIgogICAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICAgIHNpemU6ICJtIgogICAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pbmRleF9wYXR0ZXJuLkluZGV4UGF0dGVybiwgewogICAgICAgICAgZmllbGRzOiB0aGlzLnByb3BzLmZpZWxkcywKICAgICAgICAgIG1vZGVsOiB0aGlzLnByb3BzLm1vZGVsLAogICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2UKICAgICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUhvcml6b250YWxSdWxlLCBudWxsKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsCiAgICAgICAgICB3cmFwOiB0cnVlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgICAgaWQ6IGh0bWxJZCgncGFuZWxGaWx0ZXInKSwKICAgICAgICAgIGxhYmVsOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICBpZDogInRzdmIudGltZXNlcmllcy5vcHRpb25zVGFiLnBhbmVsRmlsdGVyTGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlBhbmVsIGZpbHRlciIKICAgICAgICAgIH0pLAogICAgICAgICAgZnVsbFdpZHRoOiB0cnVlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcXVlcnlfYmFyX3dyYXBwZXIuUXVlcnlCYXJXcmFwcGVyLCB7CiAgICAgICAgICBxdWVyeTogewogICAgICAgICAgICBsYW5ndWFnZTogbW9kZWwuZmlsdGVyLmxhbmd1YWdlIHx8ICgwLCBfZ2V0X2RlZmF1bHRfcXVlcnlfbGFuZ3VhZ2UuZ2V0RGVmYXVsdFF1ZXJ5TGFuZ3VhZ2UpKCksCiAgICAgICAgICAgIHF1ZXJ5OiBtb2RlbC5maWx0ZXIucXVlcnkgfHwgJycKICAgICAgICAgIH0sCiAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZmlsdGVyKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpczIucHJvcHMub25DaGFuZ2UoewogICAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIGluZGV4UGF0dGVybnM6IFttb2RlbC5pbmRleF9wYXR0ZXJuIHx8IG1vZGVsLmRlZmF1bHRfaW5kZXhfcGF0dGVybl0KICAgICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGdyb3c6IGZhbHNlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1MYWJlbCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLm9wdGlvbnNUYWIuaWdub3JlR2xvYmFsRmlsdGVyTGFiZWwiLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJJZ25vcmUgZ2xvYmFsIGZpbHRlcj8iCiAgICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpU3BhY2VyLCB7CiAgICAgICAgICBzaXplOiAicyIKICAgICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfeWVzX25vLlllc05vLCB7CiAgICAgICAgICB2YWx1ZTogbW9kZWwuaWdub3JlX2dsb2JhbF9maWx0ZXIsCiAgICAgICAgICBuYW1lOiAiaWdub3JlX2dsb2JhbF9maWx0ZXIiLAogICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2UKICAgICAgICB9KSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgbnVsbCksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQYW5lbCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgICAgICBzaXplOiAicyIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLm9wdGlvbnNUYWIuc3R5bGVMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlN0eWxlIgogICAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICAgIHNpemU6ICJtIgogICAgICAgIH0pLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICByZXNwb25zaXZlOiBmYWxzZSwKICAgICAgICAgIHdyYXA6IHRydWUsCiAgICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICAgIGlkOiBodG1sSWQoJ2F4aXNNaW4nKSwKICAgICAgICAgIGxhYmVsOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICBpZDogInRzdmIudGltZXNlcmllcy5vcHRpb25zVGFiLmF4aXNNaW5MYWJlbCIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQXhpcyBtaW4iCiAgICAgICAgICB9KQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFRleHQsIHsKICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVUZXh0Q2hhbmdlKCdheGlzX21pbicpLAogICAgICAgICAgdmFsdWU6IG1vZGVsLmF4aXNfbWluCiAgICAgICAgfSkpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybVJvdywgewogICAgICAgICAgaWQ6IGh0bWxJZCgnYXhpc01heCcpLAogICAgICAgICAgbGFiZWw6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLm9wdGlvbnNUYWIuYXhpc01heExhYmVsIiwKICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBeGlzIG1heCIKICAgICAgICAgIH0pCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZpZWxkVGV4dCwgewogICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZVRleHRDaGFuZ2UoJ2F4aXNfbWF4JyksCiAgICAgICAgICB2YWx1ZTogbW9kZWwuYXhpc19tYXgKICAgICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGb3JtUm93LCB7CiAgICAgICAgICBpZDogaHRtbElkKCdheGlzUG9zJyksCiAgICAgICAgICBsYWJlbDogX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgICAgaWQ6ICJ0c3ZiLnRpbWVzZXJpZXMub3B0aW9uc1RhYi5heGlzUG9zaXRpb25MYWJlbCIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQXhpcyBwb3NpdGlvbiIKICAgICAgICAgIH0pCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvbWJvQm94LCB7CiAgICAgICAgICBpc0NsZWFyYWJsZTogZmFsc2UsCiAgICAgICAgICBvcHRpb25zOiBwb3NpdGlvbk9wdGlvbnMsCiAgICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHNlbGVjdGVkUG9zaXRpb25PcHRpb24gPyBbc2VsZWN0ZWRQb3NpdGlvbk9wdGlvbl0gOiBbXSwKICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVTZWxlY3RDaGFuZ2UoJ2F4aXNfcG9zaXRpb24nKSwKICAgICAgICAgIHNpbmdsZVNlbGVjdGlvbjogewogICAgICAgICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgICAgICAgfQogICAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICAgIGlkOiBodG1sSWQoJ2F4aXNTY2FsZScpLAogICAgICAgICAgbGFiZWw6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLm9wdGlvbnNUYWIuYXhpc1NjYWxlTGFiZWwiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkF4aXMgc2NhbGUiCiAgICAgICAgICB9KQogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb21ib0JveCwgewogICAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlLAogICAgICAgICAgb3B0aW9uczogc2NhbGVPcHRpb25zLAogICAgICAgICAgc2VsZWN0ZWRPcHRpb25zOiBzZWxlY3RlZEF4aXNTY2FsZU9wdGlvbiA/IFtzZWxlY3RlZEF4aXNTY2FsZU9wdGlvbl0gOiBbXSwKICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVTZWxlY3RDaGFuZ2UoJ2F4aXNfc2NhbGUnKSwKICAgICAgICAgIHNpbmdsZVNlbGVjdGlvbjogewogICAgICAgICAgICBhc1BsYWluVGV4dDogdHJ1ZQogICAgICAgICAgfQogICAgICAgIH0pKSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpSG9yaXpvbnRhbFJ1bGUsIG51bGwpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgICByZXNwb25zaXZlOiBmYWxzZSwKICAgICAgICAgIHdyYXA6IHRydWUsCiAgICAgICAgICBhbGlnbkl0ZW1zOiAiY2VudGVyIgogICAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybUxhYmVsLCB7CiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAKICAgICAgICAgIH0KICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ0c3ZiLnRpbWVzZXJpZXMub3B0aW9uc1RhYi5iYWNrZ3JvdW5kQ29sb3JMYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkJhY2tncm91bmQgY29sb3I6IgogICAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29sb3JfcGlja2VyLkNvbG9yUGlja2VyLCB7CiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZSwKICAgICAgICAgIG5hbWU6ICJiYWNrZ3JvdW5kX2NvbG9yIiwKICAgICAgICAgIHZhbHVlOiBtb2RlbC5iYWNrZ3JvdW5kX2NvbG9yCiAgICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIHsKICAgICAgICAgIGdyb3c6IGZhbHNlCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1MYWJlbCwgewogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAwCiAgICAgICAgICB9CiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLm9wdGlvbnNUYWIuc2hvd0xlZ2VuZExhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiU2hvdyBsZWdlbmQ/IgogICAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfeWVzX25vLlllc05vLCB7CiAgICAgICAgICB2YWx1ZTogbW9kZWwuc2hvd19sZWdlbmQsCiAgICAgICAgICBuYW1lOiAic2hvd19sZWdlbmQiLAogICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2UKICAgICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybUxhYmVsLCB7CiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAKICAgICAgICAgIH0sCiAgICAgICAgICBodG1sRm9yOiBodG1sSWQoJ2xlZ2VuZFBvcycpCiAgICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLm9wdGlvbnNUYWIubGVnZW5kUG9zaXRpb25MYWJlbCIsCiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkxlZ2VuZCBwb3NpdGlvbiIKICAgICAgICB9KSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEl0ZW0sIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDb21ib0JveCwgewogICAgICAgICAgaXNDbGVhcmFibGU6IGZhbHNlLAogICAgICAgICAgaWQ6IGh0bWxJZCgnbGVnZW5kUG9zJyksCiAgICAgICAgICBvcHRpb25zOiBsZWdlbmRQb3NpdGlvbk9wdGlvbnMsCiAgICAgICAgICBzZWxlY3RlZE9wdGlvbnM6IHNlbGVjdGVkTGVnZW5kUG9zT3B0aW9uID8gW3NlbGVjdGVkTGVnZW5kUG9zT3B0aW9uXSA6IFtdLAogICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZVNlbGVjdENoYW5nZSgnbGVnZW5kX3Bvc2l0aW9uJyksCiAgICAgICAgICBzaW5nbGVTZWxlY3Rpb246IHsKICAgICAgICAgICAgYXNQbGFpblRleHQ6IHRydWUKICAgICAgICAgIH0KICAgICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgICAgZ3JvdzogZmFsc2UKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRm9ybUxhYmVsLCB7CiAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICBtYXJnaW5Cb3R0b206IDAKICAgICAgICAgIH0KICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgaWQ6ICJ0c3ZiLnRpbWVzZXJpZXMub3B0aW9uc1RhYi5kaXNwbGF5R3JpZExhYmVsIiwKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRGlzcGxheSBncmlkIgogICAgICAgIH0pKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfeWVzX25vLlllc05vLCB7CiAgICAgICAgICB2YWx1ZTogbW9kZWwuc2hvd19ncmlkLAogICAgICAgICAgbmFtZTogInNob3dfZ3JpZCIsCiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZQogICAgICAgIH0pKSkpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWJzLCB7CiAgICAgICAgc2l6ZTogInMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWIsIHsKICAgICAgICBpc1NlbGVjdGVkOiBzZWxlY3RlZFRhYiA9PT0gJ2RhdGEnLAogICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnN3aXRjaFRhYignZGF0YScpOwogICAgICAgIH0KICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogInRzdmIudGltZXNlcmllcy5kYXRhVGFiLmRhdGFCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJEYXRhIgogICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWIsIHsKICAgICAgICBpc1NlbGVjdGVkOiBzZWxlY3RlZFRhYiA9PT0gJ29wdGlvbnMnLAogICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLnN3aXRjaFRhYignb3B0aW9ucycpOwogICAgICAgIH0sCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInRpbWVTZXJpZXNFZGl0b3JQYW5lbE9wdGlvbnNCdG4iCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJ0c3ZiLnRpbWVzZXJpZXMub3B0aW9uc1RhYi5wYW5lbE9wdGlvbnNCdXR0b25MYWJlbCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJQYW5lbCBvcHRpb25zIgogICAgICB9KSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlUYWIsIHsKICAgICAgICBpc1NlbGVjdGVkOiBzZWxlY3RlZFRhYiA9PT0gJ2Fubm90YXRpb25zJywKICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzMi5zd2l0Y2hUYWIoJ2Fubm90YXRpb25zJyk7CiAgICAgICAgfQogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgIGlkOiAidHN2Yi50aW1lc2VyaWVzLmFubm90YXRpb25zVGFiLmFubm90YXRpb25zQnV0dG9uTGFiZWwiLAogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiQW5ub3RhdGlvbnMiCiAgICAgIH0pKSksIHZpZXcpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRpbWVzZXJpZXNQYW5lbENvbmZpZ1VpOwp9KF9yZWFjdC5Db21wb25lbnQpOwoKVGltZXNlcmllc1BhbmVsQ29uZmlnVWkucHJvcFR5cGVzID0gewogIGZpZWxkczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwKICBtb2RlbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwKICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMKfTsKdmFyIFRpbWVzZXJpZXNQYW5lbENvbmZpZyA9ICgwLCBfcmVhY3QyLmluamVjdEkxOG4pKFRpbWVzZXJpZXNQYW5lbENvbmZpZ1VpKTsKZXhwb3J0cy5UaW1lc2VyaWVzUGFuZWxDb25maWcgPSBUaW1lc2VyaWVzUGFuZWxDb25maWc7"},null]}