{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/common/field_formats/types/url.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/common/field_formats/types/url.js","mtime":1572296409916},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVVybEZvcm1hdCA9IGNyZWF0ZVVybEZvcm1hdDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX2hpZ2hsaWdodF9odG1sID0gcmVxdWlyZSgiLi4vLi4vaGlnaGxpZ2h0L2hpZ2hsaWdodF9odG1sIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7CiAgaWYgKGtleSBpbiBvYmopIHsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgewogICAgICB2YWx1ZTogdmFsdWUsCiAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0gZWxzZSB7CiAgICBvYmpba2V5XSA9IHZhbHVlOwogIH0KCiAgcmV0dXJuIG9iajsKfQoKdmFyIHRlbXBsYXRlTWF0Y2hSRSA9IC97eyhbXHNcU10rPyl9fS9nOwp2YXIgd2hpdGVsaXN0VXJsU2NoZW1lcyA9IFsnaHR0cDovLycsICdodHRwczovLyddOwp2YXIgVVJMX1RZUEVTID0gW3sKICBraW5kOiAnYScsCiAgdGV4dDogJ0xpbmsnCn0sIHsKICBraW5kOiAnaW1nJywKICB0ZXh0OiAnSW1hZ2UnCn0sIHsKICBraW5kOiAnYXVkaW8nLAogIHRleHQ6ICdBdWRpbycKfV07CnZhciBERUZBVUxUX1VSTF9UWVBFID0gJ2EnOwoKZnVuY3Rpb24gY3JlYXRlVXJsRm9ybWF0KEZpZWxkRm9ybWF0KSB7CiAgdmFyIFVybEZvcm1hdCA9CiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uIChfRmllbGRGb3JtYXQpIHsKICAgIF9pbmhlcml0cyhVcmxGb3JtYXQsIF9GaWVsZEZvcm1hdCk7CgogICAgZnVuY3Rpb24gVXJsRm9ybWF0KHBhcmFtcykgewogICAgICB2YXIgX3RoaXM7CgogICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXJsRm9ybWF0KTsKCiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKFVybEZvcm1hdCkuY2FsbCh0aGlzLCBwYXJhbXMpKTsKICAgICAgX3RoaXMuX2NvbXBpbGVUZW1wbGF0ZSA9IF9sb2Rhc2guZGVmYXVsdC5tZW1vaXplKF90aGlzLl9jb21waWxlVGVtcGxhdGUpOwogICAgICByZXR1cm4gX3RoaXM7CiAgICB9CgogICAgX2NyZWF0ZUNsYXNzKFVybEZvcm1hdCwgW3sKICAgICAga2V5OiAiZ2V0UGFyYW1EZWZhdWx0cyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYXJhbURlZmF1bHRzKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0eXBlOiBERUZBVUxUX1VSTF9UWVBFLAogICAgICAgICAgdXJsVGVtcGxhdGU6IG51bGwsCiAgICAgICAgICBsYWJlbFRlbXBsYXRlOiBudWxsCiAgICAgICAgfTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJfZm9ybWF0TGFiZWwiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX2Zvcm1hdExhYmVsKHZhbHVlLCB1cmwpIHsKICAgICAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLnBhcmFtKCdsYWJlbFRlbXBsYXRlJyk7CiAgICAgICAgaWYgKHVybCA9PSBudWxsKSB1cmwgPSB0aGlzLl9mb3JtYXRVcmwodmFsdWUpOwogICAgICAgIGlmICghdGVtcGxhdGUpIHJldHVybiB1cmw7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBpbGVUZW1wbGF0ZSh0ZW1wbGF0ZSkoewogICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgdXJsOiB1cmwKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJfZm9ybWF0VXJsIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JtYXRVcmwodmFsdWUpIHsKICAgICAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLnBhcmFtKCd1cmxUZW1wbGF0ZScpOwogICAgICAgIGlmICghdGVtcGxhdGUpIHJldHVybiB2YWx1ZTsKICAgICAgICByZXR1cm4gdGhpcy5fY29tcGlsZVRlbXBsYXRlKHRlbXBsYXRlKSh7CiAgICAgICAgICB2YWx1ZTogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSwKICAgICAgICAgIHJhd1ZhbHVlOiB2YWx1ZQogICAgICAgIH0pOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9jb21waWxlVGVtcGxhdGUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbXBpbGVUZW1wbGF0ZSh0ZW1wbGF0ZSkgewogICAgICAgIHZhciBwYXJ0cyA9IHRlbXBsYXRlLnNwbGl0KHRlbXBsYXRlTWF0Y2hSRSkubWFwKGZ1bmN0aW9uIChwYXJ0LCBpKSB7CiAgICAgICAgICAvLyB0cmltIGFsbCB0aGUgb2RkIGJpdHMsIHRoZSB2YXJpYWJsZSBuYW1lcwogICAgICAgICAgcmV0dXJuIGkgJSAyID8gcGFydC50cmltKCkgOiBwYXJ0OwogICAgICAgIH0pOwogICAgICAgIHJldHVybiBmdW5jdGlvbiAobG9jYWxzKSB7CiAgICAgICAgICAvLyByZXBsYWNlIGFsbCB0aGUgb2RkIGJpdHMgd2l0aCB0aGVpciBsb2NhbCB2YXIKICAgICAgICAgIHZhciBvdXRwdXQgPSAnJzsKICAgICAgICAgIHZhciBpID0gLTE7CgogICAgICAgICAgd2hpbGUgKCsraSA8IHBhcnRzLmxlbmd0aCkgewogICAgICAgICAgICBpZiAoaSAlIDIpIHsKICAgICAgICAgICAgICBpZiAobG9jYWxzLmhhc093blByb3BlcnR5KHBhcnRzW2ldKSkgewogICAgICAgICAgICAgICAgdmFyIGxvY2FsID0gbG9jYWxzW3BhcnRzW2ldXTsKICAgICAgICAgICAgICAgIG91dHB1dCArPSBsb2NhbCA9PSBudWxsID8gJycgOiBsb2NhbDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgb3V0cHV0ICs9IHBhcnRzW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuIG91dHB1dDsKICAgICAgICB9OwogICAgICB9CiAgICB9XSk7CgogICAgcmV0dXJuIFVybEZvcm1hdDsKICB9KEZpZWxkRm9ybWF0KTsKCiAgX2RlZmluZVByb3BlcnR5KFVybEZvcm1hdCwgImlkIiwgJ3VybCcpOwoKICBfZGVmaW5lUHJvcGVydHkoVXJsRm9ybWF0LCAidGl0bGUiLCAnVXJsJyk7CgogIF9kZWZpbmVQcm9wZXJ0eShVcmxGb3JtYXQsICJmaWVsZFR5cGUiLCBbJ251bWJlcicsICdib29sZWFuJywgJ2RhdGUnLCAnaXAnLCAnc3RyaW5nJywgJ211cm11cjMnLCAndW5rbm93bicsICdjb25mbGljdCddKTsKCiAgX2RlZmluZVByb3BlcnR5KFVybEZvcm1hdCwgInVybFR5cGVzIiwgVVJMX1RZUEVTKTsKCiAgVXJsRm9ybWF0LnByb3RvdHlwZS5fY29udmVydCA9IHsKICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQodmFsdWUpIHsKICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdExhYmVsKHZhbHVlKTsKICAgIH0sCiAgICBodG1sOiBmdW5jdGlvbiBodG1sKHJhd1ZhbHVlLCBmaWVsZCwgaGl0LCBwYXJzZWRVcmwpIHsKICAgICAgdmFyIHVybCA9IF9sb2Rhc2guZGVmYXVsdC5lc2NhcGUodGhpcy5fZm9ybWF0VXJsKHJhd1ZhbHVlKSk7CgogICAgICB2YXIgbGFiZWwgPSBfbG9kYXNoLmRlZmF1bHQuZXNjYXBlKHRoaXMuX2Zvcm1hdExhYmVsKHJhd1ZhbHVlLCB1cmwpKTsKCiAgICAgIHN3aXRjaCAodGhpcy5wYXJhbSgndHlwZScpKSB7CiAgICAgICAgY2FzZSAnYXVkaW8nOgogICAgICAgICAgcmV0dXJuICI8YXVkaW8gY29udHJvbHMgcHJlbG9hZD1cIm5vbmVcIiBzcmM9XCIiLmNvbmNhdCh1cmwsICJcIj4iKTsKCiAgICAgICAgY2FzZSAnaW1nJzoKICAgICAgICAgIC8vIElmIHRoZSBVUkwgaGFzbid0IGJlZW4gZm9ybWF0dGVkIHRvIGJlY29tZSBhIG1lYW5pbmdmdWwgbGFiZWwgdGhlbiB0aGUgYmVzdCB3ZSBjYW4gZG8KICAgICAgICAgIC8vIGlzIHRlbGwgc2NyZWVuIHJlYWRlcnMgd2hlcmUgdGhlIGltYWdlIGNvbWVzIGZyb20uCiAgICAgICAgICB2YXIgaW1hZ2VMYWJlbCA9IGxhYmVsID09PSB1cmwgPyAiQSBkeW5hbWljYWxseS1zcGVjaWZpZWQgaW1hZ2UgbG9jYXRlZCBhdCAiLmNvbmNhdCh1cmwpIDogbGFiZWw7CiAgICAgICAgICByZXR1cm4gIjxpbWcgc3JjPVwiIi5jb25jYXQodXJsLCAiXCIgYWx0PVwiIikuY29uY2F0KGltYWdlTGFiZWwsICJcIj4iKTsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHZhciBpbldoaXRlbGlzdCA9IHdoaXRlbGlzdFVybFNjaGVtZXMuc29tZShmdW5jdGlvbiAoc2NoZW1lKSB7CiAgICAgICAgICAgIHJldHVybiB1cmwuaW5kZXhPZihzY2hlbWUpID09PSAwOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKCFpbldoaXRlbGlzdCAmJiAhcGFyc2VkVXJsKSB7CiAgICAgICAgICAgIHJldHVybiB1cmw7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHByZWZpeCA9ICcnOwogICAgICAgICAgLyoqCiAgICAgICAgICAgKiBUaGlzIGNvZGUgYXR0ZW1wdHMgdG8gY29udmVydCBhIHJlbGF0aXZlIHVybCBpbnRvIGEga2liYW5hIGFic29sdXRlIHVybAogICAgICAgICAgICoKICAgICAgICAgICAqIFNVUFBPUlRFRDoKICAgICAgICAgICAqICAtIC9hcHAva2liYW5hLwogICAgICAgICAgICogIC0gLi4vYXBwL2tpYmFuYQogICAgICAgICAgICogIC0gIy9kaXNjb3ZlcgogICAgICAgICAgICoKICAgICAgICAgICAqIFVOU1VQUE9SVEVECiAgICAgICAgICAgKiAgLSBhcHAva2liYW5hCiAgICAgICAgICAgKi8KCiAgICAgICAgICBpZiAoIWluV2hpdGVsaXN0KSB7CiAgICAgICAgICAgIC8vIEhhbmRsZXMgdXJscyBsaWtlOiBgIy9kaXNjb3ZlcmAKICAgICAgICAgICAgaWYgKHVybFswXSA9PT0gJyMnKSB7CiAgICAgICAgICAgICAgcHJlZml4ID0gIiIuY29uY2F0KHBhcnNlZFVybC5vcmlnaW4pLmNvbmNhdChwYXJzZWRVcmwucGF0aG5hbWUpOwogICAgICAgICAgICB9IC8vIEhhbmRsZSB1cmxzIGxpa2U6IGAvYXBwL2tpYmFuYWAgb3IgYC94eXovYXBwL2tpYmFuYWAKICAgICAgICAgICAgZWxzZSBpZiAodXJsLmluZGV4T2YocGFyc2VkVXJsLmJhc2VQYXRoIHx8ICcvJykgPT09IDApIHsKICAgICAgICAgICAgICAgIHByZWZpeCA9ICIiLmNvbmNhdChwYXJzZWRVcmwub3JpZ2luKTsKICAgICAgICAgICAgICB9IC8vIEhhbmRsZSB1cmxzIGxpa2U6IGAuLi9hcHAva2liYW5hYAogICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICB2YXIgcHJlZml4RW5kID0gdXJsWzBdID09PSAnLycgPyAnJyA6ICcvJzsKICAgICAgICAgICAgICAgICAgcHJlZml4ID0gIiIuY29uY2F0KHBhcnNlZFVybC5vcmlnaW4pLmNvbmNhdChwYXJzZWRVcmwuYmFzZVBhdGggfHwgJycsICIvYXBwIikuY29uY2F0KHByZWZpeEVuZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGxpbmtMYWJlbDsKCiAgICAgICAgICBpZiAoaGl0ICYmIGhpdC5oaWdobGlnaHQgJiYgaGl0LmhpZ2hsaWdodFtmaWVsZC5uYW1lXSkgewogICAgICAgICAgICBsaW5rTGFiZWwgPSAoMCwgX2hpZ2hsaWdodF9odG1sLmdldEhpZ2hsaWdodEh0bWwpKGxhYmVsLCBoaXQuaGlnaGxpZ2h0W2ZpZWxkLm5hbWVdKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxpbmtMYWJlbCA9IGxhYmVsOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBsaW5rVGFyZ2V0ID0gdGhpcy5wYXJhbSgnb3BlbkxpbmtJbkN1cnJlbnRUYWInKSA/ICdfc2VsZicgOiAnX2JsYW5rJzsKICAgICAgICAgIHJldHVybiAiPGEgaHJlZj1cIiIuY29uY2F0KHByZWZpeCkuY29uY2F0KHVybCwgIlwiIHRhcmdldD1cIiIpLmNvbmNhdChsaW5rVGFyZ2V0LCAiXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPiIpLmNvbmNhdChsaW5rTGFiZWwsICI8L2E+Iik7CiAgICAgIH0KICAgIH0KICB9OwogIHJldHVybiBVcmxGb3JtYXQ7Cn0="},null]}