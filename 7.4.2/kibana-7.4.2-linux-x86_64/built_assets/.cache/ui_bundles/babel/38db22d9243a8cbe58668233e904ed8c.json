{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/home/components/telemetry_opt_in/opt_in_details_component.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/home/components/telemetry_opt_in/opt_in_details_component.js","mtime":1572296410272},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuT3B0SW5FeGFtcGxlRmx5b3V0ID0gdm9pZCAwOwoKdmFyIFJlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9yZWFjdDIgPSByZXF1aXJlKCJAa2JuL2kxOG4vcmVhY3QiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Ci8qKgogKiBSZWFjdCBjb21wb25lbnQgZm9yIGRpc3BsYXlpbmcgdGhlIGV4YW1wbGUgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIFRlbGVtZXRyeSBvcHQtaW4gYmFubmVyLgogKi8KCgp2YXIgT3B0SW5FeGFtcGxlRmx5b3V0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoT3B0SW5FeGFtcGxlRmx5b3V0LCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7CgogIGZ1bmN0aW9uIE9wdEluRXhhbXBsZUZseW91dCgpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT3B0SW5FeGFtcGxlRmx5b3V0KTsKCiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKE9wdEluRXhhbXBsZUZseW91dCkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInN0YXRlIiwgewogICAgICBkYXRhOiBudWxsLAogICAgICBpc0xvYWRpbmc6IHRydWUsCiAgICAgIGhhc1ByaXZpbGVnZVRvUmVhZDogZmFsc2UKICAgIH0pOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhPcHRJbkV4YW1wbGVGbHlvdXQsIFt7CiAgICBrZXk6ICJjb21wb25lbnREaWRNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdGhpcy5wcm9wcy5mZXRjaFRlbGVtZXRyeSgpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmV0dXJuIF90aGlzMi5zZXRTdGF0ZSh7CiAgICAgICAgICBkYXRhOiBBcnJheS5pc0FycmF5KHJlc3BvbnNlLmRhdGEpID8gcmVzcG9uc2UuZGF0YSA6IG51bGwsCiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLAogICAgICAgICAgaGFzUHJpdmlsZWdlVG9SZWFkOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBfdGhpczIuc2V0U3RhdGUoewogICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSwKICAgICAgICAgIGhhc1ByaXZpbGVnZVRvUmVhZDogZXJyLnN0YXR1cyAhPT0gNDAzCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlckJvZHkiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckJvZHkoX3JlZikgewogICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YSwKICAgICAgICAgIGlzTG9hZGluZyA9IF9yZWYuaXNMb2FkaW5nLAogICAgICAgICAgaGFzUHJpdmlsZWdlVG9SZWFkID0gX3JlZi5oYXNQcml2aWxlZ2VUb1JlYWQ7CgogICAgICBpZiAoaXNMb2FkaW5nKSB7CiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4R3JvdXAsIHsKICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAic3BhY2VBcm91bmQiCiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgICBncm93OiBmYWxzZQogICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlMb2FkaW5nU3Bpbm5lciwgewogICAgICAgICAgc2l6ZTogInhsIgogICAgICAgIH0pKSk7CiAgICAgIH0KCiAgICAgIGlmICghaGFzUHJpdmlsZWdlVG9SZWFkKSB7CiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAgICAgICB0aXRsZTogUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgICAgaWQ6ICJrYm4uaG9tZS50ZWxlbWV0cnkuY2FsbG91dC5lcnJvclVucHJpdmlsZWdlZFVzZXJUaXRsZSIsCiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAiRXJyb3IgZGlzcGxheWluZyBjbHVzdGVyIHN0YXRpc3RpY3MiCiAgICAgICAgICB9KSwKICAgICAgICAgIGNvbG9yOiAiZGFuZ2VyIiwKICAgICAgICAgIGljb25UeXBlOiAiY3Jvc3MiCiAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgIGlkOiAia2JuLmhvbWUudGVsZW1ldHJ5LmNhbGxvdXQuZXJyb3JVbnByaXZpbGVnZWRVc2VyRGVzY3JpcHRpb24iLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJZb3UgZG8gbm90IGhhdmUgYWNjZXNzIHRvIHNlZSB1bmVuY3J5cHRlZCBjbHVzdGVyIHN0YXRpc3RpY3MuIgogICAgICAgIH0pKTsKICAgICAgfQoKICAgICAgaWYgKGRhdGEgPT09IG51bGwpIHsKICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNhbGxPdXQsIHsKICAgICAgICAgIHRpdGxlOiBSZWFjdC5jcmVhdGVFbGVtZW50KF9yZWFjdDIuRm9ybWF0dGVkTWVzc2FnZSwgewogICAgICAgICAgICBpZDogImtibi5ob21lLnRlbGVtZXRyeS5jYWxsb3V0LmVycm9yTG9hZGluZ0NsdXN0ZXJTdGF0aXN0aWNzVGl0bGUiLAogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkVycm9yIGxvYWRpbmcgY2x1c3RlciBzdGF0aXN0aWNzIgogICAgICAgICAgfSksCiAgICAgICAgICBjb2xvcjogImRhbmdlciIsCiAgICAgICAgICBpY29uVHlwZTogImNyb3NzIgogICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgICBpZDogImtibi5ob21lLnRlbGVtZXRyeS5jYWxsb3V0LmVycm9yTG9hZGluZ0NsdXN0ZXJTdGF0aXN0aWNzRGVzY3JpcHRpb24iLAogICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VyZWQgd2hpbGUgYXR0ZW1wdGluZyB0byBmZXRjaCB0aGUgY2x1c3RlciBzdGF0aXN0aWNzLiBUaGlzIGNhbiBvY2N1ciBiZWNhdXNlIEVsYXN0aWNzZWFyY2ggZmFpbGVkLCBLaWJhbmEgZmFpbGVkLCBvciB0aGVyZSBpcyBhIG5ldHdvcmsgZXJyb3IuIENoZWNrIEtpYmFuYSwgdGhlbiByZWxvYWQgdGhlIHBhZ2UgYW5kIHRyeSBhZ2Fpbi4iCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvZGVCbG9jaywgewogICAgICAgIGxhbmd1YWdlOiAianMiCiAgICAgIH0sIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlQb3J0YWwsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbHlvdXQsIHsKICAgICAgICBvd25Gb2N1czogdHJ1ZSwKICAgICAgICBvbkNsb3NlOiB0aGlzLnByb3BzLm9uQ2xvc2UsCiAgICAgICAgbWF4V2lkdGg6IHRydWUKICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZseW91dEhlYWRlciwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCBudWxsLCBSZWFjdC5jcmVhdGVFbGVtZW50KCJoMiIsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJrYm4uaG9tZS50ZWxlbWV0cnkuY2FsbG91dC5jbHVzdGVyU3RhdGlzdGljc1RpdGxlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkNsdXN0ZXIgc3RhdGlzdGljcyIKICAgICAgfSkpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHRDb2xvciwgewogICAgICAgIGNvbG9yOiAic3ViZHVlZCIKICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRleHQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJrYm4uaG9tZS50ZWxlbWV0cnkuY2FsbG91dC5jbHVzdGVyU3RhdGlzdGljc0Rlc2NyaXB0aW9uIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlRoaXMgaXMgYW4gZXhhbXBsZSBvZiB0aGUgYmFzaWMgY2x1c3RlciBzdGF0aXN0aWNzIHRoYXQgd2UnbGwgY29sbGVjdC4gSXQgaW5jbHVkZXMgdGhlIG51bWJlciBvZiBpbmRpY2VzLCBzaGFyZHMsIGFuZCBub2Rlcy4gSXQgYWxzbyBpbmNsdWRlcyBoaWdoLWxldmVsIHVzYWdlIHN0YXRpc3RpY3MsIHN1Y2ggYXMgd2hldGhlciBtb25pdG9yaW5nIGlzIHR1cm5lZCBvbi4iCiAgICAgIH0pKSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmx5b3V0Qm9keSwgbnVsbCwgdGhpcy5yZW5kZXJCb2R5KHRoaXMuc3RhdGUpKSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE9wdEluRXhhbXBsZUZseW91dDsKfShSZWFjdC5QdXJlQ29tcG9uZW50KTsKCmV4cG9ydHMuT3B0SW5FeGFtcGxlRmx5b3V0ID0gT3B0SW5FeGFtcGxlRmx5b3V0Ow=="},null]}