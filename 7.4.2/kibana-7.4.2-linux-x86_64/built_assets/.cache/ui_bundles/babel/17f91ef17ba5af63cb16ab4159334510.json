{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/field_editor/components/scripting_help/test_script.js","dependencies":[{"path":"src/legacy/ui/public/field_editor/components/scripting_help/test_script.js","mtime":1572296412740},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlRlc3RTY3JpcHQgPSB2b2lkIDA7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicHJvcC10eXBlcyIpKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBUZXN0U2NyaXB0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhUZXN0U2NyaXB0LCBfQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gVGVzdFNjcmlwdCgpIHsKICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyOwoKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGVzdFNjcmlwdCk7CgogICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihUZXN0U2NyaXB0KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAic3RhdGUiLCB7CiAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgIGFkZGl0aW9uYWxGaWVsZHM6IFtdCiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJwcmV2aWV3U2NyaXB0IiwKICAgIC8qI19fUFVSRV9fKi8KICAgIF9hc3luY1RvR2VuZXJhdG9yKAogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIF90aGlzJHByb3BzLCBpbmRleFBhdHRlcm4sIGxhbmcsIG5hbWUsIHNjcmlwdCwgZXhlY3V0ZVNjcmlwdCwgc2NyaXB0UmVzcG9uc2U7CgogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcywgaW5kZXhQYXR0ZXJuID0gX3RoaXMkcHJvcHMuaW5kZXhQYXR0ZXJuLCBsYW5nID0gX3RoaXMkcHJvcHMubGFuZywgbmFtZSA9IF90aGlzJHByb3BzLm5hbWUsIHNjcmlwdCA9IF90aGlzJHByb3BzLnNjcmlwdCwgZXhlY3V0ZVNjcmlwdCA9IF90aGlzJHByb3BzLmV4ZWN1dGVTY3JpcHQ7CgogICAgICAgICAgICAgIGlmICghKCFzY3JpcHQgfHwgc2NyaXB0Lmxlbmd0aCA9PT0gMCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IHRydWUKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGV4ZWN1dGVTY3JpcHQoewogICAgICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgICAgIGxhbmc6IGxhbmcsCiAgICAgICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdCwKICAgICAgICAgICAgICAgIGluZGV4UGF0dGVyblRpdGxlOiBpbmRleFBhdHRlcm4udGl0bGUsCiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsRmllbGRzOiBfdGhpcy5zdGF0ZS5hZGRpdGlvbmFsRmllbGRzLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb24udmFsdWU7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIHNjcmlwdFJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKCEoc2NyaXB0UmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgICAgICAgICBwcmV2aWV3RGF0YTogc2NyaXB0UmVzcG9uc2UKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsCiAgICAgICAgICAgICAgICBwcmV2aWV3RGF0YTogc2NyaXB0UmVzcG9uc2UuaGl0cy5oaXRzLm1hcChmdW5jdGlvbiAoaGl0KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgICBfaWQ6IGhpdC5faWQKICAgICAgICAgICAgICAgICAgfSwgaGl0Ll9zb3VyY2UsIHt9LCBoaXQuZmllbGRzKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAib25BZGRpdGlvbmFsRmllbGRzQ2hhbmdlIiwgZnVuY3Rpb24gKHNlbGVjdGVkT3B0aW9ucykgewogICAgICBfdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgYWRkaXRpb25hbEZpZWxkczogc2VsZWN0ZWRPcHRpb25zCiAgICAgIH0pOwogICAgfSk7CgogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFRlc3RTY3JpcHQsIFt7CiAgICBrZXk6ICJjb21wb25lbnREaWRNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7CiAgICAgIGlmICh0aGlzLnByb3BzLnNjcmlwdCkgewogICAgICAgIHRoaXMucHJldmlld1NjcmlwdCgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyUHJldmlldyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUHJldmlldygpIHsKICAgICAgdmFyIHByZXZpZXdEYXRhID0gdGhpcy5zdGF0ZS5wcmV2aWV3RGF0YTsKCiAgICAgIGlmICghcHJldmlld0RhdGEpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgaWYgKHByZXZpZXdEYXRhLmVycm9yKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlDYWxsT3V0LCB7CiAgICAgICAgICB0aXRsZTogIlRoZXJlJ3MgYW4gZXJyb3IgaW4geW91ciBzY3JpcHQiLAogICAgICAgICAgY29sb3I6ICJkYW5nZXIiLAogICAgICAgICAgaWNvblR5cGU6ICJjcm9zcyIKICAgICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29kZUJsb2NrLCB7CiAgICAgICAgICBsYW5ndWFnZTogImpzb24iLAogICAgICAgICAgY2xhc3NOYW1lOiAic2NyaXB0UHJldmlld0NvZGVCbG9jayIsCiAgICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAic2NyaXB0ZWRGaWVsZFByZXZpZXciCiAgICAgICAgfSwgSlNPTi5zdHJpbmdpZnkocHJldmlld0RhdGEuZXJyb3IsIG51bGwsICcgJykpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGl0bGUsIHsKICAgICAgICBzaXplOiAieHMiCiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCAiRmlyc3QgMTAgcmVzdWx0cyIpKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgewogICAgICAgIHNpemU6ICJzIgogICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUNvZGVCbG9jaywgewogICAgICAgIGxhbmd1YWdlOiAianNvbiIsCiAgICAgICAgY2xhc3NOYW1lOiAic2NyaXB0UHJldmlld0NvZGVCbG9jayIsCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInNjcmlwdGVkRmllbGRQcmV2aWV3IgogICAgICB9LCBKU09OLnN0cmluZ2lmeShwcmV2aWV3RGF0YSwgbnVsbCwgJyAnKSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlclRvb2xiYXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlclRvb2xiYXIoKSB7CiAgICAgIHZhciBmaWVsZHNCeVR5cGVNYXAgPSBuZXcgTWFwKCk7CiAgICAgIHZhciBmaWVsZHMgPSBbXTsKICAgICAgdGhpcy5wcm9wcy5pbmRleFBhdHRlcm4uZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICByZXR1cm4gIWZpZWxkLm5hbWUuc3RhcnRzV2l0aCgnXycpOwogICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChmaWVsZCkgewogICAgICAgIGlmIChmaWVsZHNCeVR5cGVNYXAuaGFzKGZpZWxkLnR5cGUpKSB7CiAgICAgICAgICB2YXIgZmllbGRzTGlzdCA9IGZpZWxkc0J5VHlwZU1hcC5nZXQoZmllbGQudHlwZSk7CiAgICAgICAgICBmaWVsZHNMaXN0LnB1c2goZmllbGQubmFtZSk7CiAgICAgICAgICBmaWVsZHNCeVR5cGVNYXAuc2V0KGZpZWxkLnR5cGUsIGZpZWxkc0xpc3QpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBmaWVsZHNCeVR5cGVNYXAuc2V0KGZpZWxkLnR5cGUsIFtmaWVsZC5uYW1lXSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgZmllbGRzQnlUeXBlTWFwLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkc0xpc3QsIGZpZWxkVHlwZSkgewogICAgICAgIGZpZWxkcy5wdXNoKHsKICAgICAgICAgIGxhYmVsOiBmaWVsZFR5cGUsCiAgICAgICAgICBvcHRpb25zOiBmaWVsZHNMaXN0LnNvcnQoKS5tYXAoZnVuY3Rpb24gKGZpZWxkTmFtZSkgewogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgIHZhbHVlOiBmaWVsZE5hbWUsCiAgICAgICAgICAgICAgbGFiZWw6IGZpZWxkTmFtZQogICAgICAgICAgICB9OwogICAgICAgICAgfSkKICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIGZpZWxkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgaWYgKGEubGFiZWwgPCBiLmxhYmVsKSByZXR1cm4gLTE7CiAgICAgICAgaWYgKGEubGFiZWwgPiBiLmxhYmVsKSByZXR1cm4gMTsKICAgICAgICByZXR1cm4gMDsKICAgICAgfSk7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5GcmFnbWVudCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZvcm1Sb3csIHsKICAgICAgICBsYWJlbDogIkFkZGl0aW9uYWwgZmllbGRzIgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQ29tYm9Cb3gsIHsKICAgICAgICBwbGFjZWhvbGRlcjogIlNlbGVjdC4uLiIsCiAgICAgICAgb3B0aW9uczogZmllbGRzLAogICAgICAgIHNlbGVjdGVkT3B0aW9uczogdGhpcy5zdGF0ZS5hZGRpdGlvbmFsRmllbGRzLAogICAgICAgIG9uQ2hhbmdlOiB0aGlzLm9uQWRkaXRpb25hbEZpZWxkc0NoYW5nZSwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAiYWRkaXRpb25hbEZpZWxkc1NlbGVjdCIKICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpQnV0dG9uLCB7CiAgICAgICAgb25DbGljazogdGhpcy5wcmV2aWV3U2NyaXB0LAogICAgICAgIGRpc2FibGVkOiB0aGlzLnByb3BzLnNjcmlwdCA/IGZhbHNlIDogdHJ1ZSwKICAgICAgICBpc0xvYWRpbmc6IHRoaXMuc3RhdGUuaXNMb2FkaW5nLAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJydW5TY3JpcHRCdXR0b24iCiAgICAgIH0sICJSdW4gc2NyaXB0IikpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QuRnJhZ21lbnQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIG51bGwpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpVGV4dCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDMiLCBudWxsLCAiUHJldmlldyByZXN1bHRzIiksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoInAiLCBudWxsLCAiUnVuIHlvdXIgc2NyaXB0IHRvIHByZXZpZXcgdGhlIGZpcnN0IDEwIHJlc3VsdHMuIFlvdSBjYW4gYWxzbyBzZWxlY3Qgc29tZSBhZGRpdGlvbmFsIGZpZWxkcyB0byBpbmNsdWRlIGluIHlvdXIgcmVzdWx0cyB0byBnYWluIG1vcmUgY29udGV4dC4iKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIG51bGwpLCB0aGlzLnJlbmRlclRvb2xiYXIoKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVNwYWNlciwgbnVsbCksIHRoaXMucmVuZGVyUHJldmlldygpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBUZXN0U2NyaXB0Owp9KF9yZWFjdC5Db21wb25lbnQpOwoKZXhwb3J0cy5UZXN0U2NyaXB0ID0gVGVzdFNjcmlwdDsKVGVzdFNjcmlwdC5wcm9wVHlwZXMgPSB7CiAgaW5kZXhQYXR0ZXJuOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsCiAgbGFuZzogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZy5pc1JlcXVpcmVkLAogIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsCiAgc2NyaXB0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIGV4ZWN1dGVTY3JpcHQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQKfTsKVGVzdFNjcmlwdC5kZWZhdWx0UHJvcHMgPSB7CiAgbmFtZTogJ215U2NyaXB0ZWRGaWVsZCcKfTs="},null]}