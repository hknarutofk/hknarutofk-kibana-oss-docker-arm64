{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/management/sections/index_patterns/edit_index_pattern/edit_index_pattern.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/management/sections/index_patterns/edit_index_pattern/edit_index_pattern.js","mtime":1572296410608},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnJlcXVpcmUoIi4vaW5kZXhfaGVhZGVyIik7CgpyZXF1aXJlKCIuL2NyZWF0ZV9lZGl0X2ZpZWxkIik7Cgp2YXIgX2RvY190aXRsZSA9IHJlcXVpcmUoInVpL2RvY190aXRsZSIpOwoKdmFyIF91cmwgPSByZXF1aXJlKCJ1aS91cmwiKTsKCnZhciBfZWRpdF9zZWN0aW9ucyA9IHJlcXVpcmUoIi4vZWRpdF9zZWN0aW9ucyIpOwoKdmFyIF9ub3RpZnkgPSByZXF1aXJlKCJ1aS9ub3RpZnkiKTsKCnZhciBfcm91dGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9yb3V0ZXMiKSk7Cgp2YXIgX21vZHVsZXMgPSByZXF1aXJlKCJ1aS9tb2R1bGVzIik7Cgp2YXIgX2VkaXRfaW5kZXhfcGF0dGVybiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi9lZGl0X2luZGV4X3BhdHRlcm4uaHRtbCIpKTsKCnZhciBfZmllbGRfd2lsZGNhcmQgPSByZXF1aXJlKCJ1aS9maWVsZF93aWxkY2FyZCIpOwoKdmFyIF9pbmRleF9wYXR0ZXJuX2xpc3QgPSByZXF1aXJlKCJ1aS9tYW5hZ2VtZW50L2luZGV4X3BhdHRlcm5fbGlzdCIpOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgicmVhY3QtZG9tIik7Cgp2YXIgX3NvdXJjZV9maWx0ZXJzX3RhYmxlID0gcmVxdWlyZSgiLi9zb3VyY2VfZmlsdGVyc190YWJsZSIpOwoKdmFyIF9pbmRleGVkX2ZpZWxkc190YWJsZSA9IHJlcXVpcmUoIi4vaW5kZXhlZF9maWVsZHNfdGFibGUiKTsKCnZhciBfc2NyaXB0ZWRfZmllbGRzX3RhYmxlID0gcmVxdWlyZSgiLi9zY3JpcHRlZF9maWVsZHNfdGFibGUiKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9pMThuMiA9IHJlcXVpcmUoInVpL2kxOG4iKTsKCnZhciBfYnJlYWRjcnVtYnMgPSByZXF1aXJlKCIuLi9icmVhZGNydW1icyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9Cgp2YXIgUkVBQ1RfU09VUkNFX0ZJTFRFUlNfRE9NX0VMRU1FTlRfSUQgPSAncmVhY3RTb3VyY2VGaWx0ZXJzVGFibGUnOwp2YXIgUkVBQ1RfSU5ERVhFRF9GSUVMRFNfRE9NX0VMRU1FTlRfSUQgPSAncmVhY3RJbmRleGVkRmllbGRzVGFibGUnOwp2YXIgUkVBQ1RfU0NSSVBURURfRklFTERTX0RPTV9FTEVNRU5UX0lEID0gJ3JlYWN0U2NyaXB0ZWRGaWVsZHNUYWJsZSc7CgpmdW5jdGlvbiB1cGRhdGVTb3VyY2VGaWx0ZXJzVGFibGUoJHNjb3BlLCAkc3RhdGUpIHsKICBpZiAoJHN0YXRlLnRhYiA9PT0gJ3NvdXJjZUZpbHRlcnMnKSB7CiAgICAkc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChSRUFDVF9TT1VSQ0VfRklMVEVSU19ET01fRUxFTUVOVF9JRCk7CgogICAgICBpZiAoIW5vZGUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgICgwLCBfcmVhY3REb20ucmVuZGVyKShfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pMThuMi5JMThuQ29udGV4dCwgbnVsbCwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfc291cmNlX2ZpbHRlcnNfdGFibGUuU291cmNlRmlsdGVyc1RhYmxlLCB7CiAgICAgICAgaW5kZXhQYXR0ZXJuOiAkc2NvcGUuaW5kZXhQYXR0ZXJuLAogICAgICAgIGZpbHRlckZpbHRlcjogJHNjb3BlLmZpZWxkRmlsdGVyLAogICAgICAgIGZpZWxkV2lsZGNhcmRNYXRjaGVyOiAkc2NvcGUuZmllbGRXaWxkY2FyZE1hdGNoZXIsCiAgICAgICAgb25BZGRPclJlbW92ZUZpbHRlcjogZnVuY3Rpb24gb25BZGRPclJlbW92ZUZpbHRlcigpIHsKICAgICAgICAgICRzY29wZS5lZGl0U2VjdGlvbnMgPSAkc2NvcGUuZWRpdFNlY3Rpb25zUHJvdmlkZXIoJHNjb3BlLmluZGV4UGF0dGVybiwgJHNjb3BlLmZpZWxkRmlsdGVyLCAkc2NvcGUuaW5kZXhQYXR0ZXJuTGlzdFByb3ZpZGVyKTsKICAgICAgICAgICRzY29wZS5yZWZyZXNoRmlsdGVycygpOwogICAgICAgICAgJHNjb3BlLiRhcHBseSgpOwogICAgICAgIH0KICAgICAgfSkpLCBub2RlKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICBkZXN0cm95U291cmNlRmlsdGVyc1RhYmxlKCk7CiAgfQp9CgpmdW5jdGlvbiBkZXN0cm95U291cmNlRmlsdGVyc1RhYmxlKCkgewogIHZhciBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUkVBQ1RfU09VUkNFX0ZJTFRFUlNfRE9NX0VMRU1FTlRfSUQpOwogIG5vZGUgJiYgKDAsIF9yZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKShub2RlKTsKfQoKZnVuY3Rpb24gdXBkYXRlU2NyaXB0ZWRGaWVsZHNUYWJsZSgkc2NvcGUsICRzdGF0ZSkgewogIGlmICgkc3RhdGUudGFiID09PSAnc2NyaXB0ZWRGaWVsZHMnKSB7CiAgICAkc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChSRUFDVF9TQ1JJUFRFRF9GSUVMRFNfRE9NX0VMRU1FTlRfSUQpOwoKICAgICAgaWYgKCFub2RlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAoMCwgX3JlYWN0RG9tLnJlbmRlcikoX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfaTE4bjIuSTE4bkNvbnRleHQsIG51bGwsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3NjcmlwdGVkX2ZpZWxkc190YWJsZS5TY3JpcHRlZEZpZWxkc1RhYmxlLCB7CiAgICAgICAgaW5kZXhQYXR0ZXJuOiAkc2NvcGUuaW5kZXhQYXR0ZXJuLAogICAgICAgIGZpZWxkRmlsdGVyOiAkc2NvcGUuZmllbGRGaWx0ZXIsCiAgICAgICAgc2NyaXB0ZWRGaWVsZExhbmd1YWdlRmlsdGVyOiAkc2NvcGUuc2NyaXB0ZWRGaWVsZExhbmd1YWdlRmlsdGVyLAogICAgICAgIGhlbHBlcnM6IHsKICAgICAgICAgIHJlZGlyZWN0VG9Sb3V0ZTogZnVuY3Rpb24gcmVkaXJlY3RUb1JvdXRlKG9iaiwgcm91dGUpIHsKICAgICAgICAgICAgJHNjb3BlLmtiblVybC5yZWRpcmVjdFRvUm91dGUob2JqLCByb3V0ZSk7CiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTsKICAgICAgICAgIH0sCiAgICAgICAgICBnZXRSb3V0ZUhyZWY6IGZ1bmN0aW9uIGdldFJvdXRlSHJlZihvYmosIHJvdXRlKSB7CiAgICAgICAgICAgIHJldHVybiAkc2NvcGUua2JuVXJsLmdldFJvdXRlSHJlZihvYmosIHJvdXRlKTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIG9uUmVtb3ZlRmllbGQ6IGZ1bmN0aW9uIG9uUmVtb3ZlRmllbGQoKSB7CiAgICAgICAgICAkc2NvcGUuZWRpdFNlY3Rpb25zID0gJHNjb3BlLmVkaXRTZWN0aW9uc1Byb3ZpZGVyKCRzY29wZS5pbmRleFBhdHRlcm4sICRzY29wZS5maWVsZEZpbHRlciwgJHNjb3BlLmluZGV4UGF0dGVybkxpc3RQcm92aWRlcik7CiAgICAgICAgICAkc2NvcGUucmVmcmVzaEZpbHRlcnMoKTsKICAgICAgICAgICRzY29wZS4kYXBwbHkoKTsKICAgICAgICB9CiAgICAgIH0pKSwgbm9kZSk7CiAgICB9KTsKICB9IGVsc2UgewogICAgZGVzdHJveVNjcmlwdGVkRmllbGRzVGFibGUoKTsKICB9Cn0KCmZ1bmN0aW9uIGRlc3Ryb3lTY3JpcHRlZEZpZWxkc1RhYmxlKCkgewogIHZhciBub2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUkVBQ1RfU0NSSVBURURfRklFTERTX0RPTV9FTEVNRU5UX0lEKTsKICBub2RlICYmICgwLCBfcmVhY3REb20udW5tb3VudENvbXBvbmVudEF0Tm9kZSkobm9kZSk7Cn0KCmZ1bmN0aW9uIHVwZGF0ZUluZGV4ZWRGaWVsZHNUYWJsZSgkc2NvcGUsICRzdGF0ZSkgewogIGlmICgkc3RhdGUudGFiID09PSAnaW5kZXhlZEZpZWxkcycpIHsKICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24gKCkgewogICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFJFQUNUX0lOREVYRURfRklFTERTX0RPTV9FTEVNRU5UX0lEKTsKCiAgICAgIGlmICghbm9kZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgKDAsIF9yZWFjdERvbS5yZW5kZXIpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2kxOG4yLkkxOG5Db250ZXh0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9pbmRleGVkX2ZpZWxkc190YWJsZS5JbmRleGVkRmllbGRzVGFibGUsIHsKICAgICAgICBmaWVsZHM6ICRzY29wZS5maWVsZHMsCiAgICAgICAgaW5kZXhQYXR0ZXJuOiAkc2NvcGUuaW5kZXhQYXR0ZXJuLAogICAgICAgIGZpZWxkRmlsdGVyOiAkc2NvcGUuZmllbGRGaWx0ZXIsCiAgICAgICAgZmllbGRXaWxkY2FyZE1hdGNoZXI6ICRzY29wZS5maWVsZFdpbGRjYXJkTWF0Y2hlciwKICAgICAgICBpbmRleGVkRmllbGRUeXBlRmlsdGVyOiAkc2NvcGUuaW5kZXhlZEZpZWxkVHlwZUZpbHRlciwKICAgICAgICBoZWxwZXJzOiB7CiAgICAgICAgICByZWRpcmVjdFRvUm91dGU6IGZ1bmN0aW9uIHJlZGlyZWN0VG9Sb3V0ZShvYmosIHJvdXRlKSB7CiAgICAgICAgICAgICRzY29wZS5rYm5VcmwucmVkaXJlY3RUb1JvdXRlKG9iaiwgcm91dGUpOwogICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICB9LAogICAgICAgICAgZ2V0RmllbGRJbmZvOiAkc2NvcGUuZ2V0RmllbGRJbmZvCiAgICAgICAgfQogICAgICB9KSksIG5vZGUpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIGRlc3Ryb3lJbmRleGVkRmllbGRzVGFibGUoKTsKICB9Cn0KCmZ1bmN0aW9uIGRlc3Ryb3lJbmRleGVkRmllbGRzVGFibGUoKSB7CiAgdmFyIG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChSRUFDVF9JTkRFWEVEX0ZJRUxEU19ET01fRUxFTUVOVF9JRCk7CiAgbm9kZSAmJiAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKG5vZGUpOwp9Cgpfcm91dGVzLmRlZmF1bHQud2hlbignL21hbmFnZW1lbnQva2liYW5hL2luZGV4X3BhdHRlcm5zLzppbmRleFBhdHRlcm5JZCcsIHsKICB0ZW1wbGF0ZTogX2VkaXRfaW5kZXhfcGF0dGVybi5kZWZhdWx0LAogIGs3QnJlYWRjcnVtYnM6IF9icmVhZGNydW1icy5nZXRFZGl0QnJlYWRjcnVtYnMsCiAgcmVzb2x2ZTogewogICAgaW5kZXhQYXR0ZXJuOiBmdW5jdGlvbiBpbmRleFBhdHRlcm4oJHJvdXRlLCBQcm9taXNlLCByZWRpcmVjdFdoZW5NaXNzaW5nLCBpbmRleFBhdHRlcm5zKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaW5kZXhQYXR0ZXJucy5nZXQoJHJvdXRlLmN1cnJlbnQucGFyYW1zLmluZGV4UGF0dGVybklkKSkuY2F0Y2gocmVkaXJlY3RXaGVuTWlzc2luZygnL21hbmFnZW1lbnQva2liYW5hL2luZGV4X3BhdHRlcm5zJykpOwogICAgfQogIH0KfSk7CgpfbW9kdWxlcy51aU1vZHVsZXMuZ2V0KCdhcHBzL21hbmFnZW1lbnQnKS5jb250cm9sbGVyKCdtYW5hZ2VtZW50SW5kZXhQYXR0ZXJuc0VkaXQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZSwgUHJvbWlzZSwgY29uZmlnLCBpbmRleFBhdHRlcm5zLCBQcml2YXRlLCBBcHBTdGF0ZSwgY29uZmlybU1vZGFsKSB7CiAgdmFyICRzdGF0ZSA9ICRzY29wZS5zdGF0ZSA9IG5ldyBBcHBTdGF0ZSgpOwoKICB2YXIgX1ByaXZhdGUgPSBQcml2YXRlKF9maWVsZF93aWxkY2FyZC5GaWVsZFdpbGRjYXJkUHJvdmlkZXIpLAogICAgICBmaWVsZFdpbGRjYXJkTWF0Y2hlciA9IF9Qcml2YXRlLmZpZWxkV2lsZGNhcmRNYXRjaGVyOwoKICB2YXIgaW5kZXhQYXR0ZXJuTGlzdFByb3ZpZGVyID0gUHJpdmF0ZShfaW5kZXhfcGF0dGVybl9saXN0LkluZGV4UGF0dGVybkxpc3RGYWN0b3J5KSgpOwogICRzY29wZS5maWVsZFdpbGRjYXJkTWF0Y2hlciA9IGZpZWxkV2lsZGNhcmRNYXRjaGVyOwogICRzY29wZS5lZGl0U2VjdGlvbnNQcm92aWRlciA9IFByaXZhdGUoX2VkaXRfc2VjdGlvbnMuSW5kaWNlc0VkaXRTZWN0aW9uc1Byb3ZpZGVyKTsKICAkc2NvcGUua2JuVXJsID0gUHJpdmF0ZShfdXJsLktiblVybFByb3ZpZGVyKTsKICAkc2NvcGUuaW5kZXhQYXR0ZXJuID0gJHJvdXRlLmN1cnJlbnQubG9jYWxzLmluZGV4UGF0dGVybjsKICAkc2NvcGUuaW5kZXhQYXR0ZXJuTGlzdFByb3ZpZGVyID0gaW5kZXhQYXR0ZXJuTGlzdFByb3ZpZGVyOwogICRzY29wZS5pbmRleFBhdHRlcm4udGFncyA9IGluZGV4UGF0dGVybkxpc3RQcm92aWRlci5nZXRJbmRleFBhdHRlcm5UYWdzKCRzY29wZS5pbmRleFBhdHRlcm4sICRzY29wZS5pbmRleFBhdHRlcm4uaWQgPT09IGNvbmZpZy5nZXQoJ2RlZmF1bHRJbmRleCcpKTsKICAkc2NvcGUuZ2V0RmllbGRJbmZvID0gaW5kZXhQYXR0ZXJuTGlzdFByb3ZpZGVyLmdldEZpZWxkSW5mbzsKCiAgX2RvY190aXRsZS5kb2NUaXRsZS5jaGFuZ2UoJHNjb3BlLmluZGV4UGF0dGVybi50aXRsZSk7CgogIHZhciBvdGhlclBhdHRlcm5zID0gX2xvZGFzaC5kZWZhdWx0LmZpbHRlcigkcm91dGUuY3VycmVudC5sb2NhbHMuaW5kZXhQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHsKICAgIHJldHVybiBwYXR0ZXJuLmlkICE9PSAkc2NvcGUuaW5kZXhQYXR0ZXJuLmlkOwogIH0pOwoKICAkc2NvcGUuJHdhdGNoKCdpbmRleFBhdHRlcm4uZmllbGRzJywgZnVuY3Rpb24gKCkgewogICAgJHNjb3BlLmVkaXRTZWN0aW9ucyA9ICRzY29wZS5lZGl0U2VjdGlvbnNQcm92aWRlcigkc2NvcGUuaW5kZXhQYXR0ZXJuLCAkc2NvcGUuZmllbGRGaWx0ZXIsIGluZGV4UGF0dGVybkxpc3RQcm92aWRlcik7CiAgICAkc2NvcGUucmVmcmVzaEZpbHRlcnMoKTsKICAgICRzY29wZS5maWVsZHMgPSAkc2NvcGUuaW5kZXhQYXR0ZXJuLmdldE5vblNjcmlwdGVkRmllbGRzKCk7CiAgICB1cGRhdGVJbmRleGVkRmllbGRzVGFibGUoJHNjb3BlLCAkc3RhdGUpOwogICAgdXBkYXRlU2NyaXB0ZWRGaWVsZHNUYWJsZSgkc2NvcGUsICRzdGF0ZSk7CiAgfSk7CiAgJHNjb3BlLm1pZ3JhdGlvbiA9IHsKICAgIGlzTWlncmF0aW5nOiBmYWxzZSwKICAgIG5ld1RpdGxlOiAkc2NvcGUuaW5kZXhQYXR0ZXJuLmdldEluZGV4KCkKICB9OwogICRzY29wZS5taWdyYXRlID0KICAvKiNfX1BVUkVfXyovCiAgX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICRzY29wZS5taWdyYXRpb24uaXNNaWdyYXRpbmcgPSB0cnVlOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuICRzY29wZS5pbmRleFBhdHRlcm4ubWlncmF0ZSgkc2NvcGUubWlncmF0aW9uLm5ld1RpdGxlKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICRzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAkc2NvcGUubWlncmF0aW9uLmlzTWlncmF0aW5nID0gZmFsc2U7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogICRzY29wZS5yZWZyZXNoRmlsdGVycyA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBpbmRleGVkRmllbGRUeXBlcyA9IFtdOwogICAgdmFyIHNjcmlwdGVkRmllbGRMYW5ndWFnZXMgPSBbXTsKICAgICRzY29wZS5pbmRleFBhdHRlcm4uZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgIGlmIChmaWVsZC5zY3JpcHRlZCkgewogICAgICAgIHNjcmlwdGVkRmllbGRMYW5ndWFnZXMucHVzaChmaWVsZC5sYW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbmRleGVkRmllbGRUeXBlcy5wdXNoKGZpZWxkLnR5cGUpOwogICAgICB9CiAgICB9KTsKICAgICRzY29wZS5pbmRleGVkRmllbGRUeXBlcyA9IF9sb2Rhc2guZGVmYXVsdC51bmlxdWUoaW5kZXhlZEZpZWxkVHlwZXMpOwogICAgJHNjb3BlLnNjcmlwdGVkRmllbGRMYW5ndWFnZXMgPSBfbG9kYXNoLmRlZmF1bHQudW5pcXVlKHNjcmlwdGVkRmllbGRMYW5ndWFnZXMpOwogIH07CgogICRzY29wZS5jaGFuZ2VGaWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyLCB2YWwpIHsKICAgICRzY29wZVtmaWx0ZXJdID0gdmFsIHx8ICcnOyAvLyBudWxsIGNhdXNlcyBmaWx0ZXIgdG8gY2hlY2sgZm9yIG51bGwgZXhwbGljaXRseQogIH07CgogICRzY29wZS5jaGFuZ2VUYWIgPSBmdW5jdGlvbiAob2JqKSB7CiAgICAkc3RhdGUudGFiID0gb2JqLmluZGV4OwogICAgdXBkYXRlSW5kZXhlZEZpZWxkc1RhYmxlKCRzY29wZSwgJHN0YXRlKTsKICAgIHVwZGF0ZVNjcmlwdGVkRmllbGRzVGFibGUoJHNjb3BlLCAkc3RhdGUpOwogICAgdXBkYXRlU291cmNlRmlsdGVyc1RhYmxlKCRzY29wZSwgJHN0YXRlKTsKICAgICRzdGF0ZS5zYXZlKCk7CiAgfTsKCiAgJHNjb3BlLiR3YXRjaCgnc3RhdGUudGFiJywgZnVuY3Rpb24gKHRhYikgewogICAgaWYgKCF0YWIpICRzY29wZS5jaGFuZ2VUYWIoJHNjb3BlLmVkaXRTZWN0aW9uc1swXSk7CiAgfSk7CiAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ2luZGV4UGF0dGVybi5maWVsZHMnLCBmdW5jdGlvbiAoKSB7CiAgICAkc2NvcGUuY29uZmxpY3RGaWVsZHMgPSAkc2NvcGUuaW5kZXhQYXR0ZXJuLmZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7CiAgICAgIHJldHVybiBmaWVsZC50eXBlID09PSAnY29uZmxpY3QnOwogICAgfSk7CiAgfSk7CgogICRzY29wZS5yZWZyZXNoRmllbGRzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGNvbmZpcm1NZXNzYWdlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5tYW5hZ2VtZW50LmVkaXRJbmRleFBhdHRlcm4ucmVmcmVzaExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ1RoaXMgYWN0aW9uIHJlc2V0cyB0aGUgcG9wdWxhcml0eSBjb3VudGVyIG9mIGVhY2ggZmllbGQuJwogICAgfSk7CgogICAgdmFyIGNvbmZpcm1Nb2RhbE9wdGlvbnMgPSB7CiAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLm1hbmFnZW1lbnQuZWRpdEluZGV4UGF0dGVybi5yZWZyZXNoQnV0dG9uJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmVmcmVzaCcKICAgICAgfSksCiAgICAgIG9uQ29uZmlybTogZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfb25Db25maXJtID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmluZGV4UGF0dGVybi5pbml0KHRydWUpOwoKICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpZWxkcyA9ICRzY29wZS5pbmRleFBhdHRlcm4uZ2V0Tm9uU2NyaXB0ZWRGaWVsZHMoKTsKCiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgICB9KSk7CgogICAgICAgIGZ1bmN0aW9uIG9uQ29uZmlybSgpIHsKICAgICAgICAgIHJldHVybiBfb25Db25maXJtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gb25Db25maXJtOwogICAgICB9KCksCiAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLm1hbmFnZW1lbnQuZWRpdEluZGV4UGF0dGVybi5yZWZyZXNoSGVhZGVyJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnUmVmcmVzaCBmaWVsZCBsaXN0PycKICAgICAgfSkKICAgIH07CiAgICBjb25maXJtTW9kYWwoY29uZmlybU1lc3NhZ2UsIGNvbmZpcm1Nb2RhbE9wdGlvbnMpOwogIH07CgogICRzY29wZS5yZW1vdmVQYXR0ZXJuID0gZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gZG9SZW1vdmUoKSB7CiAgICAgIGlmICgkc2NvcGUuaW5kZXhQYXR0ZXJuLmlkID09PSBjb25maWcuZ2V0KCdkZWZhdWx0SW5kZXgnKSkgewogICAgICAgIGNvbmZpZy5yZW1vdmUoJ2RlZmF1bHRJbmRleCcpOwoKICAgICAgICBpZiAob3RoZXJQYXR0ZXJucy5sZW5ndGgpIHsKICAgICAgICAgIGNvbmZpZy5zZXQoJ2RlZmF1bHRJbmRleCcsIG90aGVyUGF0dGVybnNbMF0uaWQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgUHJvbWlzZS5yZXNvbHZlKCRzY29wZS5pbmRleFBhdHRlcm4uZGVzdHJveSgpKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAkbG9jYXRpb24udXJsKCcvbWFuYWdlbWVudC9raWJhbmEvaW5kZXhfcGF0dGVybnMnKTsKICAgICAgfSkuY2F0Y2goX25vdGlmeS5mYXRhbEVycm9yKTsKICAgIH0KCiAgICB2YXIgY29uZmlybU1vZGFsT3B0aW9ucyA9IHsKICAgICAgY29uZmlybUJ1dHRvblRleHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4ubWFuYWdlbWVudC5lZGl0SW5kZXhQYXR0ZXJuLmRlbGV0ZUJ1dHRvbicsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0RlbGV0ZScKICAgICAgfSksCiAgICAgIG9uQ29uZmlybTogZG9SZW1vdmUsCiAgICAgIHRpdGxlOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLm1hbmFnZW1lbnQuZWRpdEluZGV4UGF0dGVybi5kZWxldGVIZWFkZXInLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdEZWxldGUgaW5kZXggcGF0dGVybj8nCiAgICAgIH0pCiAgICB9OwogICAgY29uZmlybU1vZGFsKCcnLCBjb25maXJtTW9kYWxPcHRpb25zKTsKICB9OwoKICAkc2NvcGUuc2V0RGVmYXVsdFBhdHRlcm4gPSBmdW5jdGlvbiAoKSB7CiAgICBjb25maWcuc2V0KCdkZWZhdWx0SW5kZXgnLCAkc2NvcGUuaW5kZXhQYXR0ZXJuLmlkKTsKICB9OwoKICAkc2NvcGUuc2V0SW5kZXhQYXR0ZXJuc1RpbWVGaWVsZCA9IGZ1bmN0aW9uIChmaWVsZCkgewogICAgaWYgKGZpZWxkLnR5cGUgIT09ICdkYXRlJykgewogICAgICB2YXIgZXJyb3JNZXNzYWdlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5tYW5hZ2VtZW50LmVkaXRJbmRleFBhdHRlcm4ubm90RGF0ZUVycm9yTWVzc2FnZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1RoYXQgZmllbGQgaXMgYSB7ZmllbGRUeXBlfSBub3QgYSBkYXRlLicsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICBmaWVsZFR5cGU6IGZpZWxkLnR5cGUKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKGVycm9yTWVzc2FnZSk7CgogICAgICByZXR1cm47CiAgICB9CgogICAgJHNjb3BlLmluZGV4UGF0dGVybi50aW1lRmllbGROYW1lID0gZmllbGQubmFtZTsKICAgIHJldHVybiAkc2NvcGUuaW5kZXhQYXR0ZXJuLnNhdmUoKTsKICB9OwoKICAkc2NvcGUuJHdhdGNoKCdmaWVsZEZpbHRlcicsIGZ1bmN0aW9uICgpIHsKICAgICRzY29wZS5lZGl0U2VjdGlvbnMgPSAkc2NvcGUuZWRpdFNlY3Rpb25zUHJvdmlkZXIoJHNjb3BlLmluZGV4UGF0dGVybiwgJHNjb3BlLmZpZWxkRmlsdGVyLCBpbmRleFBhdHRlcm5MaXN0UHJvdmlkZXIpOwoKICAgIGlmICgkc2NvcGUuZmllbGRGaWx0ZXIgPT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgc3dpdGNoICgkc3RhdGUudGFiKSB7CiAgICAgIGNhc2UgJ2luZGV4ZWRGaWVsZHMnOgogICAgICAgIHVwZGF0ZUluZGV4ZWRGaWVsZHNUYWJsZSgkc2NvcGUsICRzdGF0ZSk7CgogICAgICBjYXNlICdzY3JpcHRlZEZpZWxkcyc6CiAgICAgICAgdXBkYXRlU2NyaXB0ZWRGaWVsZHNUYWJsZSgkc2NvcGUsICRzdGF0ZSk7CgogICAgICBjYXNlICdzb3VyY2VGaWx0ZXJzJzoKICAgICAgICB1cGRhdGVTb3VyY2VGaWx0ZXJzVGFibGUoJHNjb3BlLCAkc3RhdGUpOwogICAgfQogIH0pOwogICRzY29wZS4kd2F0Y2goJ2luZGV4ZWRGaWVsZFR5cGVGaWx0ZXInLCBmdW5jdGlvbiAoKSB7CiAgICBpZiAoJHNjb3BlLmluZGV4ZWRGaWVsZFR5cGVGaWx0ZXIgIT09IHVuZGVmaW5lZCAmJiAkc3RhdGUudGFiID09PSAnaW5kZXhlZEZpZWxkcycpIHsKICAgICAgdXBkYXRlSW5kZXhlZEZpZWxkc1RhYmxlKCRzY29wZSwgJHN0YXRlKTsKICAgIH0KICB9KTsKICAkc2NvcGUuJHdhdGNoKCdzY3JpcHRlZEZpZWxkTGFuZ3VhZ2VGaWx0ZXInLCBmdW5jdGlvbiAoKSB7CiAgICBpZiAoJHNjb3BlLnNjcmlwdGVkRmllbGRMYW5ndWFnZUZpbHRlciAhPT0gdW5kZWZpbmVkICYmICRzdGF0ZS50YWIgPT09ICdzY3JpcHRlZEZpZWxkcycpIHsKICAgICAgdXBkYXRlU2NyaXB0ZWRGaWVsZHNUYWJsZSgkc2NvcGUsICRzdGF0ZSk7CiAgICB9CiAgfSk7CiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7CiAgICBkZXN0cm95SW5kZXhlZEZpZWxkc1RhYmxlKCk7CiAgICBkZXN0cm95U2NyaXB0ZWRGaWVsZHNUYWJsZSgpOwogIH0pOwogIHVwZGF0ZVNjcmlwdGVkRmllbGRzVGFibGUoJHNjb3BlLCAkc3RhdGUpOwogIHVwZGF0ZVNvdXJjZUZpbHRlcnNUYWJsZSgkc2NvcGUsICRzdGF0ZSk7Cn0pOw=="},null]}