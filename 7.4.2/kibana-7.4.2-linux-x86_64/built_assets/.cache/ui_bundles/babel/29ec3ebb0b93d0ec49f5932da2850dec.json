{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/vis/agg_configs.js","dependencies":[{"path":"src/legacy/ui/public/vis/agg_configs.js","mtime":1572296413132},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFnZ0NvbmZpZ3MgPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9pbmRleGVkX2FycmF5ID0gcmVxdWlyZSgiLi4vaW5kZXhlZF9hcnJheSIpOwoKdmFyIF9hZ2dfY29uZmlnID0gcmVxdWlyZSgiLi9hZ2dfY29uZmlnIik7Cgp2YXIgX2FnZ19ncm91cHMgPSByZXF1aXJlKCIuL2VkaXRvcnMvZGVmYXVsdC9hZ2dfZ3JvdXBzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiByZW1vdmVQYXJlbnRBZ2dzKG9iaikgewogIGZvciAodmFyIHByb3AgaW4gb2JqKSB7CiAgICBpZiAocHJvcCA9PT0gJ3BhcmVudEFnZ3MnKSBkZWxldGUgb2JqW3Byb3BdO2Vsc2UgaWYgKF90eXBlb2Yob2JqW3Byb3BdKSA9PT0gJ29iamVjdCcpIHJlbW92ZVBhcmVudEFnZ3Mob2JqW3Byb3BdKTsKICB9Cn0KCmZ1bmN0aW9uIHBhcnNlUGFyZW50QWdncyhkc2xMdmxDdXJzb3IsIGRzbCkgewogIGlmIChkc2wucGFyZW50QWdncykgewogICAgX2xvZGFzaC5kZWZhdWx0LmVhY2goZHNsLnBhcmVudEFnZ3MsIGZ1bmN0aW9uIChhZ2csIGtleSkgewogICAgICBkc2xMdmxDdXJzb3Jba2V5XSA9IGFnZzsKICAgICAgcGFyc2VQYXJlbnRBZ2dzKGRzbEx2bEN1cnNvciwgYWdnKTsKICAgIH0pOwogIH0KfQoKdmFyIEFnZ0NvbmZpZ3MgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfSW5kZXhlZEFycmF5KSB7CiAgX2luaGVyaXRzKEFnZ0NvbmZpZ3MsIF9JbmRleGVkQXJyYXkpOwoKICBmdW5jdGlvbiBBZ2dDb25maWdzKGluZGV4UGF0dGVybikgewogICAgdmFyIF90aGlzOwoKICAgIHZhciBjb25maWdTdGF0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdOwogICAgdmFyIHNjaGVtYXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWdnQ29uZmlncyk7CgogICAgY29uZmlnU3RhdGVzID0gX2FnZ19jb25maWcuQWdnQ29uZmlnLmVuc3VyZUlkcyhjb25maWdTdGF0ZXMpOwogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQWdnQ29uZmlncykuY2FsbCh0aGlzLCB7CiAgICAgIGluZGV4OiBbJ2lkJ10sCiAgICAgIGdyb3VwOiBbJ3NjaGVtYS5ncm91cCcsICd0eXBlLm5hbWUnLCAndHlwZS50eXBlJywgJ3NjaGVtYS5uYW1lJ10KICAgIH0pKTsKICAgIF90aGlzLmluZGV4UGF0dGVybiA9IGluZGV4UGF0dGVybjsKICAgIF90aGlzLnNjaGVtYXMgPSBzY2hlbWFzOwogICAgY29uZmlnU3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtcykgewogICAgICByZXR1cm4gX3RoaXMuY3JlYXRlQWdnQ29uZmlnKHBhcmFtcyk7CiAgICB9KTsKCiAgICBpZiAoX3RoaXMuc2NoZW1hcykgewogICAgICBfdGhpcy5pbml0aWFsaXplRGVmYXVsdHNGcm9tU2NoZW1hcyhzY2hlbWFzKTsKICAgIH0KCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQWdnQ29uZmlncywgW3sKICAgIGtleTogImluaXRpYWxpemVEZWZhdWx0c0Zyb21TY2hlbWFzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplRGVmYXVsdHNGcm9tU2NoZW1hcyhzY2hlbWFzKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0cyBmb3IgYW55IHNjaGVtYSB3aGljaCBoYXMgdGhlbS4gSWYgdGhlIGRlZmF1bHRzCiAgICAgIC8vIGZvciBzb21lIHJlYXNvbiBoYXMgbW9yZSB0aGVuIHRoZSBtYXggb25seSBzZXQgdGhlIG1heCBudW1iZXIKICAgICAgLy8gb2YgZGVmYXVsdHMgKG5vdCBzdXJlIHdoeSBhIHNvbWVvbmUgZGVmaW5lIG1vcmUuLi4KICAgICAgLy8gYnV0IHdoYXRldmVyKS4gQWxzbyBpZiBhIHNjaGVtYS5uYW1lIGlzIGFscmVhZHkgc2V0IHRoZW4gZG9uJ3QKICAgICAgLy8gc2V0IGFueXRoaW5nLgogICAgICAoMCwgX2xvZGFzaC5kZWZhdWx0KShzY2hlbWFzKS5maWx0ZXIoZnVuY3Rpb24gKHNjaGVtYSkgewogICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHNjaGVtYS5kZWZhdWx0cykgJiYgc2NoZW1hLmRlZmF1bHRzLmxlbmd0aCA+IDA7CiAgICAgIH0pLmVhY2goZnVuY3Rpb24gKHNjaGVtYSkgewogICAgICAgIGlmICghX3RoaXMyLmJ5U2NoZW1hTmFtZVtzY2hlbWEubmFtZV0pIHsKICAgICAgICAgIHZhciBkZWZhdWx0cyA9IHNjaGVtYS5kZWZhdWx0cy5zbGljZSgwLCBzY2hlbWEubWF4KTsKCiAgICAgICAgICBfbG9kYXNoLmRlZmF1bHQuZWFjaChkZWZhdWx0cywgZnVuY3Rpb24gKGRlZmF1bHRTdGF0ZSkgewogICAgICAgICAgICB2YXIgc3RhdGUgPSBfbG9kYXNoLmRlZmF1bHQuZGVmYXVsdHMoewogICAgICAgICAgICAgIGlkOiBfYWdnX2NvbmZpZy5BZ2dDb25maWcubmV4dElkKF90aGlzMikKICAgICAgICAgICAgfSwgZGVmYXVsdFN0YXRlKTsKCiAgICAgICAgICAgIF90aGlzMi5wdXNoKG5ldyBfYWdnX2NvbmZpZy5BZ2dDb25maWcoX3RoaXMyLCBzdGF0ZSkpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KS5jb21taXQoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZXRUaW1lUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRpbWVSYW5nZSh0aW1lUmFuZ2UpIHsKICAgICAgdGhpcy50aW1lUmFuZ2UgPSB0aW1lUmFuZ2U7CgogICAgICB2YXIgdXBkYXRlQWdnVGltZVJhbmdlID0gZnVuY3Rpb24gdXBkYXRlQWdnVGltZVJhbmdlKGFnZykgewogICAgICAgIF9sb2Rhc2guZGVmYXVsdC5lYWNoKGFnZy5wYXJhbXMsIGZ1bmN0aW9uIChwYXJhbSkgewogICAgICAgICAgaWYgKHBhcmFtIGluc3RhbmNlb2YgX2FnZ19jb25maWcuQWdnQ29uZmlnKSB7CiAgICAgICAgICAgIHVwZGF0ZUFnZ1RpbWVSYW5nZShwYXJhbSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGlmIChfbG9kYXNoLmRlZmF1bHQuZ2V0KGFnZywgJ3R5cGUubmFtZScpID09PSAnZGF0ZV9oaXN0b2dyYW0nKSB7CiAgICAgICAgICBhZ2cucGFyYW1zLnRpbWVSYW5nZSA9IHRpbWVSYW5nZTsKICAgICAgICB9CiAgICAgIH07CgogICAgICB0aGlzLmZvckVhY2godXBkYXRlQWdnVGltZVJhbmdlKTsKICAgIH0gLy8gY2xvbmUgbWV0aG9kIHdpbGwgcmV1c2UgZXhpc3RpbmcgQWdnQ29uZmlnIGluIHRoZSBsaXN0ICh3aWxsIG5vdCBjcmVhdGUgbmV3IGluc3RhbmNlcykKCiAgfSwgewogICAga2V5OiAiY2xvbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sCiAgICAgICAgICBfcmVmJGVuYWJsZWRPbmx5ID0gX3JlZi5lbmFibGVkT25seSwKICAgICAgICAgIGVuYWJsZWRPbmx5ID0gX3JlZiRlbmFibGVkT25seSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkZW5hYmxlZE9ubHk7CgogICAgICB2YXIgZmlsdGVyQWdncyA9IGZ1bmN0aW9uIGZpbHRlckFnZ3MoYWdnKSB7CiAgICAgICAgaWYgKCFlbmFibGVkT25seSkgcmV0dXJuIHRydWU7CiAgICAgICAgcmV0dXJuIGFnZy5lbmFibGVkOwogICAgICB9OwoKICAgICAgdmFyIGFnZ0NvbmZpZ3MgPSBuZXcgQWdnQ29uZmlncyh0aGlzLmluZGV4UGF0dGVybiwgdGhpcy5yYXcuZmlsdGVyKGZpbHRlckFnZ3MpLCB0aGlzLnNjaGVtYXMpOwogICAgICByZXR1cm4gYWdnQ29uZmlnczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjcmVhdGVBZ2dDb25maWciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUFnZ0NvbmZpZyhwYXJhbXMpIHsKICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICAgIF9yZWYyJGFkZFRvQWdnQ29uZmlncyA9IF9yZWYyLmFkZFRvQWdnQ29uZmlncywKICAgICAgICAgIGFkZFRvQWdnQ29uZmlncyA9IF9yZWYyJGFkZFRvQWdnQ29uZmlncyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJGFkZFRvQWdnQ29uZmlnczsKCiAgICAgIHZhciBhZ2dDb25maWc7CgogICAgICBpZiAocGFyYW1zIGluc3RhbmNlb2YgX2FnZ19jb25maWcuQWdnQ29uZmlnKSB7CiAgICAgICAgYWdnQ29uZmlnID0gcGFyYW1zOwogICAgICAgIHBhcmFtcy5wYXJlbnQgPSB0aGlzOwogICAgICB9IGVsc2UgewogICAgICAgIGFnZ0NvbmZpZyA9IG5ldyBfYWdnX2NvbmZpZy5BZ2dDb25maWcodGhpcywgcGFyYW1zKTsKICAgICAgfQoKICAgICAgaWYgKGFkZFRvQWdnQ29uZmlncykgewogICAgICAgIHRoaXMucHVzaChhZ2dDb25maWcpOwogICAgICB9CgogICAgICByZXR1cm4gYWdnQ29uZmlnOwogICAgfQogICAgLyoqCiAgICAgKiBEYXRhLWJ5LWRhdGEgY29tcGFyaXNvbiBvZiB0aGlzIEFnZ3JlZ2F0aW9uCiAgICAgKiBJZ25vcmVzIHRoZSBub24tYXJyYXkgaW5kZXhlcwogICAgICogQHBhcmFtIGFnZ0NvbmZpZ3MgYW4gQWdnQ29uZmlncyBpbnN0YW5jZQogICAgICovCgogIH0sIHsKICAgIGtleTogImpzb25EYXRhRXF1YWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBqc29uRGF0YUVxdWFscyhhZ2dDb25maWdzKSB7CiAgICAgIGlmIChhZ2dDb25maWdzLmxlbmd0aCAhPT0gdGhpcy5sZW5ndGgpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgIGlmICghX2xvZGFzaC5kZWZhdWx0LmlzRXF1YWwoYWdnQ29uZmlnc1tpXS50b0pTT04oKSwgdGhpc1tpXS50b0pTT04oKSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogInRvRHNsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0RzbCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgaGllcmFyY2hpY2FsID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTsKICAgICAgdmFyIGRzbFRvcEx2bCA9IHt9OwogICAgICB2YXIgZHNsTHZsQ3Vyc29yOwogICAgICB2YXIgbmVzdGVkTWV0cmljczsKCiAgICAgIGlmIChoaWVyYXJjaGljYWwpIHsKICAgICAgICAvLyBjb2xsZWN0IGFsbCBtZXRyaWNzLCBhbmQgZmlsdGVyIG91dCB0aGUgb25lcyB0aGF0IHdlIHdvbid0IGJlIGNvcHlpbmcKICAgICAgICBuZXN0ZWRNZXRyaWNzID0gKDAsIF9sb2Rhc2guZGVmYXVsdCkodGhpcy5ieVR5cGVUeXBlLm1ldHJpY3MpLmZpbHRlcihmdW5jdGlvbiAoYWdnKSB7CiAgICAgICAgICByZXR1cm4gYWdnLnR5cGUubmFtZSAhPT0gJ2NvdW50JzsKICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGFnZykgewogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY29uZmlnOiBhZ2csCiAgICAgICAgICAgIGRzbDogYWdnLnRvRHNsKF90aGlzMykKICAgICAgICAgIH07CiAgICAgICAgfSkudmFsdWUoKTsKICAgICAgfQoKICAgICAgdGhpcy5nZXRSZXF1ZXN0QWdncygpLmZpbHRlcihmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgcmV0dXJuICFjb25maWcudHlwZS5oYXNOb0RzbDsKICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnLCBpLCBsaXN0KSB7CiAgICAgICAgaWYgKCFkc2xMdmxDdXJzb3IpIHsKICAgICAgICAgIC8vIHN0YXJ0IGF0IHRoZSB0b3AgbGV2ZWwKICAgICAgICAgIGRzbEx2bEN1cnNvciA9IGRzbFRvcEx2bDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIHByZXZDb25maWcgPSBsaXN0W2kgLSAxXTsKICAgICAgICAgIHZhciBwcmV2RHNsID0gZHNsTHZsQ3Vyc29yW3ByZXZDb25maWcuaWRdOyAvLyBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIG5lc3QgdW5kZXIgdGhlIHByZXZpb3VzIGFnZywgb3IKICAgICAgICAgIC8vIHB1dCBpdCBvbiB0aGUgc2FtZSBsZXZlbCBpZiB0aGUgcHJldmlvdXMgYWdnIGRvZXNuJ3QgYWNjZXB0CiAgICAgICAgICAvLyBzdWIgYWdncwoKICAgICAgICAgIGRzbEx2bEN1cnNvciA9IHByZXZEc2wuYWdncyB8fCBkc2xMdmxDdXJzb3I7CiAgICAgICAgfQoKICAgICAgICB2YXIgZHNsID0gZHNsTHZsQ3Vyc29yW2NvbmZpZy5pZF0gPSBjb25maWcudG9Ec2woX3RoaXMzKTsKICAgICAgICB2YXIgc3ViQWdnczsKICAgICAgICBwYXJzZVBhcmVudEFnZ3MoZHNsTHZsQ3Vyc29yLCBkc2wpOwoKICAgICAgICBpZiAoY29uZmlnLnR5cGUudHlwZSA9PT0gX2FnZ19ncm91cHMuQWdnR3JvdXBOYW1lcy5CdWNrZXRzICYmIGkgPCBsaXN0Lmxlbmd0aCAtIDEpIHsKICAgICAgICAgIC8vIGJ1Y2tldHMgdGhhdCBhcmUgbm90IHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QgYWNjZXB0IHN1Yi1hZ2dzCiAgICAgICAgICBzdWJBZ2dzID0gZHNsLmFnZ3MgfHwgKGRzbC5hZ2dzID0ge30pOwogICAgICAgIH0KCiAgICAgICAgaWYgKHN1YkFnZ3MgJiYgbmVzdGVkTWV0cmljcykgewogICAgICAgICAgbmVzdGVkTWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChhZ2cpIHsKICAgICAgICAgICAgc3ViQWdnc1thZ2cuY29uZmlnLmlkXSA9IGFnZy5kc2w7IC8vIGlmIGEgbmVzdGVkIG1ldHJpYyBhZ2cgaGFzIHBhcmVudCBhZ2dzLCB3ZSBoYXZlIHRvIGFkZCB0aGVtIHRvIGV2ZXJ5IGxldmVsIG9mIHRoZSB0cmVlCiAgICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSAiYnVja2V0X3BhdGgiIHJlZmVyZW5jZXMgaW4gdGhlIG5lc3RlZCBtZXRyaWMgYWdnIGl0c2VsZiBhcmUgc3RpbGwgd29ya2luZwoKICAgICAgICAgICAgaWYgKGFnZy5kc2wucGFyZW50QWdncykgewogICAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGFnZy5kc2wucGFyZW50QWdncykuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHsKICAgICAgICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSwKICAgICAgICAgICAgICAgICAgICBwYXJlbnRBZ2dJZCA9IF9yZWY0WzBdLAogICAgICAgICAgICAgICAgICAgIHBhcmVudEFnZyA9IF9yZWY0WzFdOwoKICAgICAgICAgICAgICAgIHN1YkFnZ3NbcGFyZW50QWdnSWRdID0gcGFyZW50QWdnOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZW1vdmVQYXJlbnRBZ2dzKGRzbFRvcEx2bCk7CiAgICAgIHJldHVybiBkc2xUb3BMdmw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UmVxdWVzdEFnZ3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlcXVlc3RBZ2dzKCkgewogICAgICAvL2NvbGxlY3QgYWxsIHRoZSBhZ2dyZWdhdGlvbnMKICAgICAgdmFyIGFnZ3JlZ2F0aW9ucyA9IHRoaXMucmVkdWNlKGZ1bmN0aW9uIChyZXF1ZXN0VmFsdWVzQWdncywgYWdnKSB7CiAgICAgICAgdmFyIGFnZ3MgPSBhZ2cuZ2V0UmVxdWVzdEFnZ3MoKTsKICAgICAgICByZXR1cm4gYWdncyA/IHJlcXVlc3RWYWx1ZXNBZ2dzLmNvbmNhdChhZ2dzKSA6IHJlcXVlc3RWYWx1ZXNBZ2dzOwogICAgICB9LCBbXSk7IC8vbW92ZSBtZXRyaWNzIHRvIHRoZSBlbmQKCiAgICAgIHJldHVybiBfbG9kYXNoLmRlZmF1bHQuc29ydEJ5KGFnZ3JlZ2F0aW9ucywgZnVuY3Rpb24gKGFnZykgewogICAgICAgIHJldHVybiBhZ2cudHlwZS50eXBlID09PSBfYWdnX2dyb3Vwcy5BZ2dHcm91cE5hbWVzLk1ldHJpY3MgPyAxIDogMDsKICAgICAgfSk7CiAgICB9CiAgICAvKioKICAgICAqIEdldHMgdGhlIEFnZ0NvbmZpZ3MgKGFuZCBwb3NzaWJseSBSZXNwb25zZUFnZ0NvbmZpZ3MpIHRoYXQKICAgICAqIHJlcHJlc2VudCB0aGUgdmFsdWVzIHRoYXQgd2lsbCBiZSBwcm9kdWNlZCB3aGVuIGFsbCBhZ2dzCiAgICAgKiBhcmUgcnVuLgogICAgICoKICAgICAqIFdpdGggbXVsdGktdmFsdWUgbWV0cmljIGFnZ3MgaXQgaXMgcG9zc2libGUgZm9yIGEgc2luZ2xlIGFnZwogICAgICogcmVxdWVzdCB0byByZXN1bHQgaW4gbXVsdGlwbGUgYWdnIHZhbHVlcywgd2hpY2ggaXMgd2h5IHRoZSBsZW5ndGgKICAgICAqIG9mIGEgdmlzJyByZXNwb25zZVZhbHVlc0FnZ3MgbWF5IGJlIGRpZmZlcmVudCB0aGFuIHRoZSB2aXMnIGFnZ3MKICAgICAqCiAgICAgKiBAcmV0dXJuIHthcnJheVtBZ2dDb25maWddfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFJlc3BvbnNlQWdncyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzcG9uc2VBZ2dzKCkgewogICAgICByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0QWdncygpLnJlZHVjZShmdW5jdGlvbiAocmVzcG9uc2VWYWx1ZXNBZ2dzLCBhZ2cpIHsKICAgICAgICB2YXIgYWdncyA9IGFnZy5nZXRSZXNwb25zZUFnZ3MoKTsKICAgICAgICByZXR1cm4gYWdncyA/IHJlc3BvbnNlVmFsdWVzQWdncy5jb25jYXQoYWdncykgOiByZXNwb25zZVZhbHVlc0FnZ3M7CiAgICAgIH0sIFtdKTsKICAgIH0KICAgIC8qKgogICAgICogRmluZCBhIHJlc3BvbnNlIGFnZyBieSBpdCdzIGlkLiBUaGlzIG1heSBiZSBhbiBhZ2cgaW4gdGhlIGFnZ0NvbmZpZ3MsIG9yIG9uZQogICAgICogY3JlYXRlZCBzcGVjaWZpY2FsbHkgZm9yIGEgcmVzcG9uc2UgdmFsdWUKICAgICAqCiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGlkIC0gdGhlIGlkIG9mIHRoZSBhZ2cgdG8gZmluZAogICAgICogQHJldHVybiB7QWdnQ29uZmlnfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFJlc3BvbnNlQWdnQnlJZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzcG9uc2VBZ2dCeUlkKGlkKSB7CiAgICAgIGlkID0gU3RyaW5nKGlkKTsKCiAgICAgIHZhciByZXFBZ2cgPSBfbG9kYXNoLmRlZmF1bHQuZmluZCh0aGlzLmdldFJlcXVlc3RBZ2dzKCksIGZ1bmN0aW9uIChhZ2cpIHsKICAgICAgICByZXR1cm4gaWQuc3Vic3RyKDAsIFN0cmluZyhhZ2cuaWQpLmxlbmd0aCkgPT09IGFnZy5pZDsKICAgICAgfSk7CgogICAgICBpZiAoIXJlcUFnZykgcmV0dXJuOwogICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LmZpbmQocmVxQWdnLmdldFJlc3BvbnNlQWdncygpLCB7CiAgICAgICAgaWQ6IGlkCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uU2VhcmNoUmVxdWVzdFN0YXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblNlYXJjaFJlcXVlc3RTdGFydChzZWFyY2hTb3VyY2UsIHNlYXJjaFJlcXVlc3QpIHsKICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuZ2V0UmVxdWVzdEFnZ3MoKS5tYXAoZnVuY3Rpb24gKGFnZykgewogICAgICAgIHJldHVybiBhZ2cub25TZWFyY2hSZXF1ZXN0U3RhcnQoc2VhcmNoU291cmNlLCBzZWFyY2hSZXF1ZXN0KTsKICAgICAgfSkpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFnZ0NvbmZpZ3M7Cn0oX2luZGV4ZWRfYXJyYXkuSW5kZXhlZEFycmF5KTsKCmV4cG9ydHMuQWdnQ29uZmlncyA9IEFnZ0NvbmZpZ3M7"},null]}