{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/embeddable_api/public/np_ready/public/lib/actions/edit_panel_action.js","dependencies":[{"path":"src/legacy/core_plugins/embeddable_api/public/np_ready/public/lib/actions/edit_panel_action.js","mtime":1572296409608},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuRWRpdFBhbmVsQWN0aW9uID0gZXhwb3J0cy5FRElUX1BBTkVMX0FDVElPTl9JRCA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9hY3Rpb24gPSByZXF1aXJlKCIuL2FjdGlvbiIpOwoKdmFyIF90eXBlcyA9IHJlcXVpcmUoIi4uL3R5cGVzIik7Cgp2YXIgX2Vycm9ycyA9IHJlcXVpcmUoIi4uL2Vycm9ycyIpOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgRURJVF9QQU5FTF9BQ1RJT05fSUQgPSAnZWRpdFBhbmVsJzsKZXhwb3J0cy5FRElUX1BBTkVMX0FDVElPTl9JRCA9IEVESVRfUEFORUxfQUNUSU9OX0lEOwoKdmFyIEVkaXRQYW5lbEFjdGlvbiA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9BY3Rpb24pIHsKICBfaW5oZXJpdHMoRWRpdFBhbmVsQWN0aW9uLCBfQWN0aW9uKTsKCiAgZnVuY3Rpb24gRWRpdFBhbmVsQWN0aW9uKGdldEVtYmVkZGFibGVGYWN0b3J5KSB7CiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVkaXRQYW5lbEFjdGlvbik7CgogICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoRWRpdFBhbmVsQWN0aW9uKS5jYWxsKHRoaXMsIEVESVRfUEFORUxfQUNUSU9OX0lEKSk7CiAgICBfdGhpcy5nZXRFbWJlZGRhYmxlRmFjdG9yeSA9IGdldEVtYmVkZGFibGVGYWN0b3J5OwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInR5cGUiLCBFRElUX1BBTkVMX0FDVElPTl9JRCk7CgogICAgX3RoaXMub3JkZXIgPSAxNTsKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhFZGl0UGFuZWxBY3Rpb24sIFt7CiAgICBrZXk6ICJnZXREaXNwbGF5TmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoX3JlZikgewogICAgICB2YXIgZW1iZWRkYWJsZSA9IF9yZWYuZW1iZWRkYWJsZTsKICAgICAgdmFyIGZhY3RvcnkgPSB0aGlzLmdldEVtYmVkZGFibGVGYWN0b3J5KGVtYmVkZGFibGUudHlwZSk7CgogICAgICBpZiAoIWZhY3RvcnkpIHsKICAgICAgICB0aHJvdyBuZXcgX2Vycm9ycy5FbWJlZGRhYmxlRmFjdG9yeU5vdEZvdW5kRXJyb3IoZW1iZWRkYWJsZS50eXBlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIF9pMThuLmkxOG4udHJhbnNsYXRlKCdlbWJlZGRhYmxlQXBpLnBhbmVsLmVkaXRQYW5lbC5kaXNwbGF5TmFtZScsIHsKICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0VkaXQge3ZhbHVlfScsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICB2YWx1ZTogZmFjdG9yeS5nZXREaXNwbGF5TmFtZSgpCiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRJY29uVHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SWNvblR5cGUoKSB7CiAgICAgIHJldHVybiAncGVuY2lsJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc0NvbXBhdGlibGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9pc0NvbXBhdGlibGUgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKF9yZWYyKSB7CiAgICAgICAgdmFyIGVtYmVkZGFibGUsIGNhbkVkaXRFbWJlZGRhYmxlLCBpbkRhc2hib2FyZEVkaXRNb2RlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGVtYmVkZGFibGUgPSBfcmVmMi5lbWJlZGRhYmxlOwogICAgICAgICAgICAgICAgY2FuRWRpdEVtYmVkZGFibGUgPSBCb29sZWFuKGVtYmVkZGFibGUgJiYgZW1iZWRkYWJsZS5nZXRPdXRwdXQoKS5lZGl0YWJsZSAmJiBlbWJlZGRhYmxlLmdldE91dHB1dCgpLmVkaXRVcmwpOwogICAgICAgICAgICAgICAgaW5EYXNoYm9hcmRFZGl0TW9kZSA9IGVtYmVkZGFibGUuZ2V0SW5wdXQoKS52aWV3TW9kZSA9PT0gX3R5cGVzLlZpZXdNb2RlLkVESVQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBCb29sZWFuKGNhbkVkaXRFbWJlZGRhYmxlICYmIGluRGFzaGJvYXJkRWRpdE1vZGUpKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGlzQ29tcGF0aWJsZShfeCkgewogICAgICAgIHJldHVybiBfaXNDb21wYXRpYmxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpc0NvbXBhdGlibGU7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJleGVjdXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlKCkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEhyZWYiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEhyZWYoX3JlZjMpIHsKICAgICAgdmFyIGVtYmVkZGFibGUgPSBfcmVmMy5lbWJlZGRhYmxlOwogICAgICB2YXIgZWRpdFVybCA9IGVtYmVkZGFibGUgPyBlbWJlZGRhYmxlLmdldE91dHB1dCgpLmVkaXRVcmwgOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiBlZGl0VXJsID8gZWRpdFVybCA6ICcnOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEVkaXRQYW5lbEFjdGlvbjsKfShfYWN0aW9uLkFjdGlvbik7CgpleHBvcnRzLkVkaXRQYW5lbEFjdGlvbiA9IEVkaXRQYW5lbEFjdGlvbjs="},null]}