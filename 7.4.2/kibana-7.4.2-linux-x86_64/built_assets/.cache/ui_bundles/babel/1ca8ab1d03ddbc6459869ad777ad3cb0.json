{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/visualize/saved_visualizations/saved_visualization_references.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/visualize/saved_visualizations/saved_visualization_references.js","mtime":1572296410820},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmV4dHJhY3RSZWZlcmVuY2VzID0gZXh0cmFjdFJlZmVyZW5jZXM7CmV4cG9ydHMuaW5qZWN0UmVmZXJlbmNlcyA9IGluamVjdFJlZmVyZW5jZXM7CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgovKgogKiBMaWNlbnNlZCB0byBFbGFzdGljc2VhcmNoIEIuVi4gdW5kZXIgb25lIG9yIG1vcmUgY29udHJpYnV0b3IKICogbGljZW5zZSBhZ3JlZW1lbnRzLiBTZWUgdGhlIE5PVElDRSBmaWxlIGRpc3RyaWJ1dGVkIHdpdGgKICogdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQKICogb3duZXJzaGlwLiBFbGFzdGljc2VhcmNoIEIuVi4gbGljZW5zZXMgdGhpcyBmaWxlIHRvIHlvdSB1bmRlcgogKiB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heQogKiBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywKICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4KICogIkFTIElTIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZCiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZQogKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zCiAqIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KZnVuY3Rpb24gZXh0cmFjdFJlZmVyZW5jZXMoX3JlZikgewogIHZhciBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLAogICAgICBfcmVmJHJlZmVyZW5jZXMgPSBfcmVmLnJlZmVyZW5jZXMsCiAgICAgIHJlZmVyZW5jZXMgPSBfcmVmJHJlZmVyZW5jZXMgPT09IHZvaWQgMCA/IFtdIDogX3JlZiRyZWZlcmVuY2VzOwoKICB2YXIgdXBkYXRlZEF0dHJpYnV0ZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBhdHRyaWJ1dGVzKTsKCiAgdmFyIHVwZGF0ZWRSZWZlcmVuY2VzID0gX3RvQ29uc3VtYWJsZUFycmF5KHJlZmVyZW5jZXMpOyAvLyBFeHRyYWN0IHNhdmVkIHNlYXJjaAoKCiAgaWYgKHVwZGF0ZWRBdHRyaWJ1dGVzLnNhdmVkU2VhcmNoSWQpIHsKICAgIHVwZGF0ZWRSZWZlcmVuY2VzLnB1c2goewogICAgICBuYW1lOiAnc2VhcmNoXzAnLAogICAgICB0eXBlOiAnc2VhcmNoJywKICAgICAgaWQ6IHVwZGF0ZWRBdHRyaWJ1dGVzLnNhdmVkU2VhcmNoSWQKICAgIH0pOwogICAgZGVsZXRlIHVwZGF0ZWRBdHRyaWJ1dGVzLnNhdmVkU2VhcmNoSWQ7CiAgICB1cGRhdGVkQXR0cmlidXRlcy5zYXZlZFNlYXJjaFJlZk5hbWUgPSAnc2VhcmNoXzAnOwogIH0gLy8gRXh0cmFjdCBpbmRleCBwYXR0ZXJucyBmcm9tIGNvbnRyb2xzCgoKICBpZiAodXBkYXRlZEF0dHJpYnV0ZXMudmlzU3RhdGUpIHsKICAgIHZhciB2aXNTdGF0ZSA9IEpTT04ucGFyc2UodXBkYXRlZEF0dHJpYnV0ZXMudmlzU3RhdGUpOwogICAgdmFyIGNvbnRyb2xzID0gdmlzU3RhdGUucGFyYW1zICYmIHZpc1N0YXRlLnBhcmFtcy5jb250cm9scyB8fCBbXTsKICAgIGNvbnRyb2xzLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2wsIGkpIHsKICAgICAgaWYgKCFjb250cm9sLmluZGV4UGF0dGVybikgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY29udHJvbC5pbmRleFBhdHRlcm5SZWZOYW1lID0gImNvbnRyb2xfIi5jb25jYXQoaSwgIl9pbmRleF9wYXR0ZXJuIik7CiAgICAgIHVwZGF0ZWRSZWZlcmVuY2VzLnB1c2goewogICAgICAgIG5hbWU6IGNvbnRyb2wuaW5kZXhQYXR0ZXJuUmVmTmFtZSwKICAgICAgICB0eXBlOiAnaW5kZXgtcGF0dGVybicsCiAgICAgICAgaWQ6IGNvbnRyb2wuaW5kZXhQYXR0ZXJuCiAgICAgIH0pOwogICAgICBkZWxldGUgY29udHJvbC5pbmRleFBhdHRlcm47CiAgICB9KTsKICAgIHVwZGF0ZWRBdHRyaWJ1dGVzLnZpc1N0YXRlID0gSlNPTi5zdHJpbmdpZnkodmlzU3RhdGUpOwogIH0KCiAgcmV0dXJuIHsKICAgIHJlZmVyZW5jZXM6IHVwZGF0ZWRSZWZlcmVuY2VzLAogICAgYXR0cmlidXRlczogdXBkYXRlZEF0dHJpYnV0ZXMKICB9Owp9CgpmdW5jdGlvbiBpbmplY3RSZWZlcmVuY2VzKHNhdmVkT2JqZWN0LCByZWZlcmVuY2VzKSB7CiAgaWYgKHNhdmVkT2JqZWN0LnNhdmVkU2VhcmNoUmVmTmFtZSkgewogICAgdmFyIHNhdmVkU2VhcmNoUmVmZXJlbmNlID0gcmVmZXJlbmNlcy5maW5kKGZ1bmN0aW9uIChyZWZlcmVuY2UpIHsKICAgICAgcmV0dXJuIHJlZmVyZW5jZS5uYW1lID09PSBzYXZlZE9iamVjdC5zYXZlZFNlYXJjaFJlZk5hbWU7CiAgICB9KTsKCiAgICBpZiAoIXNhdmVkU2VhcmNoUmVmZXJlbmNlKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiQ291bGQgbm90IGZpbmQgc2F2ZWQgc2VhcmNoIHJlZmVyZW5jZSBcIiIuY29uY2F0KHNhdmVkT2JqZWN0LnNhdmVkU2VhcmNoUmVmTmFtZSwgIlwiIikpOwogICAgfQoKICAgIHNhdmVkT2JqZWN0LnNhdmVkU2VhcmNoSWQgPSBzYXZlZFNlYXJjaFJlZmVyZW5jZS5pZDsKICAgIGRlbGV0ZSBzYXZlZE9iamVjdC5zYXZlZFNlYXJjaFJlZk5hbWU7CiAgfQoKICBpZiAoc2F2ZWRPYmplY3QudmlzU3RhdGUpIHsKICAgIHZhciBjb250cm9scyA9IHNhdmVkT2JqZWN0LnZpc1N0YXRlLnBhcmFtcyAmJiBzYXZlZE9iamVjdC52aXNTdGF0ZS5wYXJhbXMuY29udHJvbHMgfHwgW107CiAgICBjb250cm9scy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sKSB7CiAgICAgIGlmICghY29udHJvbC5pbmRleFBhdHRlcm5SZWZOYW1lKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgcmVmZXJlbmNlID0gcmVmZXJlbmNlcy5maW5kKGZ1bmN0aW9uIChyZWZlcmVuY2UpIHsKICAgICAgICByZXR1cm4gcmVmZXJlbmNlLm5hbWUgPT09IGNvbnRyb2wuaW5kZXhQYXR0ZXJuUmVmTmFtZTsKICAgICAgfSk7CgogICAgICBpZiAoIXJlZmVyZW5jZSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQ291bGQgbm90IGZpbmQgaW5kZXggcGF0dGVybiByZWZlcmVuY2UgXCIiLmNvbmNhdChjb250cm9sLmluZGV4UGF0dGVyblJlZk5hbWUsICJcIiIpKTsKICAgICAgfQoKICAgICAgY29udHJvbC5pbmRleFBhdHRlcm4gPSByZWZlcmVuY2UuaWQ7CiAgICAgIGRlbGV0ZSBjb250cm9sLmluZGV4UGF0dGVyblJlZk5hbWU7CiAgICB9KTsKICB9Cn0="},null]}