{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/context/query/actions.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/context/query/actions.js","mtime":1572296410024},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlF1ZXJ5QWN0aW9uc1Byb3ZpZGVyID0gUXVlcnlBY3Rpb25zUHJvdmlkZXI7Cgp2YXIgX2xvZGFzaCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgibG9kYXNoIikpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7Cgp2YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfbm90aWZ5ID0gcmVxdWlyZSgidWkvbm90aWZ5Iik7Cgp2YXIgX2FuY2hvciA9IHJlcXVpcmUoIi4uL2FwaS9hbmNob3IiKTsKCnZhciBfY29udGV4dCA9IHJlcXVpcmUoIi4uL2FwaS9jb250ZXh0Iik7Cgp2YXIgX3F1ZXJ5X3BhcmFtZXRlcnMgPSByZXF1aXJlKCIuLi9xdWVyeV9wYXJhbWV0ZXJzIik7Cgp2YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoIi4vY29uc3RhbnRzIik7Cgp2YXIgX3B1YmxpYyA9IHJlcXVpcmUoIi4uLy4uLy4uLy4uL2tpYmFuYV9yZWFjdC9wdWJsaWMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gIltvYmplY3QgQXJndW1lbnRzXSIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSB9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZSIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCmZ1bmN0aW9uIFF1ZXJ5QWN0aW9uc1Byb3ZpZGVyKFByaXZhdGUsIFByb21pc2UpIHsKICB2YXIgZmV0Y2hBbmNob3IgPSBQcml2YXRlKF9hbmNob3IuZmV0Y2hBbmNob3JQcm92aWRlcik7CgogIHZhciBfUHJpdmF0ZSA9IFByaXZhdGUoX2NvbnRleHQuZmV0Y2hDb250ZXh0UHJvdmlkZXIpLAogICAgICBmZXRjaFN1cnJvdW5kaW5nRG9jcyA9IF9Qcml2YXRlLmZldGNoU3Vycm91bmRpbmdEb2NzOwoKICB2YXIgX1ByaXZhdGUyID0gUHJpdmF0ZShfcXVlcnlfcGFyYW1ldGVycy5RdWVyeVBhcmFtZXRlckFjdGlvbnNQcm92aWRlciksCiAgICAgIGluY3JlYXNlUHJlZGVjZXNzb3JDb3VudCA9IF9Qcml2YXRlMi5pbmNyZWFzZVByZWRlY2Vzc29yQ291bnQsCiAgICAgIGluY3JlYXNlU3VjY2Vzc29yQ291bnQgPSBfUHJpdmF0ZTIuaW5jcmVhc2VTdWNjZXNzb3JDb3VudCwKICAgICAgc2V0UHJlZGVjZXNzb3JDb3VudCA9IF9Qcml2YXRlMi5zZXRQcmVkZWNlc3NvckNvdW50LAogICAgICBzZXRRdWVyeVBhcmFtZXRlcnMgPSBfUHJpdmF0ZTIuc2V0UXVlcnlQYXJhbWV0ZXJzLAogICAgICBzZXRTdWNjZXNzb3JDb3VudCA9IF9Qcml2YXRlMi5zZXRTdWNjZXNzb3JDb3VudDsKCiAgdmFyIHNldEZhaWxlZFN0YXR1cyA9IGZ1bmN0aW9uIHNldEZhaWxlZFN0YXR1cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJqZWN0KSB7CiAgICAgIHZhciBkZXRhaWxzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTsKICAgICAgcmV0dXJuIHN0YXRlLmxvYWRpbmdTdGF0dXNbc3ViamVjdF0gPSBfb2JqZWN0U3ByZWFkKHsKICAgICAgICBzdGF0dXM6IF9jb25zdGFudHMuTE9BRElOR19TVEFUVVMuRkFJTEVELAogICAgICAgIHJlYXNvbjogX2NvbnN0YW50cy5GQUlMVVJFX1JFQVNPTlMuVU5LTk9XTgogICAgICB9LCBkZXRhaWxzKTsKICAgIH07CiAgfTsKCiAgdmFyIHNldExvYWRlZFN0YXR1cyA9IGZ1bmN0aW9uIHNldExvYWRlZFN0YXR1cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzdWJqZWN0KSB7CiAgICAgIHJldHVybiBzdGF0ZS5sb2FkaW5nU3RhdHVzW3N1YmplY3RdID0gewogICAgICAgIHN0YXR1czogX2NvbnN0YW50cy5MT0FESU5HX1NUQVRVUy5MT0FERUQKICAgICAgfTsKICAgIH07CiAgfTsKCiAgdmFyIHNldExvYWRpbmdTdGF0dXMgPSBmdW5jdGlvbiBzZXRMb2FkaW5nU3RhdHVzKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHsKICAgICAgcmV0dXJuIHN0YXRlLmxvYWRpbmdTdGF0dXNbc3ViamVjdF0gPSB7CiAgICAgICAgc3RhdHVzOiBfY29uc3RhbnRzLkxPQURJTkdfU1RBVFVTLkxPQURJTkcKICAgICAgfTsKICAgIH07CiAgfTsKCiAgdmFyIGZldGNoQW5jaG9yUm93ID0gZnVuY3Rpb24gZmV0Y2hBbmNob3JSb3coc3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc3RhdGUkcXVlcnlQYXJhbWV0ZXIgPSBzdGF0ZS5xdWVyeVBhcmFtZXRlcnMsCiAgICAgICAgICBpbmRleFBhdHRlcm5JZCA9IF9zdGF0ZSRxdWVyeVBhcmFtZXRlci5pbmRleFBhdHRlcm5JZCwKICAgICAgICAgIGFuY2hvclR5cGUgPSBfc3RhdGUkcXVlcnlQYXJhbWV0ZXIuYW5jaG9yVHlwZSwKICAgICAgICAgIGFuY2hvcklkID0gX3N0YXRlJHF1ZXJ5UGFyYW1ldGVyLmFuY2hvcklkLAogICAgICAgICAgc29ydCA9IF9zdGF0ZSRxdWVyeVBhcmFtZXRlci5zb3J0LAogICAgICAgICAgdGllQnJlYWtlckZpZWxkID0gX3N0YXRlJHF1ZXJ5UGFyYW1ldGVyLnRpZUJyZWFrZXJGaWVsZDsKCiAgICAgIGlmICghdGllQnJlYWtlckZpZWxkKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHNldEZhaWxlZFN0YXR1cyhzdGF0ZSkoJ2FuY2hvcicsIHsKICAgICAgICAgIHJlYXNvbjogX2NvbnN0YW50cy5GQUlMVVJFX1JFQVNPTlMuSU5WQUxJRF9USUVCUkVBS0VSCiAgICAgICAgfSkpOwogICAgICB9CgogICAgICBzZXRMb2FkaW5nU3RhdHVzKHN0YXRlKSgnYW5jaG9yJyk7CiAgICAgIHJldHVybiBQcm9taXNlLnRyeShmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIGZldGNoQW5jaG9yKGluZGV4UGF0dGVybklkLCBhbmNob3JUeXBlLCBhbmNob3JJZCwgW19sb2Rhc2guZGVmYXVsdC56aXBPYmplY3QoW3NvcnRdKSwgX2RlZmluZVByb3BlcnR5KHt9LCB0aWVCcmVha2VyRmllbGQsIHNvcnRbMV0pXSk7CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGFuY2hvckRvY3VtZW50KSB7CiAgICAgICAgc2V0TG9hZGVkU3RhdHVzKHN0YXRlKSgnYW5jaG9yJyk7CiAgICAgICAgc3RhdGUucm93cy5hbmNob3IgPSBhbmNob3JEb2N1bWVudDsKICAgICAgICByZXR1cm4gYW5jaG9yRG9jdW1lbnQ7CiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIHNldEZhaWxlZFN0YXR1cyhzdGF0ZSkoJ2FuY2hvcicsIHsKICAgICAgICAgIGVycm9yOiBlcnJvcgogICAgICAgIH0pOwoKICAgICAgICBfbm90aWZ5LnRvYXN0Tm90aWZpY2F0aW9ucy5hZGREYW5nZXIoewogICAgICAgICAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4uY29udGV4dC51bmFibGVUb0xvYWRBbmNob3JEb2N1bWVudERlc2NyaXB0aW9uJywgewogICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VuYWJsZSB0byBsb2FkIHRoZSBhbmNob3IgZG9jdW1lbnQnCiAgICAgICAgICB9KSwKICAgICAgICAgIHRleHQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3B1YmxpYy5NYXJrZG93blNpbXBsZSwgbnVsbCwgZXJyb3IubWVzc2FnZSkKICAgICAgICB9KTsKCiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfTsKICB9OwoKICB2YXIgZmV0Y2hTdXJyb3VuZGluZ1Jvd3MgPSBmdW5jdGlvbiBmZXRjaFN1cnJvdW5kaW5nUm93cyh0eXBlLCBzdGF0ZSkgewogICAgdmFyIF9zdGF0ZSRxdWVyeVBhcmFtZXRlcjIgPSBzdGF0ZS5xdWVyeVBhcmFtZXRlcnMsCiAgICAgICAgaW5kZXhQYXR0ZXJuSWQgPSBfc3RhdGUkcXVlcnlQYXJhbWV0ZXIyLmluZGV4UGF0dGVybklkLAogICAgICAgIGZpbHRlcnMgPSBfc3RhdGUkcXVlcnlQYXJhbWV0ZXIyLmZpbHRlcnMsCiAgICAgICAgc29ydCA9IF9zdGF0ZSRxdWVyeVBhcmFtZXRlcjIuc29ydCwKICAgICAgICB0aWVCcmVha2VyRmllbGQgPSBfc3RhdGUkcXVlcnlQYXJhbWV0ZXIyLnRpZUJyZWFrZXJGaWVsZCwKICAgICAgICBhbmNob3IgPSBzdGF0ZS5yb3dzLmFuY2hvcjsKICAgIHZhciBjb3VudCA9IHR5cGUgPT09ICdzdWNjZXNzb3JzJyA/IHN0YXRlLnF1ZXJ5UGFyYW1ldGVycy5zdWNjZXNzb3JDb3VudCA6IHN0YXRlLnF1ZXJ5UGFyYW1ldGVycy5wcmVkZWNlc3NvckNvdW50OwoKICAgIGlmICghdGllQnJlYWtlckZpZWxkKSB7CiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChzZXRGYWlsZWRTdGF0dXMoc3RhdGUpKHR5cGUsIHsKICAgICAgICByZWFzb246IF9jb25zdGFudHMuRkFJTFVSRV9SRUFTT05TLklOVkFMSURfVElFQlJFQUtFUgogICAgICB9KSk7CiAgICB9CgogICAgc2V0TG9hZGluZ1N0YXR1cyhzdGF0ZSkodHlwZSk7CgogICAgdmFyIF9zb3J0ID0gX3NsaWNlZFRvQXJyYXkoc29ydCwgMiksCiAgICAgICAgc29ydEZpZWxkID0gX3NvcnRbMF0sCiAgICAgICAgc29ydERpciA9IF9zb3J0WzFdOwoKICAgIHJldHVybiBQcm9taXNlLnRyeShmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBmZXRjaFN1cnJvdW5kaW5nRG9jcyh0eXBlLCBpbmRleFBhdHRlcm5JZCwgYW5jaG9yLCBzb3J0RmllbGQsIHRpZUJyZWFrZXJGaWVsZCwgc29ydERpciwgY291bnQsIGZpbHRlcnMpOwogICAgfSkudGhlbihmdW5jdGlvbiAoZG9jdW1lbnRzKSB7CiAgICAgIHNldExvYWRlZFN0YXR1cyhzdGF0ZSkodHlwZSk7CiAgICAgIHN0YXRlLnJvd3NbdHlwZV0gPSBkb2N1bWVudHM7CiAgICAgIHJldHVybiBkb2N1bWVudHM7CiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgc2V0RmFpbGVkU3RhdHVzKHN0YXRlKSh0eXBlLCB7CiAgICAgICAgZXJyb3I6IGVycm9yCiAgICAgIH0pOwoKICAgICAgX25vdGlmeS50b2FzdE5vdGlmaWNhdGlvbnMuYWRkRGFuZ2VyKHsKICAgICAgICB0aXRsZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5jb250ZXh0LnVuYWJsZVRvTG9hZERvY3VtZW50RGVzY3JpcHRpb24nLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ1VuYWJsZSB0byBsb2FkIGRvY3VtZW50cycKICAgICAgICB9KSwKICAgICAgICB0ZXh0OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9wdWJsaWMuTWFya2Rvd25TaW1wbGUsIG51bGwsIGVycm9yLm1lc3NhZ2UpCiAgICAgIH0pOwoKICAgICAgdGhyb3cgZXJyb3I7CiAgICB9KTsKICB9OwoKICB2YXIgZmV0Y2hDb250ZXh0Um93cyA9IGZ1bmN0aW9uIGZldGNoQ29udGV4dFJvd3Moc3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbZmV0Y2hTdXJyb3VuZGluZ1Jvd3MoJ3ByZWRlY2Vzc29ycycsIHN0YXRlKSwgZmV0Y2hTdXJyb3VuZGluZ1Jvd3MoJ3N1Y2Nlc3NvcnMnLCBzdGF0ZSldKTsKICAgIH07CiAgfTsKCiAgdmFyIGZldGNoQWxsUm93cyA9IGZ1bmN0aW9uIGZldGNoQWxsUm93cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFByb21pc2UudHJ5KGZldGNoQW5jaG9yUm93KHN0YXRlKSkudGhlbihmZXRjaENvbnRleHRSb3dzKHN0YXRlKSk7CiAgICB9OwogIH07CgogIHZhciBmZXRjaENvbnRleHRSb3dzV2l0aE5ld1F1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uIGZldGNoQ29udGV4dFJvd3NXaXRoTmV3UXVlcnlQYXJhbWV0ZXJzKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHF1ZXJ5UGFyYW1ldGVycykgewogICAgICBzZXRRdWVyeVBhcmFtZXRlcnMoc3RhdGUpKHF1ZXJ5UGFyYW1ldGVycyk7CiAgICAgIHJldHVybiBmZXRjaENvbnRleHRSb3dzKHN0YXRlKSgpOwogICAgfTsKICB9OwoKICB2YXIgZmV0Y2hBbGxSb3dzV2l0aE5ld1F1ZXJ5UGFyYW1ldGVycyA9IGZ1bmN0aW9uIGZldGNoQWxsUm93c1dpdGhOZXdRdWVyeVBhcmFtZXRlcnMoc3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocXVlcnlQYXJhbWV0ZXJzKSB7CiAgICAgIHNldFF1ZXJ5UGFyYW1ldGVycyhzdGF0ZSkocXVlcnlQYXJhbWV0ZXJzKTsKICAgICAgcmV0dXJuIGZldGNoQWxsUm93cyhzdGF0ZSkoKTsKICAgIH07CiAgfTsKCiAgdmFyIGZldGNoR2l2ZW5QcmVkZWNlc3NvclJvd3MgPSBmdW5jdGlvbiBmZXRjaEdpdmVuUHJlZGVjZXNzb3JSb3dzKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGNvdW50KSB7CiAgICAgIHNldFByZWRlY2Vzc29yQ291bnQoc3RhdGUpKGNvdW50KTsKICAgICAgcmV0dXJuIGZldGNoU3Vycm91bmRpbmdSb3dzKCdwcmVkZWNlc3NvcnMnLCBzdGF0ZSk7CiAgICB9OwogIH07CgogIHZhciBmZXRjaEdpdmVuU3VjY2Vzc29yUm93cyA9IGZ1bmN0aW9uIGZldGNoR2l2ZW5TdWNjZXNzb3JSb3dzKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGNvdW50KSB7CiAgICAgIHNldFN1Y2Nlc3NvckNvdW50KHN0YXRlKShjb3VudCk7CiAgICAgIHJldHVybiBmZXRjaFN1cnJvdW5kaW5nUm93cygnc3VjY2Vzc29ycycsIHN0YXRlKTsKICAgIH07CiAgfTsKCiAgdmFyIGZldGNoTW9yZVByZWRlY2Vzc29yUm93cyA9IGZ1bmN0aW9uIGZldGNoTW9yZVByZWRlY2Vzc29yUm93cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgaW5jcmVhc2VQcmVkZWNlc3NvckNvdW50KHN0YXRlKSgpOwogICAgICByZXR1cm4gZmV0Y2hTdXJyb3VuZGluZ1Jvd3MoJ3ByZWRlY2Vzc29ycycsIHN0YXRlKTsKICAgIH07CiAgfTsKCiAgdmFyIGZldGNoTW9yZVN1Y2Nlc3NvclJvd3MgPSBmdW5jdGlvbiBmZXRjaE1vcmVTdWNjZXNzb3JSb3dzKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICBpbmNyZWFzZVN1Y2Nlc3NvckNvdW50KHN0YXRlKSgpOwogICAgICByZXR1cm4gZmV0Y2hTdXJyb3VuZGluZ1Jvd3MoJ3N1Y2Nlc3NvcnMnLCBzdGF0ZSk7CiAgICB9OwogIH07CgogIHZhciBzZXRBbGxSb3dzID0gZnVuY3Rpb24gc2V0QWxsUm93cyhzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChwcmVkZWNlc3NvclJvd3MsIGFuY2hvclJvdywgc3VjY2Vzc29yUm93cykgewogICAgICByZXR1cm4gc3RhdGUucm93cy5hbGwgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHByZWRlY2Vzc29yUm93cyB8fCBbXSksIF90b0NvbnN1bWFibGVBcnJheShhbmNob3JSb3cgPyBbYW5jaG9yUm93XSA6IFtdKSwgX3RvQ29uc3VtYWJsZUFycmF5KHN1Y2Nlc3NvclJvd3MgfHwgW10pKTsKICAgIH07CiAgfTsKCiAgcmV0dXJuIHsKICAgIGZldGNoQWxsUm93czogZmV0Y2hBbGxSb3dzLAogICAgZmV0Y2hBbGxSb3dzV2l0aE5ld1F1ZXJ5UGFyYW1ldGVyczogZmV0Y2hBbGxSb3dzV2l0aE5ld1F1ZXJ5UGFyYW1ldGVycywKICAgIGZldGNoQW5jaG9yUm93OiBmZXRjaEFuY2hvclJvdywKICAgIGZldGNoQ29udGV4dFJvd3M6IGZldGNoQ29udGV4dFJvd3MsCiAgICBmZXRjaENvbnRleHRSb3dzV2l0aE5ld1F1ZXJ5UGFyYW1ldGVyczogZmV0Y2hDb250ZXh0Um93c1dpdGhOZXdRdWVyeVBhcmFtZXRlcnMsCiAgICBmZXRjaEdpdmVuUHJlZGVjZXNzb3JSb3dzOiBmZXRjaEdpdmVuUHJlZGVjZXNzb3JSb3dzLAogICAgZmV0Y2hHaXZlblN1Y2Nlc3NvclJvd3M6IGZldGNoR2l2ZW5TdWNjZXNzb3JSb3dzLAogICAgZmV0Y2hNb3JlUHJlZGVjZXNzb3JSb3dzOiBmZXRjaE1vcmVQcmVkZWNlc3NvclJvd3MsCiAgICBmZXRjaE1vcmVTdWNjZXNzb3JSb3dzOiBmZXRjaE1vcmVTdWNjZXNzb3JSb3dzLAogICAgc2V0QWxsUm93czogc2V0QWxsUm93cwogIH07Cn0="},null]}