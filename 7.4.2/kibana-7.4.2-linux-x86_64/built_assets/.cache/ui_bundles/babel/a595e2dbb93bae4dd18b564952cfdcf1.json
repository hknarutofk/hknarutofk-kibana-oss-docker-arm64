{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/tile_map/public/tile_map_visualization.js","dependencies":[{"path":"src/legacy/core_plugins/tile_map/public/tile_map_visualization.js","mtime":1572296411320},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVRpbGVNYXBWaXN1YWxpemF0aW9uID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfZ2VvaGFzaF9sYXllciA9IHJlcXVpcmUoIi4vZ2VvaGFzaF9sYXllciIpOwoKdmFyIF9iYXNlX21hcHNfdmlzdWFsaXphdGlvbiA9IHJlcXVpcmUoIi4vYmFzZV9tYXBzX3Zpc3VhbGl6YXRpb24iKTsKCnZhciBfdG9vbHRpcF9mb3JtYXR0ZXIgPSByZXF1aXJlKCIuL2VkaXRvcnMvX3Rvb2x0aXBfZm9ybWF0dGVyIik7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gInVuZGVmaW5lZCIgJiYgUmVmbGVjdC5nZXQpIHsgX2dldCA9IFJlZmxlY3QuZ2V0OyB9IGVsc2UgeyBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTsgfSByZXR1cm4gZGVzYy52YWx1ZTsgfTsgfSByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpOyB9CgpmdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKdmFyIGNyZWF0ZVRpbGVNYXBWaXN1YWxpemF0aW9uID0gZnVuY3Rpb24gY3JlYXRlVGlsZU1hcFZpc3VhbGl6YXRpb24oX3JlZikgewogIHZhciBzZXJ2aWNlU2V0dGluZ3MgPSBfcmVmLnNlcnZpY2VTZXR0aW5ncywKICAgICAgJGluamVjdG9yID0gX3JlZi4kaW5qZWN0b3I7CiAgdmFyIEJhc2VNYXBzVmlzdWFsaXphdGlvbiA9IG5ldyBfYmFzZV9tYXBzX3Zpc3VhbGl6YXRpb24uQmFzZU1hcHNWaXN1YWxpemF0aW9uUHJvdmlkZXIoc2VydmljZVNldHRpbmdzKTsKICB2YXIgdG9vbHRpcEZvcm1hdHRlciA9IG5ldyBfdG9vbHRpcF9mb3JtYXR0ZXIuVGlsZU1hcFRvb2x0aXBGb3JtYXR0ZXJQcm92aWRlcigkaW5qZWN0b3IpOwogIHJldHVybiAoCiAgICAvKiNfX1BVUkVfXyovCiAgICBmdW5jdGlvbiAoX0Jhc2VNYXBzVmlzdWFsaXphdGlvKSB7CiAgICAgIF9pbmhlcml0cyhDb29yZGluYXRlTWFwc1Zpc3VhbGl6YXRpb24sIF9CYXNlTWFwc1Zpc3VhbGl6YXRpbyk7CgogICAgICBmdW5jdGlvbiBDb29yZGluYXRlTWFwc1Zpc3VhbGl6YXRpb24oZWxlbWVudCwgdmlzKSB7CiAgICAgICAgdmFyIF90aGlzOwoKICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29vcmRpbmF0ZU1hcHNWaXN1YWxpemF0aW9uKTsKCiAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQ29vcmRpbmF0ZU1hcHNWaXN1YWxpemF0aW9uKS5jYWxsKHRoaXMsIGVsZW1lbnQsIHZpcykpOwogICAgICAgIF90aGlzLl9nZW9oYXNoTGF5ZXIgPSBudWxsOwogICAgICAgIHJldHVybiBfdGhpczsKICAgICAgfQoKICAgICAgX2NyZWF0ZUNsYXNzKENvb3JkaW5hdGVNYXBzVmlzdWFsaXphdGlvbiwgW3sKICAgICAgICBrZXk6ICJfbWFrZUtpYmFuYU1hcCIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBfbWFrZUtpYmFuYU1hcDIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgICAgICAgdmFyIHVwZGF0ZUdlb2hhc2hBZ2csIHVpU3RhdGUsIHByZXZpb3VzUHJlY2lzaW9uLCBwcmVjaXNpb25DaGFuZ2U7CiAgICAgICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoQ29vcmRpbmF0ZU1hcHNWaXN1YWxpemF0aW9uLnByb3RvdHlwZSksICJfbWFrZUtpYmFuYU1hcCIsIHRoaXMpLmNhbGwodGhpcyk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlR2VvaGFzaEFnZyA9IGZ1bmN0aW9uIHVwZGF0ZUdlb2hhc2hBZ2coKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvaGFzaEFnZyA9IF90aGlzMi5fZ2V0R2VvSGFzaEFnZygpOwoKICAgICAgICAgICAgICAgICAgICAgIGlmICghZ2VvaGFzaEFnZykgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgZ2VvaGFzaEFnZy5wYXJhbXMubWFwQm91bmRzID0gX3RoaXMyLl9raWJhbmFNYXAuZ2V0Qm91bmRzKCk7CiAgICAgICAgICAgICAgICAgICAgICBnZW9oYXNoQWdnLnBhcmFtcy5tYXBab29tID0gX3RoaXMyLl9raWJhbmFNYXAuZ2V0Wm9vbUxldmVsKCk7CiAgICAgICAgICAgICAgICAgICAgICBnZW9oYXNoQWdnLnBhcmFtcy5tYXBDZW50ZXIgPSBfdGhpczIuX2tpYmFuYU1hcC5nZXRDZW50ZXIoKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICB1cGRhdGVHZW9oYXNoQWdnKCk7CiAgICAgICAgICAgICAgICAgICAgdWlTdGF0ZSA9IHRoaXMudmlzLmdldFVpU3RhdGUoKTsKICAgICAgICAgICAgICAgICAgICB1aVN0YXRlLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAocHJvcCkgewogICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT09ICdtYXBab29tJyB8fCBwcm9wID09PSAnbWFwQ2VudGVyJykgewogICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVHZW9oYXNoQWdnKCk7CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNQcmVjaXNpb24gPSB0aGlzLl9raWJhbmFNYXAuZ2V0R2VvaGFzaFByZWNpc2lvbigpOwogICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbkNoYW5nZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICAgICB0aGlzLl9raWJhbmFNYXAub24oJ3pvb21jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvaGFzaEFnZyA9IF90aGlzMi5fZ2V0R2VvSGFzaEFnZygpOwoKICAgICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbkNoYW5nZSA9IHByZXZpb3VzUHJlY2lzaW9uICE9PSBfdGhpczIuX2tpYmFuYU1hcC5nZXRHZW9oYXNoUHJlY2lzaW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1ByZWNpc2lvbiA9IF90aGlzMi5fa2liYW5hTWFwLmdldEdlb2hhc2hQcmVjaXNpb24oKTsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdlb2hhc2hBZ2cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0F1dG9QcmVjaXNpb24gPSB0eXBlb2YgZ2VvaGFzaEFnZy5wYXJhbXMuYXV0b1ByZWNpc2lvbiA9PT0gJ2Jvb2xlYW4nID8gZ2VvaGFzaEFnZy5wYXJhbXMuYXV0b1ByZWNpc2lvbiA6IHRydWU7CgogICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXV0b1ByZWNpc2lvbikgewogICAgICAgICAgICAgICAgICAgICAgICBnZW9oYXNoQWdnLnBhcmFtcy5wcmVjaXNpb24gPSBwcmV2aW91c1ByZWNpc2lvbjsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2liYW5hTWFwLm9uKCd6b29tZW5kJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb2hhc2hBZ2cgPSBfdGhpczIuX2dldEdlb0hhc2hBZ2coKTsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdlb2hhc2hBZ2cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0F1dG9QcmVjaXNpb24gPSB0eXBlb2YgZ2VvaGFzaEFnZy5wYXJhbXMuYXV0b1ByZWNpc2lvbiA9PT0gJ2Jvb2xlYW4nID8gZ2VvaGFzaEFnZy5wYXJhbXMuYXV0b1ByZWNpc2lvbiA6IHRydWU7CgogICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0F1dG9QcmVjaXNpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmVjaXNpb25DaGFuZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnZpcy51cGRhdGVTdGF0ZSgpOwogICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy93aGVuIHdlIGZpbHRlciBxdWVyaWVzIGJ5IGNvbGxhcgogICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuX3VwZGF0ZURhdGEoX3RoaXMyLl9nZW9Kc29uRmVhdHVyZUNvbGxlY3Rpb25BbmRNZXRhKTsKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2liYW5hTWFwLmFkZERyYXdDb250cm9sKCk7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuX2tpYmFuYU1hcC5vbignZHJhd0NyZWF0ZWQ6cmVjdGFuZ2xlJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvaGFzaEFnZyA9IF90aGlzMi5fZ2V0R2VvSGFzaEFnZygpOwoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5hZGRTcGF0aWFsRmlsdGVyKGdlb2hhc2hBZ2csICdnZW9fYm91bmRpbmdfYm94JywgZXZlbnQuYm91bmRzKTsKICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2liYW5hTWFwLm9uKCdkcmF3Q3JlYXRlZDpwb2x5Z29uJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvaGFzaEFnZyA9IF90aGlzMi5fZ2V0R2VvSGFzaEFnZygpOwoKICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5hZGRTcGF0aWFsRmlsdGVyKGdlb2hhc2hBZ2csICdnZW9fcG9seWdvbicsIHsKICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiBldmVudC5wb2ludHMKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgICAgICB9KSk7CgogICAgICAgICAgZnVuY3Rpb24gX21ha2VLaWJhbmFNYXAoKSB7CiAgICAgICAgICAgIHJldHVybiBfbWFrZUtpYmFuYU1hcDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gX21ha2VLaWJhbmFNYXA7CiAgICAgICAgfSgpCiAgICAgIH0sIHsKICAgICAgICBrZXk6ICJfdXBkYXRlRGF0YSIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBfdXBkYXRlRGF0YTIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKGdlb2pzb25GZWF0dXJlQ29sbGVjdGlvbkFuZE1ldGEpIHsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLl9nZXRNYXBzUGFyYW1zKCkubWFwVHlwZSAhPT0gJ0hlYXRtYXAnICYmIGdlb2pzb25GZWF0dXJlQ29sbGVjdGlvbkFuZE1ldGEgPT09IHRoaXMuX2dlb0pzb25GZWF0dXJlQ29sbGVjdGlvbkFuZE1ldGEpKSB7CiAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2VvaGFzaExheWVyKSB7CiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9raWJhbmFNYXAucmVtb3ZlTGF5ZXIodGhpcy5fZ2VvaGFzaExheWVyKTsKCiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9oYXNoTGF5ZXIgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKGdlb2pzb25GZWF0dXJlQ29sbGVjdGlvbkFuZE1ldGEpIHsKICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gODsKICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VvSnNvbkZlYXR1cmVDb2xsZWN0aW9uQW5kTWV0YSA9IG51bGw7CgogICAgICAgICAgICAgICAgICAgIHRoaXMuX2tpYmFuYU1hcC5yZW1vdmVMYXllcih0aGlzLl9nZW9oYXNoTGF5ZXIpOwoKICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9oYXNoTGF5ZXIgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9Kc29uRmVhdHVyZUNvbGxlY3Rpb25BbmRNZXRhID0gZ2VvanNvbkZlYXR1cmVDb2xsZWN0aW9uQW5kTWV0YTsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjcmVhdGVHZW9oYXNoTGF5ZXIoKTsKCiAgICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgICAgICB9KSk7CgogICAgICAgICAgZnVuY3Rpb24gX3VwZGF0ZURhdGEoX3gpIHsKICAgICAgICAgICAgcmV0dXJuIF91cGRhdGVEYXRhMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBfdXBkYXRlRGF0YTsKICAgICAgICB9KCkKICAgICAgfSwgewogICAgICAgIGtleTogIl9yZWNyZWF0ZUdlb2hhc2hMYXllciIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWNyZWF0ZUdlb2hhc2hMYXllcigpIHsKICAgICAgICAgIGlmICh0aGlzLl9nZW9oYXNoTGF5ZXIpIHsKICAgICAgICAgICAgdGhpcy5fa2liYW5hTWFwLnJlbW92ZUxheWVyKHRoaXMuX2dlb2hhc2hMYXllcik7CgogICAgICAgICAgICB0aGlzLl9nZW9oYXNoTGF5ZXIgPSBudWxsOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBnZW9oYXNoT3B0aW9ucyA9IHRoaXMuX2dldEdlb2hhc2hPcHRpb25zKCk7CgogICAgICAgICAgdGhpcy5fZ2VvaGFzaExheWVyID0gbmV3IF9nZW9oYXNoX2xheWVyLkdlb2hhc2hMYXllcih0aGlzLl9nZW9Kc29uRmVhdHVyZUNvbGxlY3Rpb25BbmRNZXRhLmZlYXR1cmVDb2xsZWN0aW9uLCB0aGlzLl9nZW9Kc29uRmVhdHVyZUNvbGxlY3Rpb25BbmRNZXRhLm1ldGEsIGdlb2hhc2hPcHRpb25zLCB0aGlzLl9raWJhbmFNYXAuZ2V0Wm9vbUxldmVsKCksIHRoaXMuX2tpYmFuYU1hcCk7CgogICAgICAgICAgdGhpcy5fa2liYW5hTWFwLmFkZExheWVyKHRoaXMuX2dlb2hhc2hMYXllcik7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAga2V5OiAiX3VwZGF0ZVBhcmFtcyIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHZhciBfdXBkYXRlUGFyYW1zMiA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAgICAgLyojX19QVVJFX18qLwogICAgICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgICAgIHZhciBnZW9oYXNoT3B0aW9uczsKICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9nZXQoX2dldFByb3RvdHlwZU9mKENvb3JkaW5hdGVNYXBzVmlzdWFsaXphdGlvbi5wcm90b3R5cGUpLCAiX3VwZGF0ZVBhcmFtcyIsIHRoaXMpLmNhbGwodGhpcyk7CgogICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2liYW5hTWFwLnNldERlc2F0dXJhdGVCYXNlTGF5ZXIodGhpcy5fcGFyYW1zLmlzRGVzYXR1cmF0ZWQpOyAvL2F2b2lkIHJlY3JlYXRpbmcgdGhlIGxlYWZsZXQgbGF5ZXIgd2hlbiB0aGVyZSBhcmUgb3B0aW9uLWNoYW5nZXMgdGhhdCBkbyBub3QgZWZmZWN0IHRoZSByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgICAgICAgIC8vZS5nLiB0b29sdGlwLXZpc2liaWxpdHksIGxlZ2VuZCBwb3NpdGlvbiwgYmFzZW1hcC1kZXNhdHVyYXRpb24sIC4uLgoKCiAgICAgICAgICAgICAgICAgICAgZ2VvaGFzaE9wdGlvbnMgPSB0aGlzLl9nZXRHZW9oYXNoT3B0aW9ucygpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2dlb2hhc2hMYXllciB8fCAhdGhpcy5fZ2VvaGFzaExheWVyLmlzUmV1c2FibGUoZ2VvaGFzaE9wdGlvbnMpKSB7CiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2VvSnNvbkZlYXR1cmVDb2xsZWN0aW9uQW5kTWV0YSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNyZWF0ZUdlb2hhc2hMYXllcigpOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURhdGEodGhpcy5fZ2VvSnNvbkZlYXR1cmVDb2xsZWN0aW9uQW5kTWV0YSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICAgICAgfSkpOwoKICAgICAgICAgIGZ1bmN0aW9uIF91cGRhdGVQYXJhbXMoKSB7CiAgICAgICAgICAgIHJldHVybiBfdXBkYXRlUGFyYW1zMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBfdXBkYXRlUGFyYW1zOwogICAgICAgIH0oKQogICAgICB9LCB7CiAgICAgICAga2V5OiAiX2dldEdlb2hhc2hPcHRpb25zIiwKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEdlb2hhc2hPcHRpb25zKCkgewogICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICAgICAgdmFyIG5ld1BhcmFtcyA9IHRoaXMuX2dldE1hcHNQYXJhbXMoKTsKCiAgICAgICAgICB2YXIgbWV0cmljQWdnID0gdGhpcy5fZ2V0TWV0cmljQWdnKCk7CgogICAgICAgICAgdmFyIGJvdW5kVG9vbHRpcEZvcm1hdHRlciA9IHRvb2x0aXBGb3JtYXR0ZXIuYmluZChudWxsLCB0aGlzLnZpcy5nZXRBZ2dDb25maWcoKSwgbWV0cmljQWdnKTsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGxhYmVsOiBtZXRyaWNBZ2cgPyBtZXRyaWNBZ2cubWFrZUxhYmVsKCkgOiAnJywKICAgICAgICAgICAgdmFsdWVGb3JtYXR0ZXI6IHRoaXMuX2dlb0pzb25GZWF0dXJlQ29sbGVjdGlvbkFuZE1ldGEgPyBtZXRyaWNBZ2cgJiYgbWV0cmljQWdnLmZpZWxkRm9ybWF0dGVyKCkgOiBudWxsLAogICAgICAgICAgICB0b29sdGlwRm9ybWF0dGVyOiB0aGlzLl9nZW9Kc29uRmVhdHVyZUNvbGxlY3Rpb25BbmRNZXRhID8gYm91bmRUb29sdGlwRm9ybWF0dGVyIDogbnVsbCwKICAgICAgICAgICAgbWFwVHlwZTogbmV3UGFyYW1zLm1hcFR5cGUsCiAgICAgICAgICAgIGlzRmlsdGVyZWRCeUNvbGxhcjogdGhpcy5faXNGaWx0ZXJlZEJ5Q29sbGFyKCksCiAgICAgICAgICAgIGZldGNoQm91bmRzOiBmdW5jdGlvbiBmZXRjaEJvdW5kcygpIHsKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLnZpcy5BUEkuZ2V0R2VvaGFzaEJvdW5kcygpOwogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdGhpcyAoZWxhc3RpYy9raWJhbmEjMzA1OTMpCiAgICAgICAgICAgIGNvbG9yUmFtcDogbmV3UGFyYW1zLmNvbG9yU2NoZW1hLAogICAgICAgICAgICBoZWF0bWFwOiB7CiAgICAgICAgICAgICAgaGVhdENsdXN0ZXJTaXplOiBuZXdQYXJhbXMuaGVhdENsdXN0ZXJTaXplCiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAga2V5OiAiYWRkU3BhdGlhbEZpbHRlciIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFNwYXRpYWxGaWx0ZXIoYWdnLCBmaWx0ZXJOYW1lLCBmaWx0ZXJEYXRhKSB7CiAgICAgICAgICBpZiAoIWFnZykgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIGluZGV4UGF0dGVybk5hbWUgPSBhZ2cuZ2V0SW5kZXhQYXR0ZXJuKCkuaWQ7CiAgICAgICAgICB2YXIgZmllbGQgPSBhZ2cuZmllbGROYW1lKCk7CiAgICAgICAgICB2YXIgZmlsdGVyID0gewogICAgICAgICAgICBtZXRhOiB7CiAgICAgICAgICAgICAgbmVnYXRlOiBmYWxzZSwKICAgICAgICAgICAgICBpbmRleDogaW5kZXhQYXR0ZXJuTmFtZQogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgZmlsdGVyW2ZpbHRlck5hbWVdID0gewogICAgICAgICAgICBpZ25vcmVfdW5tYXBwZWQ6IHRydWUKICAgICAgICAgIH07CiAgICAgICAgICBmaWx0ZXJbZmlsdGVyTmFtZV1bZmllbGRdID0gZmlsdGVyRGF0YTsKICAgICAgICAgIHRoaXMudmlzLkFQSS5xdWVyeUZpbHRlci5hZGRGaWx0ZXJzKFtmaWx0ZXJdKTsKICAgICAgICAgIHRoaXMudmlzLnVwZGF0ZVN0YXRlKCk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAga2V5OiAiX2dldEdlb0hhc2hBZ2ciLAogICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0R2VvSGFzaEFnZygpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnZpcy5nZXRBZ2dDb25maWcoKS5maW5kKGZ1bmN0aW9uIChhZ2cpIHsKICAgICAgICAgICAgcmV0dXJuICgwLCBfbG9kYXNoLmdldCkoYWdnLCAndHlwZS5kc2xOYW1lJykgPT09ICdnZW9oYXNoX2dyaWQnOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9LCB7CiAgICAgICAga2V5OiAiX2dldE1ldHJpY0FnZyIsCiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRNZXRyaWNBZ2coKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy52aXMuZ2V0QWdnQ29uZmlnKCkuZmluZChmdW5jdGlvbiAoYWdnKSB7CiAgICAgICAgICAgIHJldHVybiBhZ2cudHlwZS50eXBlID09PSAnbWV0cmljcyc7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICBrZXk6ICJfaXNGaWx0ZXJlZEJ5Q29sbGFyIiwKICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2lzRmlsdGVyZWRCeUNvbGxhcigpIHsKICAgICAgICAgIHZhciBERUZBVUxUID0gZmFsc2U7CgogICAgICAgICAgdmFyIGFnZyA9IHRoaXMuX2dldEdlb0hhc2hBZ2coKTsKCiAgICAgICAgICBpZiAoYWdnKSB7CiAgICAgICAgICAgIHJldHVybiAoMCwgX2xvZGFzaC5nZXQpKGFnZywgJ3BhcmFtcy5pc0ZpbHRlcmVkQnlDb2xsYXInLCBERUZBVUxUKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBERUZBVUxUOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfV0pOwoKICAgICAgcmV0dXJuIENvb3JkaW5hdGVNYXBzVmlzdWFsaXphdGlvbjsKICAgIH0oQmFzZU1hcHNWaXN1YWxpemF0aW9uKQogICk7Cn07CgpleHBvcnRzLmNyZWF0ZVRpbGVNYXBWaXN1YWxpemF0aW9uID0gY3JlYXRlVGlsZU1hcFZpc3VhbGl6YXRpb247"},null]}