{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/visualize/loader/visualize_data_loader.js","dependencies":[{"path":"src/legacy/ui/public/visualize/loader/visualize_data_loader.js","mtime":1572296413424},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlZpc3VhbGl6ZURhdGFMb2FkZXIgPSB2b2lkIDA7Cgp2YXIgX2xvZGFzaCA9IHJlcXVpcmUoImxvZGFzaCIpOwoKdmFyIF9idWlsZF9waXBlbGluZSA9IHJlcXVpcmUoInVpL3Zpc3VhbGl6ZS9sb2FkZXIvcGlwZWxpbmVfaGVscGVycy9idWlsZF9waXBlbGluZSIpOwoKdmFyIF92aXNfcmVxdWVzdF9oYW5kbGVycyA9IHJlcXVpcmUoIi4uLy4uL3JlZ2lzdHJ5L3Zpc19yZXF1ZXN0X2hhbmRsZXJzIik7Cgp2YXIgX3Zpc19yZXNwb25zZV9oYW5kbGVycyA9IHJlcXVpcmUoIi4uLy4uL3JlZ2lzdHJ5L3Zpc19yZXNwb25zZV9oYW5kbGVycyIpOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOwoKICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgewogICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7CiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7CiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOwogICAgfSk7CiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7CiAgfQoKICByZXR1cm4ga2V5czsKfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307CgogICAgaWYgKGkgJSAyKSB7CiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7CiAgICB9IGVsc2UgewogICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiAgICAgIH0pOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgewogIGlmIChrZXkgaW4gb2JqKSB7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsKICAgICAgdmFsdWU6IHZhbHVlLAogICAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICB9KTsKICB9IGVsc2UgewogICAgb2JqW2tleV0gPSB2YWx1ZTsKICB9CgogIHJldHVybiBvYmo7Cn0KCmZ1bmN0aW9uIGdldEhhbmRsZXIoZnJvbSwgdHlwZSkgewogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHR5cGU7CiAgfQoKICB2YXIgaGFuZGxlckRlc2MgPSBmcm9tLmZpbmQoZnVuY3Rpb24gKGhhbmRsZXIpIHsKICAgIHJldHVybiBoYW5kbGVyLm5hbWUgPT09IHR5cGU7CiAgfSk7CgogIGlmICghaGFuZGxlckRlc2MpIHsKICAgIHRocm93IG5ldyBFcnJvcigiQ291bGQgbm90IGZpbmQgaGFuZGxlciBcIiIuY29uY2F0KHR5cGUsICJcIi4iKSk7CiAgfQoKICByZXR1cm4gaGFuZGxlckRlc2MuaGFuZGxlcjsKfQoKdmFyIFZpc3VhbGl6ZURhdGFMb2FkZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBWaXN1YWxpemVEYXRhTG9hZGVyKHZpcywgUHJpdmF0ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpc3VhbGl6ZURhdGFMb2FkZXIpOwoKICAgIHRoaXMudmlzID0gdmlzOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicmVxdWVzdEhhbmRsZXIiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicmVzcG9uc2VIYW5kbGVyIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgInZpc0RhdGEiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCAicHJldmlvdXNWaXNTdGF0ZSIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KHRoaXMsICJwcmV2aW91c1JlcXVlc3RIYW5kbGVyUmVzcG9uc2UiLCB2b2lkIDApOwoKICAgIHZhciBfdmlzJHR5cGUgPSB2aXMudHlwZSwKICAgICAgICByZXF1ZXN0SGFuZGxlciA9IF92aXMkdHlwZS5yZXF1ZXN0SGFuZGxlciwKICAgICAgICByZXNwb25zZUhhbmRsZXIgPSBfdmlzJHR5cGUucmVzcG9uc2VIYW5kbGVyOwogICAgdmFyIHJlcXVlc3RIYW5kbGVycyA9IFByaXZhdGUoX3Zpc19yZXF1ZXN0X2hhbmRsZXJzLlZpc1JlcXVlc3RIYW5kbGVyc1JlZ2lzdHJ5UHJvdmlkZXIpOwogICAgdmFyIHJlc3BvbnNlSGFuZGxlcnMgPSBQcml2YXRlKF92aXNfcmVzcG9uc2VfaGFuZGxlcnMuVmlzUmVzcG9uc2VIYW5kbGVyc1JlZ2lzdHJ5UHJvdmlkZXIpOwogICAgdGhpcy5yZXF1ZXN0SGFuZGxlciA9IGdldEhhbmRsZXIocmVxdWVzdEhhbmRsZXJzLCByZXF1ZXN0SGFuZGxlcik7CiAgICB0aGlzLnJlc3BvbnNlSGFuZGxlciA9IGdldEhhbmRsZXIocmVzcG9uc2VIYW5kbGVycywgcmVzcG9uc2VIYW5kbGVyKTsKICB9CgogIF9jcmVhdGVDbGFzcyhWaXN1YWxpemVEYXRhTG9hZGVyLCBbewogICAga2V5OiAiZmV0Y2giLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaCA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUocGFyYW1zKSB7CiAgICAgICAgdmFyIHZpc1BhcmFtcywgZmlsdGVycywgc2F2ZWRGaWx0ZXJzLCBxdWVyeSwgcmVxdWVzdEhhbmRsZXJSZXNwb25zZSwgY2FuU2tpcFJlc3BvbnNlSGFuZGxlcjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2J1aWxkX3BpcGVsaW5lLmdldFZpc1BhcmFtcykodGhpcy52aXMsIHsKICAgICAgICAgICAgICAgICAgc2VhcmNoU291cmNlOiBwYXJhbXMuc2VhcmNoU291cmNlLAogICAgICAgICAgICAgICAgICB0aW1lUmFuZ2U6IHBhcmFtcy50aW1lUmFuZ2UsCiAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBwYXJhbXMuYWJvcnRTaWduYWwKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICB2aXNQYXJhbXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZmlsdGVycyA9IHBhcmFtcy5maWx0ZXJzIHx8IFtdOwogICAgICAgICAgICAgICAgc2F2ZWRGaWx0ZXJzID0gcGFyYW1zLnNlYXJjaFNvdXJjZS5nZXRGaWVsZCgnZmlsdGVyJykgfHwgW107CiAgICAgICAgICAgICAgICBxdWVyeSA9IHBhcmFtcy5xdWVyeSB8fCBwYXJhbXMuc2VhcmNoU291cmNlLmdldEZpZWxkKCdxdWVyeScpOyAvLyBzZWFyY2hTb3VyY2UgaXMgb25seSB0aGVyZSBmb3IgY291cmllciByZXF1ZXN0IGhhbmRsZXIKCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3RIYW5kbGVyKF9vYmplY3RTcHJlYWQoewogICAgICAgICAgICAgICAgICBwYXJ0aWFsUm93czogdGhpcy52aXMucGFyYW1zLnBhcnRpYWxSb3dzIHx8IHRoaXMudmlzLnR5cGUucmVxdWlyZXNQYXJ0aWFsUm93cywKICAgICAgICAgICAgICAgICAgbWV0cmljc0F0QWxsTGV2ZWxzOiB0aGlzLnZpcy5pc0hpZXJhcmNoaWNhbCgpLAogICAgICAgICAgICAgICAgICB2aXNQYXJhbXM6IHZpc1BhcmFtcwogICAgICAgICAgICAgICAgfSwgcGFyYW1zLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSwKICAgICAgICAgICAgICAgICAgZmlsdGVyczogZmlsdGVycy5jb25jYXQoc2F2ZWRGaWx0ZXJzKS5maWx0ZXIoZnVuY3Rpb24gKGYpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWYubWV0YS5kaXNhYmxlZDsKICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsOiBwYXJhbXMuYWJvcnRTaWduYWwKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXJSZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7IC8vIE5vIG5lZWQgdG8gY2FsbCB0aGUgcmVzcG9uc2UgaGFuZGxlciB3aGVuIHRoZXJlIGhhdmUgYmVlbiBubyBkYXRhIG5vciBoYXMgdGhlcmUgYmVlbiBjaGFuZ2VzCiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgdmlzLXN0YXRlIChyZXNwb25zZSBoYW5kbGVyIGRvZXMgbm90IGRlcGVuZCBvbiB1aVN0YXRlKQoKICAgICAgICAgICAgICAgIGNhblNraXBSZXNwb25zZUhhbmRsZXIgPSB0aGlzLnByZXZpb3VzUmVxdWVzdEhhbmRsZXJSZXNwb25zZSAmJiB0aGlzLnByZXZpb3VzUmVxdWVzdEhhbmRsZXJSZXNwb25zZSA9PT0gcmVxdWVzdEhhbmRsZXJSZXNwb25zZSAmJiB0aGlzLnByZXZpb3VzVmlzU3RhdGUgJiYgKDAsIF9sb2Rhc2guaXNFcXVhbCkodGhpcy5wcmV2aW91c1Zpc1N0YXRlLCB0aGlzLnZpcy5nZXRTdGF0ZSgpKTsKICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNWaXNTdGF0ZSA9IHRoaXMudmlzLmdldFN0YXRlKCk7CiAgICAgICAgICAgICAgICB0aGlzLnByZXZpb3VzUmVxdWVzdEhhbmRsZXJSZXNwb25zZSA9IHJlcXVlc3RIYW5kbGVyUmVzcG9uc2U7CgogICAgICAgICAgICAgICAgaWYgKGNhblNraXBSZXNwb25zZUhhbmRsZXIpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMucmVzcG9uc2VIYW5kbGVyKHJlcXVlc3RIYW5kbGVyUmVzcG9uc2UsIHZpc1BhcmFtcy5kaW1lbnNpb25zKSk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICB0aGlzLnZpc0RhdGEgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBhczogJ3Zpc3VhbGl6YXRpb24nLAogICAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICAgIHZpc1R5cGU6IHRoaXMudmlzLnR5cGUubmFtZSwKICAgICAgICAgICAgICAgICAgICB2aXNEYXRhOiB0aGlzLnZpc0RhdGEsCiAgICAgICAgICAgICAgICAgICAgdmlzQ29uZmlnOiB2aXNQYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7fQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaChfeCkgewogICAgICAgIHJldHVybiBfZmV0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZldGNoOwogICAgfSgpCiAgfV0pOwoKICByZXR1cm4gVmlzdWFsaXplRGF0YUxvYWRlcjsKfSgpOwoKZXhwb3J0cy5WaXN1YWxpemVEYXRhTG9hZGVyID0gVmlzdWFsaXplRGF0YUxvYWRlcjs="},null]}