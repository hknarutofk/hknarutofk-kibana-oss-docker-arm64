{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/interpreter/public/lib/batched_fetch.js","dependencies":[{"path":"src/legacy/core_plugins/interpreter/public/lib/batched_fetch.js","mtime":1572296409836},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmJhdGNoZWRGZXRjaCA9IGJhdGNoZWRGZXRjaDsKCnZhciBfbG9kYXNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJsb2Rhc2giKSk7Cgp2YXIgX2NvbnN0cyA9IHJlcXVpcmUoIi4vY29uc3RzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgewogIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7CiAgICBkZWZhdWx0OiBvYmoKICB9Owp9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9Ci8qKgogKiBDcmVhdGUgYSBmdW5jdGlvbiB3aGljaCBleGVjdXRlcyBhbiBFeHByZXNzaW9uIGZ1bmN0aW9uIG9uIHRoZQogKiBzZXJ2ZXIgYXMgcGFydCBvZiBhIGxhcmdlciBiYXRjaCBvZiBleGVjdXRpb25zLgogKi8KCgpmdW5jdGlvbiBiYXRjaGVkRmV0Y2goX3JlZikgewogIHZhciBhamF4U3RyZWFtID0gX3JlZi5hamF4U3RyZWFtLAogICAgICBzZXJpYWxpemUgPSBfcmVmLnNlcmlhbGl6ZSwKICAgICAgX3JlZiRtcyA9IF9yZWYubXMsCiAgICAgIG1zID0gX3JlZiRtcyA9PT0gdm9pZCAwID8gMTAgOiBfcmVmJG1zOyAvLyBVbmlxdWVseSBpZGVudGlmaWVzIGVhY2ggZnVuY3Rpb24gY2FsbCBpbiBhIGJhdGNoIG9wZXJhdGlvbgogIC8vIHNvIHRoYXQgdGhlIGFwcHJvcHJpYXRlIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIC8gcmVqZWN0ZWQgbGF0ZXIuCgogIHZhciBpZCA9IDA7IC8vIEEgbWFwIGxpa2UgeyBpZDogeyBmdXR1cmUsIHJlcXVlc3QgfSB9LCB3aGljaCBpcyB1c2VkIHRvCiAgLy8gdHJhY2sgYWxsIG9mIHRoZSBmdW5jdGlvbiBjYWxscyBpbiBhIGJhdGNoIG9wZXJhdGlvbi4KCiAgdmFyIGJhdGNoID0ge307CiAgdmFyIHRpbWVvdXQ7CgogIHZhciBuZXh0SWQgPSBmdW5jdGlvbiBuZXh0SWQoKSB7CiAgICByZXR1cm4gKytpZDsKICB9OwoKICB2YXIgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHsKICAgIGlkID0gMDsKICAgIGJhdGNoID0ge307CiAgICB0aW1lb3V0ID0gdW5kZWZpbmVkOwogIH07CgogIHZhciBydW5CYXRjaCA9IGZ1bmN0aW9uIHJ1bkJhdGNoKCkgewogICAgcHJvY2Vzc0JhdGNoKGFqYXhTdHJlYW0sIGJhdGNoKTsKICAgIHJlc2V0KCk7CiAgfTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmMikgewogICAgdmFyIGZ1bmN0aW9uTmFtZSA9IF9yZWYyLmZ1bmN0aW9uTmFtZSwKICAgICAgICBjb250ZXh0ID0gX3JlZjIuY29udGV4dCwKICAgICAgICBhcmdzID0gX3JlZjIuYXJnczsKCiAgICBpZiAoIXRpbWVvdXQpIHsKICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQocnVuQmF0Y2gsIG1zKTsKICAgIH0KCiAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsCiAgICAgIGFyZ3M6IGFyZ3MsCiAgICAgIGNvbnRleHQ6IHNlcmlhbGl6ZShjb250ZXh0KQogICAgfTsgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYSBkdXBsaWNhdGUgc2VydmVyIGZ1bmN0aW9uLgoKICAgIHZhciBkdXBsaWNhdGUgPSBPYmplY3QudmFsdWVzKGJhdGNoKS5maW5kKGZ1bmN0aW9uIChiYXRjaGVkUmVxdWVzdCkgewogICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LmlzTWF0Y2goYmF0Y2hlZFJlcXVlc3QucmVxdWVzdCwgcmVxdWVzdCk7CiAgICB9KTsgLy8gSWYgaXQgaXMsIGp1c3QgcmV0dXJuIHRoZSBwcm9taXNlIG9mIHRoZSBkdXBsaWNhdGVkIHJlcXVlc3QuCgogICAgaWYgKGR1cGxpY2F0ZSkgewogICAgICByZXR1cm4gZHVwbGljYXRlLmZ1dHVyZS5wcm9taXNlOwogICAgfSAvLyBJZiBub3QsIGNyZWF0ZSBhIG5ldyBwcm9taXNlLCBpZCwgYW5kIGFkZCBpdCB0byB0aGUgYmF0Y2hlZCBjb2xsZWN0aW9uLgoKCiAgICB2YXIgZnV0dXJlID0gY3JlYXRlRnV0dXJlKCk7CiAgICB2YXIgbmV3SWQgPSBuZXh0SWQoKTsKICAgIHJlcXVlc3QuaWQgPSBuZXdJZDsKICAgIGJhdGNoW25ld0lkXSA9IHsKICAgICAgZnV0dXJlOiBmdXR1cmUsCiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QKICAgIH07CiAgICByZXR1cm4gZnV0dXJlLnByb21pc2U7CiAgfTsKfQovKioKICogQW4gZXh0ZXJuYWxseSByZXNvbHZhYmxlIC8gcmVqZWN0YWJsZSBwcm9taXNlLCB1c2VkIHRvIG1ha2Ugc3VyZQogKiBpbmRpdmlkdWFsIGJhdGNoIHJlc3BvbnNlcyBnbyB0byB0aGUgY29ycmVjdCBjYWxsZXIuCiAqLwoKCmZ1bmN0aW9uIGNyZWF0ZUZ1dHVyZSgpIHsKICB2YXIgcmVzb2x2ZTsKICB2YXIgcmVqZWN0OwogIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7CiAgICByZXNvbHZlID0gcmVzOwogICAgcmVqZWN0ID0gcmVqOwogIH0pOwogIHJldHVybiB7CiAgICByZXNvbHZlOiByZXNvbHZlLAogICAgcmVqZWN0OiByZWplY3QsCiAgICBwcm9taXNlOiBwcm9taXNlCiAgfTsKfQovKioKICogUnVucyB0aGUgc3BlY2lmaWVkIGJhdGNoIG9mIGZ1bmN0aW9ucyBvbiB0aGUgc2VydmVyLCB0aGVuIHJlc29sdmVzCiAqIHRoZSByZWxhdGVkIHByb21pc2VzLgogKi8KCgpmdW5jdGlvbiBwcm9jZXNzQmF0Y2goX3gsIF94MikgewogIHJldHVybiBfcHJvY2Vzc0JhdGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9wcm9jZXNzQmF0Y2goKSB7CiAgX3Byb2Nlc3NCYXRjaCA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGFqYXhTdHJlYW0sIGJhdGNoKSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGFqYXhTdHJlYW0oewogICAgICAgICAgICAgIHVybDogX2NvbnN0cy5GVU5DVElPTlNfVVJMLAogICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uczogT2JqZWN0LnZhbHVlcyhiYXRjaCkubWFwKGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdCA9IF9yZWYzLnJlcXVlc3Q7CiAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0OwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBvblJlc3BvbnNlOiBmdW5jdGlvbiBvblJlc3BvbnNlKF9yZWY0KSB7CiAgICAgICAgICAgICAgICB2YXIgaWQgPSBfcmVmNC5pZCwKICAgICAgICAgICAgICAgICAgICBzdGF0dXNDb2RlID0gX3JlZjQuc3RhdHVzQ29kZSwKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfcmVmNC5yZXN1bHQ7CiAgICAgICAgICAgICAgICB2YXIgZnV0dXJlID0gYmF0Y2hbaWRdLmZ1dHVyZTsKCiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzQ29kZSA+PSA0MDApIHsKICAgICAgICAgICAgICAgICAgZnV0dXJlLnJlamVjdChyZXN1bHQpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgZnV0dXJlLnJlc29sdmUocmVzdWx0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDU7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoYmF0Y2gpLmZvckVhY2goZnVuY3Rpb24gKF9yZWY1KSB7CiAgICAgICAgICAgICAgdmFyIGZ1dHVyZSA9IF9yZWY1LmZ1dHVyZTsKICAgICAgICAgICAgICBmdXR1cmUucmVqZWN0KF9jb250ZXh0LnQwKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgNV1dKTsKICB9KSk7CiAgcmV0dXJuIF9wcm9jZXNzQmF0Y2guYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQ=="},null]}