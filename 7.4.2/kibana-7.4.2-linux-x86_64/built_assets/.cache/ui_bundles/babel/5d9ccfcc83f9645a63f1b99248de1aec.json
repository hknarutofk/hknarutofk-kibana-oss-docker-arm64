{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/vislib/lib/axis/axis_labels.js","dependencies":[{"path":"src/legacy/ui/public/vislib/lib/axis/axis_labels.js","mtime":1572296413368},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkF4aXNMYWJlbHMgPSB2b2lkIDA7Cgp2YXIgX2QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImQzIikpOwoKdmFyIF9qcXVlcnkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImpxdWVyeSIpKTsKCnZhciBfdHJ1bmNhdGVfbGFiZWxzID0gcmVxdWlyZSgiLi4vLi4vY29tcG9uZW50cy9sYWJlbHMvdHJ1bmNhdGVfbGFiZWxzIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCnZhciBBeGlzTGFiZWxzID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQXhpc0xhYmVscyhheGlzQ29uZmlnLCBzY2FsZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEF4aXNMYWJlbHMpOwoKICAgIHRoaXMuYXhpc0NvbmZpZyA9IGF4aXNDb25maWc7CiAgICB0aGlzLmF4aXNTY2FsZSA9IHNjYWxlOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEF4aXNMYWJlbHMsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcihzZWxlY3Rpb24pIHsKICAgICAgc2VsZWN0aW9uLmNhbGwodGhpcy5kcmF3KCkpOwogICAgfQogIH0sIHsKICAgIGtleTogInJvdGF0ZUF4aXNMYWJlbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJvdGF0ZUF4aXNMYWJlbHMoKSB7CiAgICAgIHZhciBjb25maWcgPSB0aGlzLmF4aXNDb25maWc7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7CiAgICAgICAgdmFyIHRleHQgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKCcudGljayB0ZXh0Jyk7CgogICAgICAgIGlmIChjb25maWcuZ2V0KCdsYWJlbHMucm90YXRlJykpIHsKICAgICAgICAgIHRleHQuc3R5bGUoJ3RleHQtYW5jaG9yJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gKDAsIF9qcXVlcnkuZGVmYXVsdCkodGhpcykuY3NzKCd0ZXh0LWFuY2hvcicpOwogICAgICAgICAgICB2YXIgcm90YXRlRGVnID0gY29uZmlnLmdldCgnbGFiZWxzLnJvdGF0ZScpOwogICAgICAgICAgICBpZiAoIXJvdGF0ZURlZykgcmV0dXJuIGN1cnJlbnRWYWx1ZTtlbHNlIHsKICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBjb25maWcuZ2V0KCdwb3NpdGlvbicpOwoKICAgICAgICAgICAgICBzd2l0Y2ggKHBvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOgogICAgICAgICAgICAgICAgICByZXR1cm4gJ2VuZCc7CgogICAgICAgICAgICAgICAgY2FzZSAnYm90dG9tJzoKICAgICAgICAgICAgICAgICAgcmV0dXJuICdlbmQnOwoKICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIGlmIChyb3RhdGVEZWcgPT09IDkwIHx8IHJvdGF0ZURlZyA9PT0gLTkwKSByZXR1cm4gJ21pZGRsZSc7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KS5hdHRyKCdkeScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5pc0hvcml6b250YWwoKSA/ICcwLjNlbScgOiAnMCc7CiAgICAgICAgICB9KS5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbiByb3RhdGUoZCwgaikgewogICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBjb25maWcuZ2V0KCdwb3NpdGlvbicpOwogICAgICAgICAgICB2YXIgcm90YXRlRGVnID0gcG9zaXRpb24gPT09ICd0b3AnID8gY29uZmlnLmdldCgnbGFiZWxzLnJvdGF0ZScpIDogLWNvbmZpZy5nZXQoJ2xhYmVscy5yb3RhdGUnKTsKCiAgICAgICAgICAgIGlmICgoMCwgX2pxdWVyeS5kZWZhdWx0KSh0aGlzKS5jc3MoJ3RleHQtYW5jaG9yJykgPT09ICdtaWRkbGUnKSB7CiAgICAgICAgICAgICAgdmFyIGNvb3JkID0gdGV4dFswXVtqXS5nZXRCQm94KCk7CiAgICAgICAgICAgICAgdmFyIHRyYW5zWCA9IGNvb3JkLnggKyBjb29yZC53aWR0aCAvIDI7CiAgICAgICAgICAgICAgdmFyIHRyYW5zWSA9IGNvb3JkLnkgKyBjb29yZC5oZWlnaHQgLyAyOwogICAgICAgICAgICAgIHJldHVybiAicm90YXRlKCIuY29uY2F0KHJvdGF0ZURlZywgIiwgIikuY29uY2F0KHRyYW5zWCwgIiwgIikuY29uY2F0KHRyYW5zWSwgIikiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICB2YXIgX3RyYW5zWCA9IHRoaXMuYXR0cmlidXRlcy54Lm5vZGVWYWx1ZTsKICAgICAgICAgICAgICB2YXIgX3RyYW5zWSA9IHRoaXMuYXR0cmlidXRlcy55Lm5vZGVWYWx1ZTsKICAgICAgICAgICAgICByZXR1cm4gInJvdGF0ZSgiLmNvbmNhdChyb3RhdGVEZWcsICIsICIpLmNvbmNhdChfdHJhbnNYLCAiLCAiKS5jb25jYXQoX3RyYW5zWSwgIikiKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInRydW5jYXRlTGFiZWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cnVuY2F0ZUxhYmVscygpIHsKICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuYXhpc0NvbmZpZzsKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzZWxlY3Rpb24pIHsKICAgICAgICBpZiAoIWNvbmZpZy5nZXQoJ2xhYmVscy50cnVuY2F0ZScpKSByZXR1cm47CiAgICAgICAgc2VsZWN0aW9uLnNlbGVjdEFsbCgnLnRpY2sgdGV4dCcpLnRleHQoZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuICgwLCBfdHJ1bmNhdGVfbGFiZWxzLnRydW5jYXRlTGFiZWwpKHRoaXMsIGNvbmZpZy5nZXQoJ2xhYmVscy50cnVuY2F0ZScpKTsKICAgICAgICB9KTsKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWx0ZXJBeGlzTGFiZWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJBeGlzTGFiZWxzKCkgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBjb25maWcgPSB0aGlzLmF4aXNDb25maWc7CiAgICAgIHZhciBzdGFydFBvcyA9IDA7CiAgICAgIHZhciBwYWRkaW5nID0gMS4xOwogICAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdGlvbikgewogICAgICAgIGlmICghY29uZmlnLmdldCgnbGFiZWxzLmZpbHRlcicpKSByZXR1cm47CiAgICAgICAgdmFyIGVsID0gKDAsIF9qcXVlcnkuZGVmYXVsdCkoY29uZmlnLmdldCgncm9vdEVsJykpLmZpbmQoY29uZmlnLmdldCgnZWxTZWxlY3RvcicpKTsKICAgICAgICB2YXIgbWF4U2l6ZSA9IGNvbmZpZy5pc0hvcml6b250YWwoKSA/IGVsLndpZHRoKCkgOiBlbC5oZWlnaHQoKTsKICAgICAgICB2YXIgc2NhbGVSYW5nZSA9IHNlbGYuYXhpc1NjYWxlLnNjYWxlLnJhbmdlKCk7CiAgICAgICAgdmFyIHNjYWxlV2lkdGggPSBNYXRoLmFicyhzY2FsZVJhbmdlW3NjYWxlUmFuZ2UubGVuZ3RoIC0gMV0gLSBzY2FsZVJhbmdlWzBdKTsKICAgICAgICB2YXIgc2NhbGVTdGFydFBhZCA9IC41ICogKG1heFNpemUgLSBzY2FsZVdpZHRoKTsKICAgICAgICBzZWxlY3Rpb24uc2VsZWN0QWxsKCcudGljayB0ZXh0JykudGV4dChmdW5jdGlvbiAoZCkgewogICAgICAgICAgdmFyIHBhciA9IF9kLmRlZmF1bHQuc2VsZWN0KHRoaXMucGFyZW50Tm9kZSkubm9kZSgpOwoKICAgICAgICAgIHZhciBteVBvcyA9IHNjYWxlU3RhcnRQYWQgKyBzZWxmLmF4aXNTY2FsZS5zY2FsZShkKTsKICAgICAgICAgIHZhciBteVNpemUgPSAoY29uZmlnLmlzSG9yaXpvbnRhbCgpID8gcGFyLmdldEJCb3goKS53aWR0aCA6IHBhci5nZXRCQm94KCkuaGVpZ2h0KSAqIHBhZGRpbmc7CiAgICAgICAgICB2YXIgaGFsZlNpemUgPSBteVNpemUgLyAyOwoKICAgICAgICAgIGlmIChzdGFydFBvcyArIGhhbGZTaXplIDwgbXlQb3MgJiYgbWF4U2l6ZSA+IG15UG9zICsgaGFsZlNpemUpIHsKICAgICAgICAgICAgc3RhcnRQb3MgPSBteVBvcyArIGhhbGZTaXplOwogICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Q29udGVudDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIF9kLmRlZmF1bHQuc2VsZWN0KHRoaXMucGFyZW50Tm9kZSkucmVtb3ZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiZHJhdyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhdygpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgY29uZmlnID0gdGhpcy5heGlzQ29uZmlnOwogICAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdGlvbikgewogICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHNlbGVjdGlvbi5zZWxlY3RBbGwoJ3RleHQnKS5hdHRyKCdzdHlsZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGN1cnJlbnRTdHlsZSA9IF9kLmRlZmF1bHQuc2VsZWN0KHRoaXMpLmF0dHIoJ3N0eWxlJyk7CgogICAgICAgICAgICByZXR1cm4gIiIuY29uY2F0KGN1cnJlbnRTdHlsZSwgIiBmb250LXNpemU6ICIpLmNvbmNhdChjb25maWcuZ2V0KCdsYWJlbHMuZm9udFNpemUnKSwgIjsiKTsKICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKCFjb25maWcuZ2V0KCdsYWJlbHMuc2hvdycpKSBzZWxlY3Rpb24uc2VsZWN0QWxsKCd0ZXh0JykuYXR0cignc3R5bGUnLCAnZGlzcGxheTogbm9uZTsnKTsKICAgICAgICAgIHNlbGVjdGlvbi5jYWxsKHNlbGYudHJ1bmNhdGVMYWJlbHMoKSk7CiAgICAgICAgICBzZWxlY3Rpb24uY2FsbChzZWxmLnJvdGF0ZUF4aXNMYWJlbHMoKSk7CiAgICAgICAgICBzZWxlY3Rpb24uY2FsbChzZWxmLmZpbHRlckF4aXNMYWJlbHMoKSk7CiAgICAgICAgfSk7CiAgICAgIH07CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQXhpc0xhYmVsczsKfSgpOwoKZXhwb3J0cy5BeGlzTGFiZWxzID0gQXhpc0xhYmVsczs="},null]}