{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/chrome/api/nav.js","dependencies":[{"path":"src/legacy/ui/public/chrome/api/nav.js","mtime":1572296412456},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmluaXRDaHJvbWVOYXZBcGkgPSBpbml0Q2hyb21lTmF2QXBpOwoKdmFyIF9hYnNvbHV0ZV90b19wYXJzZWRfdXJsID0gcmVxdWlyZSgiLi4vLi4vdXJsL2Fic29sdXRlX3RvX3BhcnNlZF91cmwiKTsKCnZhciBfbmV3X3BsYXRmb3JtID0gcmVxdWlyZSgiLi4vLi4vbmV3X3BsYXRmb3JtIik7Cgp2YXIgX3JlbGF0aXZlX3RvX2Fic29sdXRlID0gcmVxdWlyZSgiLi4vLi4vdXJsL3JlbGF0aXZlX3RvX2Fic29sdXRlIik7CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7CiAgdHJ5IHsKICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsKICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJlamVjdChlcnJvcik7CiAgICByZXR1cm47CiAgfQoKICBpZiAoaW5mby5kb25lKSB7CiAgICByZXNvbHZlKHZhbHVlKTsKICB9IGVsc2UgewogICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOwogIH0KfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHNlbGYgPSB0aGlzLAogICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7CgogICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgewogICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7CiAgICAgIH0KCiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7CiAgICB9KTsKICB9Owp9CgpmdW5jdGlvbiBpbml0Q2hyb21lTmF2QXBpKGNocm9tZSwgaW50ZXJuYWxzKSB7CiAgdmFyIGNvcmVOYXZMaW5rcyA9IF9uZXdfcGxhdGZvcm0ubnBTdGFydC5jb3JlLmNocm9tZS5uYXZMaW5rczsKICAvKioKICAgKiBDbGVhciBsYXN0IHVybCBmb3IgZGVsZXRlZCBzYXZlZCBvYmplY3RzIHRvIGF2b2lkIGxvYWRpbmcgcGFnZXMgd2l0aCAiQ291bGQgbm90IGxvY2F0ZS4uLiIKICAgKi8KCiAgY2hyb21lLnVudHJhY2tOYXZMaW5rc0ZvckRlbGV0ZWRTYXZlZE9iamVjdHMgPSBmdW5jdGlvbiAoZGVsZXRlZElkcykgewogICAgZnVuY3Rpb24gdXJsQ29udGFpbnNEZWxldGVkSWQodXJsKSB7CiAgICAgIHZhciBpbmNsdWRlZElkID0gZGVsZXRlZElkcy5maW5kKGZ1bmN0aW9uIChkZWxldGVkSWQpIHsKICAgICAgICByZXR1cm4gdXJsLmluY2x1ZGVzKGRlbGV0ZWRJZCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gaW5jbHVkZWRJZCAhPT0gdW5kZWZpbmVkOwogICAgfQoKICAgIGNvcmVOYXZMaW5rcy5nZXRBbGwoKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7CiAgICAgIGlmIChsaW5rLmxpbmtUb0xhc3RTdWJVcmwgJiYgdXJsQ29udGFpbnNEZWxldGVkSWQobGluay51cmwpKSB7CiAgICAgICAgc2V0TGFzdFVybChsaW5rLCBsaW5rLmJhc2VVcmwpOwogICAgICB9CiAgICB9KTsKICB9OwogIC8qKgogICAqIE1hbnVhbGx5IHNldHMgdGhlIGxhc3QgdXJsIGZvciB0aGUgZ2l2ZW4gYXBwLiBUaGUgbGFzdCB1cmwgZm9yIGEgZ2l2ZW4gYXBwIGlzIHVwZGF0ZWQgYXV0b21hdGljYWxseSBkdXJpbmcKICAgKiBub3JtYWwgcGFnZSBuYXZpZ2F0aW9uLCBzbyB0aGlzIHNob3VsZCBvbmx5IG5lZWQgdG8gYmUgY2FsbGVkIHRvIGluc2VydCBhIGxhc3QgdXJsIHRoYXQgd2FzIG5vdCBhY3R1YWxseQogICAqIG5hdmlnYXRlZCB0by4gRm9yIGluc3RhbmNlLCB3aGVuIHNhdmluZyBhbiBvYmplY3QgYW5kIHJlZGlyZWN0aW5nIHRvIGFub3RoZXIgcGFnZSwgdGhlIGxhc3QgdXJsIG9mIHRoZSBhcHAKICAgKiBzaG91bGQgYmUgdGhlIHNhdmVkIGluc3RhbmNlLCBidXQgYmVjYXVzZSBvZiB0aGUgcmVkaXJlY3QgdG8gYSBkaWZmZXJlbnQgcGFnZSAoZS5nLiBgU2F2ZSBhbmQgQWRkIHRvIERhc2hib2FyZGAKICAgKiBvbiB2aXN1YWxpemUgdGFiKSwgaXQgd29uJ3QgYmUgdHJhY2tlZCBhdXRvbWF0aWNhbGx5IGFuZCB3aWxsIG5lZWQgdG8gYmUgaW5zZXJ0ZWQgbWFudWFsbHkuIFNlZQogICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lbGFzdGljL2tpYmFuYS9wdWxsLzExOTMyIGZvciBtb3JlIGJhY2tncm91bmQgb24gd2h5IHRoaXMgd2FzIGFkZGVkLgogICAqCiAgICogQHBhcmFtIGlkIHtTdHJpbmd9IC0gYW4gaWQgdGhhdCByZXByZXNlbnRzIHRoZSBuYXZpZ2F0aW9uIGxpbmsuCiAgICogQHBhcmFtIGtpYmFuYVBhcnNlZFVybCB7S2liYW5hUGFyc2VkVXJsfSB0aGUgdXJsIHRvIHRyYWNrCiAgICovCgoKICBjaHJvbWUudHJhY2tTdWJVcmxGb3JBcHAgPSBmdW5jdGlvbiAoaWQsIGtpYmFuYVBhcnNlZFVybCkgewogICAgdmFyIG5hdkxpbmsgPSBjb3JlTmF2TGlua3MuZ2V0KGlkKTsKCiAgICBpZiAobmF2TGluaykgewogICAgICBzZXRMYXN0VXJsKG5hdkxpbmssIGtpYmFuYVBhcnNlZFVybC5nZXRBYnNvbHV0ZVVybCgpKTsKICAgIH0KICB9OwoKICBpbnRlcm5hbHMudHJhY2tQb3NzaWJsZVN1YlVybCA9CiAgLyojX19QVVJFX18qLwogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHVybCkgewogICAgICB2YXIga2liYW5hUGFyc2VkVXJsOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAga2liYW5hUGFyc2VkVXJsID0gKDAsIF9hYnNvbHV0ZV90b19wYXJzZWRfdXJsLmFic29sdXRlVG9QYXJzZWRVcmwpKHVybCwgY2hyb21lLmdldEJhc2VQYXRoKCkpOwogICAgICAgICAgICAgIGNvcmVOYXZMaW5rcy5nZXRBbGwoKSAvLyBGaWx0ZXIgb25seSBsZWdhY3kgbGlua3MKICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChsaW5rKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbGluay5sZWdhY3k7CiAgICAgICAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAobGluaykgewogICAgICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IHVybC5zdGFydHNXaXRoKGxpbmsuc3ViVXJsQmFzZSk7CiAgICAgICAgICAgICAgICBsaW5rID0gY29yZU5hdkxpbmtzLnVwZGF0ZShsaW5rLmlkLCB7CiAgICAgICAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlKSB7CiAgICAgICAgICAgICAgICAgIHNldExhc3RVcmwobGluaywgdXJsKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxpbmsgPSByZWZyZXNoTGFzdFVybChsaW5rKTsKICAgICAgICAgICAgICAgIHZhciBuZXdHbG9iYWxTdGF0ZSA9IGtpYmFuYVBhcnNlZFVybC5nZXRHbG9iYWxTdGF0ZSgpOwoKICAgICAgICAgICAgICAgIGlmIChuZXdHbG9iYWxTdGF0ZSkgewogICAgICAgICAgICAgICAgICBpbmplY3ROZXdHbG9iYWxTdGF0ZShsaW5rLCBraWJhbmFQYXJzZWRVcmwuYXBwSWQsIG5ld0dsb2JhbFN0YXRlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9KCk7CgogIGZ1bmN0aW9uIGxhc3RTdWJVcmxLZXkobGluaykgewogICAgcmV0dXJuICJsYXN0U3ViVXJsOiIuY29uY2F0KGxpbmsuYmFzZVVybCk7CiAgfQoKICBmdW5jdGlvbiBnZXRMYXN0VXJsKGxpbmspIHsKICAgIHJldHVybiBpbnRlcm5hbHMuYXBwVXJsU3RvcmUuZ2V0SXRlbShsYXN0U3ViVXJsS2V5KGxpbmspKTsKICB9CgogIGZ1bmN0aW9uIHNldExhc3RVcmwobGluaywgdXJsKSB7CiAgICBpZiAobGluay5saW5rVG9MYXN0U3ViVXJsID09PSBmYWxzZSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgaW50ZXJuYWxzLmFwcFVybFN0b3JlLnNldEl0ZW0obGFzdFN1YlVybEtleShsaW5rKSwgdXJsKTsKICAgIHJlZnJlc2hMYXN0VXJsKGxpbmspOwogIH0KCiAgZnVuY3Rpb24gcmVmcmVzaExhc3RVcmwobGluaykgewogICAgdmFyIGxhc3RTdWJVcmwgPSBnZXRMYXN0VXJsKGxpbmspOwogICAgcmV0dXJuIGNvcmVOYXZMaW5rcy51cGRhdGUobGluay5pZCwgewogICAgICB1cmw6IGxhc3RTdWJVcmwgfHwgbGluay51cmwgfHwgbGluay5iYXNlVXJsCiAgICB9KTsKICB9CgogIGZ1bmN0aW9uIGluamVjdE5ld0dsb2JhbFN0YXRlKGxpbmssIGZyb21BcHBJZCwgbmV3R2xvYmFsU3RhdGUpIHsKICAgIHZhciBraWJhbmFQYXJzZWRVcmwgPSAoMCwgX2Fic29sdXRlX3RvX3BhcnNlZF91cmwuYWJzb2x1dGVUb1BhcnNlZFVybCkoZ2V0TGFzdFVybChsaW5rKSB8fCBsaW5rLnVybCB8fCBsaW5rLmJhc2VVcmwsIGNocm9tZS5nZXRCYXNlUGF0aCgpKTsgLy8gZG9uJ3QgY29weSBnbG9iYWwgc3RhdGUgaWYgbGlua3MgYXJlIGZvciBkaWZmZXJlbnQgYXBwcwoKICAgIGlmIChmcm9tQXBwSWQgIT09IGtpYmFuYVBhcnNlZFVybC5hcHBJZCkgcmV0dXJuOwogICAga2liYW5hUGFyc2VkVXJsLnNldEdsb2JhbFN0YXRlKG5ld0dsb2JhbFN0YXRlKTsKICAgIGNvcmVOYXZMaW5rcy51cGRhdGUobGluay5pZCwgewogICAgICB1cmw6IGtpYmFuYVBhcnNlZFVybC5nZXRBYnNvbHV0ZVVybCgpCiAgICB9KTsKICB9IC8vIHNpbXVsYXRlIGEgcG9zc2libGUgY2hhbmdlIGluIHVybCB0byBpbml0aWFsaXplIHRoZQogIC8vIGxpbmsuYWN0aXZlIGFuZCBsaW5rLmxhc3RVcmwgcHJvcGVydGllcwoKCiAgY29yZU5hdkxpbmtzLmdldEFsbCgpLmZpbHRlcihmdW5jdGlvbiAobGluaykgewogICAgcmV0dXJuIGxpbmsuc3ViVXJsQmFzZTsKICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7CiAgICBjb3JlTmF2TGlua3MudXBkYXRlKGxpbmsuaWQsIHsKICAgICAgc3ViVXJsQmFzZTogKDAsIF9yZWxhdGl2ZV90b19hYnNvbHV0ZS5yZWxhdGl2ZVRvQWJzb2x1dGUpKGNocm9tZS5hZGRCYXNlUGF0aChsaW5rLnN1YlVybEJhc2UpKQogICAgfSk7CiAgfSk7CiAgaW50ZXJuYWxzLnRyYWNrUG9zc2libGVTdWJVcmwoZG9jdW1lbnQubG9jYXRpb24uaHJlZik7Cn0="},null]}