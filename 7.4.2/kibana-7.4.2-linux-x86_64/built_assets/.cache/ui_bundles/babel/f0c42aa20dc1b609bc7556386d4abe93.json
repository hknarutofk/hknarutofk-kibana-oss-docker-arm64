{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/metrics/public/metrics_fn.js","dependencies":[{"path":"src/legacy/core_plugins/metrics/public/metrics_fn.js","mtime":1572296411024},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZU1ldHJpY3NGbiA9IHZvaWQgMDsKCnZhciBfbG9kYXNoID0gcmVxdWlyZSgibG9kYXNoIik7Cgp2YXIgX2kxOG4gPSByZXF1aXJlKCJAa2JuL2kxOG4iKTsKCnZhciBfcGVyc2lzdGVkX3N0YXRlID0gcmVxdWlyZSgidWkvcGVyc2lzdGVkX3N0YXRlIik7Cgp2YXIgX2Nocm9tZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgidWkvY2hyb21lIikpOwoKdmFyIF9yZXF1ZXN0X2hhbmRsZXIgPSByZXF1aXJlKCIuL3JlcXVlc3RfaGFuZGxlciIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKdmFyIG5hbWUgPSAndHN2Yic7Cgp2YXIgY3JlYXRlTWV0cmljc0ZuID0gZnVuY3Rpb24gY3JlYXRlTWV0cmljc0ZuKCkgewogIHJldHVybiB7CiAgICBuYW1lOiBuYW1lLAogICAgdHlwZTogJ3JlbmRlcicsCiAgICBjb250ZXh0OiB7CiAgICAgIHR5cGVzOiBbJ2tpYmFuYV9jb250ZXh0JywgJ251bGwnXQogICAgfSwKICAgIGhlbHA6IF9pMThuLmkxOG4udHJhbnNsYXRlKCd0c3ZiLmZ1bmN0aW9uLmhlbHAnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVFNWQiB2aXN1YWxpemF0aW9uJwogICAgfSksCiAgICBhcmdzOiB7CiAgICAgIHBhcmFtczogewogICAgICAgIHR5cGVzOiBbJ3N0cmluZyddLAogICAgICAgIGRlZmF1bHQ6ICcie30iJywKICAgICAgICBoZWxwOiAnJwogICAgICB9LAogICAgICB1aVN0YXRlOiB7CiAgICAgICAgdHlwZXM6IFsnc3RyaW5nJ10sCiAgICAgICAgZGVmYXVsdDogJyJ7fSInLAogICAgICAgIGhlbHA6ICcnCiAgICAgIH0KICAgIH0sCiAgICBmbjogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZuID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShjb250ZXh0LCBhcmdzKSB7CiAgICAgICAgdmFyIHVpU2V0dGluZ3MsIG1ldHJpY3NSZXF1ZXN0SGFuZGxlciwgcGFyYW1zLCB1aVN0YXRlUGFyYW1zLCB1aVN0YXRlLCByZXNwb25zZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICB1aVNldHRpbmdzID0gX2Nocm9tZS5kZWZhdWx0LmdldFVpU2V0dGluZ3NDbGllbnQoKTsKICAgICAgICAgICAgICAgIG1ldHJpY3NSZXF1ZXN0SGFuZGxlciA9ICgwLCBfcmVxdWVzdF9oYW5kbGVyLmNyZWF0ZU1ldHJpY3NSZXF1ZXN0SGFuZGxlcikodWlTZXR0aW5ncyk7CiAgICAgICAgICAgICAgICBwYXJhbXMgPSBKU09OLnBhcnNlKGFyZ3MucGFyYW1zKTsKICAgICAgICAgICAgICAgIHVpU3RhdGVQYXJhbXMgPSBKU09OLnBhcnNlKGFyZ3MudWlTdGF0ZSk7CiAgICAgICAgICAgICAgICB1aVN0YXRlID0gbmV3IF9wZXJzaXN0ZWRfc3RhdGUuUGVyc2lzdGVkU3RhdGUodWlTdGF0ZVBhcmFtcyk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBtZXRyaWNzUmVxdWVzdEhhbmRsZXIoewogICAgICAgICAgICAgICAgICB0aW1lUmFuZ2U6ICgwLCBfbG9kYXNoLmdldCkoY29udGV4dCwgJ3RpbWVSYW5nZScsIG51bGwpLAogICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIF9sb2Rhc2guZ2V0KShjb250ZXh0LCAncXVlcnknLCBudWxsKSwKICAgICAgICAgICAgICAgICAgZmlsdGVyczogKDAsIF9sb2Rhc2guZ2V0KShjb250ZXh0LCAnZmlsdGVycycsIG51bGwpLAogICAgICAgICAgICAgICAgICB2aXNQYXJhbXM6IHBhcmFtcywKICAgICAgICAgICAgICAgICAgdWlTdGF0ZTogdWlTdGF0ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIHJlc3BvbnNlLnZpc1R5cGUgPSAnbWV0cmljcyc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZW5kZXInLAogICAgICAgICAgICAgICAgICBhczogJ3Zpc3VhbGl6YXRpb24nLAogICAgICAgICAgICAgICAgICB2YWx1ZTogewogICAgICAgICAgICAgICAgICAgIHVpU3RhdGU6IHVpU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgdmlzVHlwZTogJ21ldHJpY3MnLAogICAgICAgICAgICAgICAgICAgIHZpc0NvbmZpZzogcGFyYW1zLAogICAgICAgICAgICAgICAgICAgIHZpc0RhdGE6IHJlc3BvbnNlCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZuKF94LCBfeDIpIHsKICAgICAgICByZXR1cm4gX2ZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmbjsKICAgIH0oKQogIH07Cn07CgpleHBvcnRzLmNyZWF0ZU1ldHJpY3NGbiA9IGNyZWF0ZU1ldHJpY3NGbjs="},null]}