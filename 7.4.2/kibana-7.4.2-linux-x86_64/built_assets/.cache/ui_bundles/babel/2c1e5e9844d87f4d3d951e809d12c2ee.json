{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/visualize/wizard/type_selection/type_selection.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/visualize/wizard/type_selection/type_selection.js","mtime":1572296410848},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuVHlwZVNlbGVjdGlvbiA9IHZvaWQgMDsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9yZWFjdCA9IHJlcXVpcmUoIkBrYm4vaTE4bi9yZWFjdCIpOwoKdmFyIF9sb2Rhc2ggPSByZXF1aXJlKCJsb2Rhc2giKTsKCnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfY2hyb21lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJ1aS9jaHJvbWUiKSk7Cgp2YXIgX2V1aSA9IHJlcXVpcmUoIkBlbGFzdGljL2V1aSIpOwoKdmFyIF9tZW1vaXplID0gcmVxdWlyZSgidWkvdXRpbHMvbWVtb2l6ZSIpOwoKdmFyIF9uZXdfdmlzX2hlbHAgPSByZXF1aXJlKCIuL25ld192aXNfaGVscCIpOwoKdmFyIF92aXNfaGVscF90ZXh0ID0gcmVxdWlyZSgiLi92aXNfaGVscF90ZXh0Iik7Cgp2YXIgX3Zpc190eXBlX2ljb24gPSByZXF1aXJlKCIuL3Zpc190eXBlX2ljb24iKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7CiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsKICAgIGRlZmF1bHQ6IG9iagogIH07Cn0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gInN5bWJvbCIpIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTsKICAgIH07CiAgfSBlbHNlIHsKICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgewogICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9CgogIHJldHVybiBfdHlwZW9mKG9iaik7Cn0KCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgewogIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsKCiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOwogICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgewogICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsKICAgIH0pOwogICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOwogIH0KCiAgcmV0dXJuIGtleXM7Cn0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7CiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OwoKICAgIGlmIChpICUgMikgewogICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7CiAgICAgIH0pOwogICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOwogICAgfSBlbHNlIHsKICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOwogICAgICB9KTsKICAgIH0KICB9CgogIHJldHVybiB0YXJnZXQ7Cn0KCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7CiAgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UiKTsKfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7CiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSAiW29iamVjdCBBcmd1bWVudHNdIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7CiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgewogICAgICBhcnIyW2ldID0gYXJyW2ldOwogICAgfQoKICAgIHJldHVybiBhcnIyOwogIH0KfQoKZnVuY3Rpb24gX2V4dGVuZHMoKSB7CiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CgogICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7CiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsKICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHRhcmdldDsKICB9OwoKICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgVHlwZVNlbGVjdGlvbiA9Ci8qI19fUFVSRV9fKi8KZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHsKICBfaW5oZXJpdHMoVHlwZVNlbGVjdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFR5cGVTZWxlY3Rpb24oKSB7CiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjsKCiAgICB2YXIgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR5cGVTZWxlY3Rpb24pOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgfQoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSBfZ2V0UHJvdG90eXBlT2YoVHlwZVNlbGVjdGlvbikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInN0YXRlIiwgewogICAgICBoaWdobGlnaHRlZFR5cGU6IG51bGwsCiAgICAgIHF1ZXJ5OiAnJwogICAgfSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiZ2V0RmlsdGVyZWRWaXNUeXBlcyIsICgwLCBfbWVtb2l6ZS5tZW1vaXplTGFzdCkoX3RoaXMuZmlsdGVyZWRWaXNUeXBlcykpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlbmRlclZpc1R5cGUiLCBmdW5jdGlvbiAodmlzVHlwZSkgewogICAgICB2YXIgc3RhZ2UgPSB7fTsKICAgICAgdmFyIGhpZ2hsaWdodE1zZzsKCiAgICAgIGlmICghKCdhbGlhc1VybCcgaW4gdmlzVHlwZSkgJiYgdmlzVHlwZS5zdGFnZSA9PT0gJ2V4cGVyaW1lbnRhbCcpIHsKICAgICAgICBzdGFnZSA9IHsKICAgICAgICAgIGJldGFCYWRnZUxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS5uZXdWaXNXaXphcmQuZXhwZXJpbWVudGFsVGl0bGUnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXhwZXJpbWVudGFsJwogICAgICAgICAgfSksCiAgICAgICAgICBiZXRhQmFkZ2VUb29sdGlwQ29udGVudDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi52aXN1YWxpemUubmV3VmlzV2l6YXJkLmV4cGVyaW1lbnRhbFRvb2x0aXAnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhpcyB2aXN1YWxpemF0aW9uIG1pZ2h0IGJlIGNoYW5nZWQgb3IgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlIGFuZCBpcyBub3Qgc3ViamVjdCB0byB0aGUgc3VwcG9ydCBTTEEuJwogICAgICAgICAgfSkKICAgICAgICB9OwogICAgICAgIGhpZ2hsaWdodE1zZyA9IF9pMThuLmkxOG4udHJhbnNsYXRlKCdrYm4udmlzdWFsaXplLm5ld1Zpc1dpemFyZC5leHBlcmltZW50YWxEZXNjcmlwdGlvbicsIHsKICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhpcyB2aXN1YWxpemF0aW9uIGlzIGV4cGVyaW1lbnRhbC4gVGhlIGRlc2lnbiBhbmQgaW1wbGVtZW50YXRpb24gYXJlIGxlc3MgbWF0dXJlIHRoYW4gc3RhYmxlIHZpc3VhbGl6YXRpb25zIGFuZCBtaWdodCBiZSBzdWJqZWN0IHRvIGNoYW5nZS4nCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoJ2FsaWFzVXJsJyBpbiB2aXNUeXBlKSB7CiAgICAgICAgdmFyIGFsaWFzRGVzY3JpcHRpb24gPSBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS5uZXdWaXNXaXphcmQudmlzVHlwZUFsaWFzRGVzY3JpcHRpb24nLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ09wZW5zIGEgS2liYW5hIGFwcGxpY2F0aW9uIHRoYXQgaXMgb3V0c2lkZSBvZiBWaXN1YWxpemUuJwogICAgICAgIH0pOwoKICAgICAgICBzdGFnZSA9IHsKICAgICAgICAgIGJldGFCYWRnZUxhYmVsOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgna2JuLnZpc3VhbGl6ZS5uZXdWaXNXaXphcmQudmlzVHlwZUFsaWFzVGl0bGUnLCB7CiAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnS2liYW5hIGFwcGxpY2F0aW9uJwogICAgICAgICAgfSksCiAgICAgICAgICBiZXRhQmFkZ2VUb29sdGlwQ29udGVudDogYWxpYXNEZXNjcmlwdGlvbiwKICAgICAgICAgIGJldGFCYWRnZUljb25UeXBlOiAncG9wb3V0JwogICAgICAgIH07CiAgICAgICAgaGlnaGxpZ2h0TXNnID0gYWxpYXNEZXNjcmlwdGlvbjsKICAgICAgfQoKICAgICAgdmFyIGlzRGlzYWJsZWQgPSBfdGhpcy5zdGF0ZS5xdWVyeSAhPT0gJycgJiYgIXZpc1R5cGUuaGlnaGxpZ2h0ZWQ7CiAgICAgIHZhciBvbkNsaWNrID0gJ2FsaWFzVXJsJyBpbiB2aXNUeXBlID8gZnVuY3Rpb24gKCkgewogICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IF9jaHJvbWUuZGVmYXVsdC5hZGRCYXNlUGF0aCh2aXNUeXBlLmFsaWFzVXJsKTsKICAgICAgfSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMub25WaXNUeXBlU2VsZWN0ZWQodmlzVHlwZSk7CiAgICAgIH07CiAgICAgIHZhciBoaWdobGlnaHRlZFR5cGUgPSB7CiAgICAgICAgdGl0bGU6IHZpc1R5cGUudGl0bGUsCiAgICAgICAgbmFtZTogdmlzVHlwZS5uYW1lLAogICAgICAgIGRlc2NyaXB0aW9uOiB2aXNUeXBlLmRlc2NyaXB0aW9uLAogICAgICAgIGhpZ2hsaWdodE1zZzogaGlnaGxpZ2h0TXNnCiAgICAgIH07CiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUtleVBhZE1lbnVJdGVtQnV0dG9uLCBfZXh0ZW5kcyh7CiAgICAgICAga2V5OiB2aXNUeXBlLm5hbWUsCiAgICAgICAgbGFiZWw6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJzcGFuIiwgewogICAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogInZpc1R5cGVUaXRsZSIKICAgICAgICB9LCB2aXNUeXBlLnRpdGxlKSwKICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLAogICAgICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0SGlnaGxpZ2h0VHlwZShoaWdobGlnaHRlZFR5cGUpOwogICAgICAgIH0sCiAgICAgICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0SGlnaGxpZ2h0VHlwZShoaWdobGlnaHRlZFR5cGUpOwogICAgICAgIH0sCiAgICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0SGlnaGxpZ2h0VHlwZShudWxsKTsKICAgICAgICB9LAogICAgICAgIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKCkgewogICAgICAgICAgcmV0dXJuIF90aGlzLnNldEhpZ2hsaWdodFR5cGUobnVsbCk7CiAgICAgICAgfSwKICAgICAgICBjbGFzc05hbWU6ICJ2aXNOZXdWaXNEaWFsb2dfX3R5cGUiLAogICAgICAgICJkYXRhLXRlc3Qtc3ViaiI6ICJ2aXNUeXBlLSIuY29uY2F0KHZpc1R5cGUubmFtZSksCiAgICAgICAgImRhdGEtdmlzLXN0YWdlIjogISgnYWxpYXNVcmwnIGluIHZpc1R5cGUpID8gdmlzVHlwZS5zdGFnZSA6ICdhbGlhcycsCiAgICAgICAgZGlzYWJsZWQ6IGlzRGlzYWJsZWQsCiAgICAgICAgImFyaWEtZGVzY3JpYmVkYnkiOiAidmlzVHlwZURlc2NyaXB0aW9uLSIuY29uY2F0KHZpc1R5cGUubmFtZSksCiAgICAgICAgcm9sZTogIm1lbnVpdGVtIgogICAgICB9LCBzdGFnZSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF92aXNfdHlwZV9pY29uLlZpc1R5cGVJY29uLCB7CiAgICAgICAgaWNvbjogdmlzVHlwZS5pY29uLAogICAgICAgIGltYWdlOiAhKCdhbGlhc1VybCcgaW4gdmlzVHlwZSkgPyB2aXNUeXBlLmltYWdlIDogdW5kZWZpbmVkCiAgICAgIH0pKTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgIm9uUXVlcnlDaGFuZ2UiLCBmdW5jdGlvbiAoZXYpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHF1ZXJ5OiBldi50YXJnZXQudmFsdWUKICAgICAgfSk7CiAgICB9KTsKCiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVHlwZVNlbGVjdGlvbiwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLAogICAgICAgICAgcXVlcnkgPSBfdGhpcyRzdGF0ZS5xdWVyeSwKICAgICAgICAgIGhpZ2hsaWdodGVkVHlwZSA9IF90aGlzJHN0YXRlLmhpZ2hsaWdodGVkVHlwZTsKICAgICAgdmFyIHZpc1R5cGVzID0gdGhpcy5nZXRGaWx0ZXJlZFZpc1R5cGVzKHRoaXMucHJvcHMudmlzVHlwZXNSZWdpc3RyeSwgdGhpcy5wcm9wcy52aXNUeXBlQWxpYXNlcywgcXVlcnkpOwogICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aU1vZGFsSGVhZGVyLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aU1vZGFsSGVhZGVyVGl0bGUsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJrYm4udmlzdWFsaXplLm5ld1Zpc1dpemFyZC50aXRsZSIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJOZXcgVmlzdWFsaXphdGlvbiIKICAgICAgfSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICBjbGFzc05hbWU6ICJ2aXNOZXdWaXNEaWFsb2dfX2JvZHkiCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpRmxleEdyb3VwLCB7CiAgICAgICAgZ3V0dGVyU2l6ZTogInhsIgogICAgICB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhHcm91cCwgewogICAgICAgIGNsYXNzTmFtZTogInZpc05ld1Zpc0RpYWxvZ19fbGlzdCIsCiAgICAgICAgZGlyZWN0aW9uOiAiY29sdW1uIiwKICAgICAgICBndXR0ZXJTaXplOiAibm9uZSIsCiAgICAgICAgcmVzcG9uc2l2ZTogZmFsc2UKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGdyb3c6IGZhbHNlLAogICAgICAgIGNsYXNzTmFtZTogInZpc05ld1Zpc0RpYWxvZ19fc2VhcmNoV3JhcHBlciIKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGaWVsZFNlYXJjaCwgewogICAgICAgIHBsYWNlaG9sZGVyOiAiRmlsdGVyIiwKICAgICAgICB2YWx1ZTogcXVlcnksCiAgICAgICAgb25DaGFuZ2U6IHRoaXMub25RdWVyeUNoYW5nZSwKICAgICAgICBmdWxsV2lkdGg6IHRydWUsCiAgICAgICAgImRhdGEtdGVzdC1zdWJqIjogImZpbHRlclZpc1R5cGUiLAogICAgICAgICJhcmlhLWxhYmVsIjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi52aXN1YWxpemUubmV3VmlzV2l6YXJkLmZpbHRlclZpc1R5cGVBcmlhTGFiZWwnLCB7CiAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ0ZpbHRlciBmb3IgYSB2aXN1YWxpemF0aW9uIHR5cGUnCiAgICAgICAgfSkKICAgICAgfSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUZsZXhJdGVtLCB7CiAgICAgICAgZ3JvdzogMSwKICAgICAgICBjbGFzc05hbWU6ICJ2aXNOZXdWaXNEaWFsb2dfX3R5cGVzV3JhcHBlciIKICAgICAgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTY3JlZW5SZWFkZXJPbmx5LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgic3BhbiIsIHsKICAgICAgICAiYXJpYS1saXZlIjogInBvbGl0ZSIKICAgICAgfSwgcXVlcnkgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0LkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICBpZDogImtibi52aXN1YWxpemUubmV3VmlzV2l6YXJkLnJlc3VsdHNGb3VuZCIsCiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJ7cmVzdWx0Q291bnR9IHtyZXN1bHRDb3VudCwgcGx1cmFsLCBvbmUge3R5cGV9IG90aGVyIHt0eXBlc30gfSBmb3VuZCIsCiAgICAgICAgdmFsdWVzOiB7CiAgICAgICAgICByZXN1bHRDb3VudDogdmlzVHlwZXMuZmlsdGVyKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgICAgICAgIHJldHVybiB0eXBlLmhpZ2hsaWdodGVkOwogICAgICAgICAgfSkubGVuZ3RoCiAgICAgICAgfQogICAgICB9KSkpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aUtleVBhZE1lbnUsIHsKICAgICAgICBjbGFzc05hbWU6ICJ2aXNOZXdWaXNEaWFsb2dfX3R5cGVzIiwKICAgICAgICAiZGF0YS10ZXN0LXN1YmoiOiAidmlzTmV3RGlhbG9nVHlwZXMiCiAgICAgIH0sIHZpc1R5cGVzLm1hcCh0aGlzLnJlbmRlclZpc1R5cGUpKSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlGbGV4SXRlbSwgewogICAgICAgIGNsYXNzTmFtZTogInZpc05ld1Zpc0RpYWxvZ19fZGVzY3JpcHRpb24iLAogICAgICAgIGdyb3c6IGZhbHNlCiAgICAgIH0sIGhpZ2hsaWdodGVkVHlwZSA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF92aXNfaGVscF90ZXh0LlZpc0hlbHBUZXh0LCBoaWdobGlnaHRlZFR5cGUpIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Mi5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZXVpLkV1aVRpdGxlLCB7CiAgICAgICAgc2l6ZTogInMiCiAgICAgIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5Gb3JtYXR0ZWRNZXNzYWdlLCB7CiAgICAgICAgaWQ6ICJrYm4udmlzdWFsaXplLm5ld1Zpc1dpemFyZC5zZWxlY3RWaXNUeXBlIiwKICAgICAgICBkZWZhdWx0TWVzc2FnZTogIlNlbGVjdCBhIHZpc3VhbGl6YXRpb24gdHlwZSIKICAgICAgfSkpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V1aS5FdWlTcGFjZXIsIHsKICAgICAgICBzaXplOiAibSIKICAgICAgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9uZXdfdmlzX2hlbHAuTmV3VmlzSGVscCwgbnVsbCkpKSkpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWx0ZXJlZFZpc1R5cGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJlZFZpc1R5cGVzKHZpc1R5cGVzKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIHZpc1R5cGVBbGlhc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTsKICAgICAgdmFyIHF1ZXJ5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgICAgIHZhciB0eXBlcyA9IHZpc1R5cGVzLmZpbHRlcihmdW5jdGlvbiAodHlwZSkgewogICAgICAgIC8vIEZpbHRlciBvdXQgYWxsIGxhYiB2aXN1YWxpemF0aW9ucyBpZiBsYWIgbW9kZSBpcyBub3QgZW5hYmxlZAogICAgICAgIGlmICghX3RoaXMyLnByb3BzLnNob3dFeHBlcmltZW50YWwgJiYgdHlwZS5zdGFnZSA9PT0gJ2V4cGVyaW1lbnRhbCcpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IC8vIEZpbHRlciBvdXQgaGlkZGVuIHZpc3VhbGl6YXRpb25zCgoKICAgICAgICBpZiAodHlwZS5oaWRkZW4pIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9KTsKICAgICAgdmFyIGFsbFR5cGVzID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0eXBlcyksIF90b0NvbnN1bWFibGVBcnJheSh2aXNUeXBlQWxpYXNlcykpOwogICAgICB2YXIgZW50cmllczsKCiAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICBlbnRyaWVzID0gYWxsVHlwZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgdHlwZSwgewogICAgICAgICAgICBoaWdobGlnaHRlZDogZmFsc2UKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBxID0gcXVlcnkudG9Mb3dlckNhc2UoKTsKICAgICAgICBlbnRyaWVzID0gYWxsVHlwZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgICAgICB2YXIgbWF0Y2hlc1F1ZXJ5ID0gdHlwZS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocSkgfHwgdHlwZS50aXRsZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHEpIHx8IHR5cGVvZiB0eXBlLmRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyAmJiB0eXBlLmRlc2NyaXB0aW9uLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocSk7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgdHlwZSwgewogICAgICAgICAgICBoaWdobGlnaHRlZDogbWF0Y2hlc1F1ZXJ5CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuICgwLCBfbG9kYXNoLnNvcnRCeU9yZGVyKShlbnRyaWVzLCBbJ2hpZ2hsaWdodGVkJywgJ3RpdGxlJ10sIFsnZGVzYycsICdhc2MnXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0SGlnaGxpZ2h0VHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0SGlnaGxpZ2h0VHlwZShoaWdobGlnaHRlZFR5cGUpIHsKICAgICAgdGhpcy5zZXRTdGF0ZSh7CiAgICAgICAgaGlnaGxpZ2h0ZWRUeXBlOiBoaWdobGlnaHRlZFR5cGUKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVHlwZVNlbGVjdGlvbjsKfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTsKCmV4cG9ydHMuVHlwZVNlbGVjdGlvbiA9IFR5cGVTZWxlY3Rpb247"},null]}