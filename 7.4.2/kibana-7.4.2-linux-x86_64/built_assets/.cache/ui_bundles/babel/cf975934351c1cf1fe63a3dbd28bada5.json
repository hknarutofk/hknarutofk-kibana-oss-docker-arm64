{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/saved_objects/saved_object_loader.js","dependencies":[{"path":"src/legacy/ui/public/saved_objects/saved_object_loader.js","mtime":1572296412904},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlNhdmVkT2JqZWN0TG9hZGVyID0gdm9pZCAwOwoKdmFyIF9zdHJpbmdfdXRpbHMgPSByZXF1aXJlKCIuLi91dGlscy9zdHJpbmdfdXRpbHMiKTsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgovKioKICogVGhlIFNhdmVkT2JqZWN0TG9hZGVyIGNsYXNzIHByb3ZpZGVzIHNvbWUgY29udmVuaWVuY2UgZnVuY3Rpb25zCiAqIHRvIGxvYWQgYW5kIHNhdmUgb25lIGtpbmQgb2Ygc2F2ZWQgb2JqZWN0cyAoc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3RvcikuCiAqCiAqIEl0IGlzIGJhc2VkIG9uIHRoZSBTYXZlZE9iamVjdENsaWVudCB3aGljaCBpbXBsZW1lbnRzIGxvYWRpbmcgYW5kIHNhdmluZwogKiBpbiBhbiBhYnN0cmFjdCwgdHlwZS1hZ25vc3RpYyB3YXkuIElmIHBvc3NpYmxlLCB1c2UgU2F2ZWRPYmplY3RDbGllbnQgZGlyZWN0bHkKICogdG8gYXZvaWQgcHVsbGluZyBpbiBleHRyYSBmdW5jdGlvbmFsaXR5IHdoaWNoIGlzbid0IHVzZWQuCiAqLwp2YXIgU2F2ZWRPYmplY3RMb2FkZXIgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTYXZlZE9iamVjdExvYWRlcihTYXZlZE9iamVjdENsYXNzLCBrYm5VcmwsIGNocm9tZSwgc2F2ZWRPYmplY3RDbGllbnQpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTYXZlZE9iamVjdExvYWRlcik7CgogICAgdGhpcy50eXBlID0gU2F2ZWRPYmplY3RDbGFzcy50eXBlOwogICAgdGhpcy5DbGFzcyA9IFNhdmVkT2JqZWN0Q2xhc3M7CiAgICB0aGlzLmxvd2VyY2FzZVR5cGUgPSB0aGlzLnR5cGUudG9Mb3dlckNhc2UoKTsKICAgIHRoaXMua2JuVXJsID0ga2JuVXJsOwogICAgdGhpcy5jaHJvbWUgPSBjaHJvbWU7CiAgICB0aGlzLmxvYWRlclByb3BlcnRpZXMgPSB7CiAgICAgIG5hbWU6ICIiLmNvbmNhdCh0aGlzLmxvd2VyY2FzZVR5cGUsICJzIiksCiAgICAgIG5vdW46IF9zdHJpbmdfdXRpbHMuU3RyaW5nVXRpbHMudXBwZXJGaXJzdCh0aGlzLnR5cGUpLAogICAgICBub3VuczogIiIuY29uY2F0KHRoaXMubG93ZXJjYXNlVHlwZSwgInMiKQogICAgfTsKICAgIHRoaXMuc2F2ZWRPYmplY3RzQ2xpZW50ID0gc2F2ZWRPYmplY3RDbGllbnQ7CiAgfQogIC8qKgogICAqIFJldHJpZXZlIGEgc2F2ZWQgb2JqZWN0IGJ5IGlkLiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGNvbXBsZXRlcyB3aGVuIHRoZSBvYmplY3QgZmluaXNoZXMKICAgKiBpbml0aWFsaXppbmcuCiAgICogQHBhcmFtIGlkCiAgICogQHJldHVybnMge1Byb21pc2U8U2F2ZWRPYmplY3Q+fQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFNhdmVkT2JqZWN0TG9hZGVyLCBbewogICAga2V5OiAiZ2V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoaWQpIHsKICAgICAgcmV0dXJuIG5ldyB0aGlzLkNsYXNzKGlkKS5pbml0KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidXJsRm9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cmxGb3IoaWQpIHsKICAgICAgcmV0dXJuIHRoaXMua2JuVXJsLmV2YWwoIiMvIi5jb25jYXQodGhpcy5sb3dlcmNhc2VUeXBlLCAiL3t7aWR9fSIpLCB7CiAgICAgICAgaWQ6IGlkCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImRlbGV0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShpZHMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlkcyA9ICFBcnJheS5pc0FycmF5KGlkcykgPyBbaWRzXSA6IGlkczsKICAgICAgdmFyIGRlbGV0aW9ucyA9IGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7CiAgICAgICAgdmFyIHNhdmVkT2JqZWN0ID0gbmV3IF90aGlzLkNsYXNzKGlkKTsKICAgICAgICByZXR1cm4gc2F2ZWRPYmplY3QuZGVsZXRlKCk7CiAgICAgIH0pOwogICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZGVsZXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAoX3RoaXMuY2hyb21lKSB7CiAgICAgICAgICBfdGhpcy5jaHJvbWUudW50cmFja05hdkxpbmtzRm9yRGVsZXRlZFNhdmVkT2JqZWN0cyhpZHMpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICAvKioKICAgICAqIFVwZGF0ZXMgc291cmNlIHRvIGNvbnRhaW4gYW4gaWQgYW5kIHVybCBmaWVsZCwgYW5kIHJldHVybnMgdGhlIHVwZGF0ZWQKICAgICAqIHNvdXJjZSBvYmplY3QuCiAgICAgKiBAcGFyYW0gc291cmNlCiAgICAgKiBAcGFyYW0gaWQKICAgICAqIEByZXR1cm5zIHtzb3VyY2V9IFRoZSBtb2RpZmllZCBzb3VyY2Ugb2JqZWN0LCB3aXRoIGFuIGlkIGFuZCB1cmwgZmllbGQuCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAibWFwSGl0U291cmNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBtYXBIaXRTb3VyY2Uoc291cmNlLCBpZCkgewogICAgICBzb3VyY2UuaWQgPSBpZDsKICAgICAgc291cmNlLnVybCA9IHRoaXMudXJsRm9yKGlkKTsKICAgICAgcmV0dXJuIHNvdXJjZTsKICAgIH0KICAgIC8qKgogICAgICogVXBkYXRlcyBoaXQuYXR0cmlidXRlcyB0byBjb250YWluIGFuIGlkIGFuZCB1cmwgZmllbGQsIGFuZCByZXR1cm5zIHRoZSB1cGRhdGVkCiAgICAgKiBhdHRyaWJ1dGVzIG9iamVjdC4KICAgICAqIEBwYXJhbSBoaXQKICAgICAqIEByZXR1cm5zIHtoaXQuYXR0cmlidXRlc30gVGhlIG1vZGlmaWVkIGhpdC5hdHRyaWJ1dGVzIG9iamVjdCwgd2l0aCBhbiBpZCBhbmQgdXJsIGZpZWxkLgogICAgICovCgogIH0sIHsKICAgIGtleTogIm1hcFNhdmVkT2JqZWN0QXBpSGl0cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbWFwU2F2ZWRPYmplY3RBcGlIaXRzKGhpdCkgewogICAgICByZXR1cm4gdGhpcy5tYXBIaXRTb3VyY2UoaGl0LmF0dHJpYnV0ZXMsIGhpdC5pZCk7CiAgICB9CiAgICAvKioKICAgICAqIFRPRE86IFJhdGhlciB0aGFuIHVzZSBhIGhhcmRjb2RlZCBsaW1pdCwgaW1wbGVtZW50IHBhZ2luYXRpb24uIFNlZQogICAgICogaHR0cHM6Ly9naXRodWIuY29tL2VsYXN0aWMva2liYW5hL2lzc3Vlcy84MDQ0IGZvciByZWZlcmVuY2UuCiAgICAgKgogICAgICogQHBhcmFtIHNlYXJjaFN0cmluZwogICAgICogQHBhcmFtIHNpemUKICAgICAqIEByZXR1cm5zIHtQcm9taXNlfQogICAgICovCgogIH0sIHsKICAgIGtleTogImZpbmRBbGwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRBbGwoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIHNlYXJjaCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7CiAgICAgIHZhciBzaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxMDA7CiAgICAgIHZhciBmaWVsZHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDsKICAgICAgcmV0dXJuIHRoaXMuc2F2ZWRPYmplY3RzQ2xpZW50LmZpbmQoewogICAgICAgIHR5cGU6IHRoaXMubG93ZXJjYXNlVHlwZSwKICAgICAgICBzZWFyY2g6IHNlYXJjaCA/ICIiLmNvbmNhdChzZWFyY2gsICIqIikgOiB1bmRlZmluZWQsCiAgICAgICAgcGVyUGFnZTogc2l6ZSwKICAgICAgICBwYWdlOiAxLAogICAgICAgIHNlYXJjaEZpZWxkczogWyd0aXRsZV4zJywgJ2Rlc2NyaXB0aW9uJ10sCiAgICAgICAgZGVmYXVsdFNlYXJjaE9wZXJhdG9yOiAnQU5EJywKICAgICAgICBmaWVsZHM6IGZpZWxkcwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHRvdGFsOiByZXNwLnRvdGFsLAogICAgICAgICAgaGl0czogcmVzcC5zYXZlZE9iamVjdHMubWFwKGZ1bmN0aW9uIChzYXZlZE9iamVjdCkgewogICAgICAgICAgICByZXR1cm4gX3RoaXMyLm1hcFNhdmVkT2JqZWN0QXBpSGl0cyhzYXZlZE9iamVjdCk7CiAgICAgICAgICB9KQogICAgICAgIH07CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmQoKSB7CiAgICAgIHZhciBzZWFyY2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnOwogICAgICB2YXIgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTAwOwogICAgICByZXR1cm4gdGhpcy5maW5kQWxsKHNlYXJjaCwgc2l6ZSkudGhlbihmdW5jdGlvbiAocmVzcCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0b3RhbDogcmVzcC50b3RhbCwKICAgICAgICAgIGhpdHM6IHJlc3AuaGl0cy5maWx0ZXIoZnVuY3Rpb24gKHNhdmVkT2JqZWN0KSB7CiAgICAgICAgICAgIHJldHVybiAhc2F2ZWRPYmplY3QuZXJyb3I7CiAgICAgICAgICB9KQogICAgICAgIH07CiAgICAgIH0pOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNhdmVkT2JqZWN0TG9hZGVyOwp9KCk7CgpleHBvcnRzLlNhdmVkT2JqZWN0TG9hZGVyID0gU2F2ZWRPYmplY3RMb2FkZXI7"},null]}