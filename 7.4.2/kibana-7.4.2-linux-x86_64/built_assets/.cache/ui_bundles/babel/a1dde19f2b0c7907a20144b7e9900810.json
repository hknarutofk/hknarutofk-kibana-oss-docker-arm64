{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/agg_types/buckets/terms.js","dependencies":[{"path":"src/legacy/ui/public/agg_types/buckets/terms.js","mtime":1572296412196},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnRlcm1zQnVja2V0QWdnID0gdm9pZCAwOwoKdmFyIF9jaHJvbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoInVpL2Nocm9tZSIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF9idWNrZXRfYWdnX3R5cGUgPSByZXF1aXJlKCIuL19idWNrZXRfYWdnX3R5cGUiKTsKCnZhciBfYWdnX2NvbmZpZyA9IHJlcXVpcmUoIi4uLy4uL3Zpcy9hZ2dfY29uZmlnIik7Cgp2YXIgX3NjaGVtYXMgPSByZXF1aXJlKCIuLi8uLi92aXMvZWRpdG9ycy9kZWZhdWx0L3NjaGVtYXMiKTsKCnZhciBfY291cmllcl9pbnNwZWN0b3JfdXRpbHMgPSByZXF1aXJlKCIuLi8uLi9jb3VyaWVyL3V0aWxzL2NvdXJpZXJfaW5zcGVjdG9yX3V0aWxzIik7Cgp2YXIgX3Rlcm1zID0gcmVxdWlyZSgiLi9jcmVhdGVfZmlsdGVyL3Rlcm1zIik7Cgp2YXIgX2lubGluZV9jb21wX3dyYXBwZXIgPSByZXF1aXJlKCIuL19pbmxpbmVfY29tcF93cmFwcGVyIik7Cgp2YXIgX3Rlcm1zX290aGVyX2J1Y2tldF9oZWxwZXIgPSByZXF1aXJlKCIuL190ZXJtc19vdGhlcl9idWNrZXRfaGVscGVyIik7Cgp2YXIgX21pZ3JhdGVfaW5jbHVkZV9leGNsdWRlX2Zvcm1hdCA9IHJlcXVpcmUoIi4vbWlncmF0ZV9pbmNsdWRlX2V4Y2x1ZGVfZm9ybWF0Iik7Cgp2YXIgX29yZGVyX2FnZyA9IHJlcXVpcmUoIi4uL2NvbnRyb2xzL29yZGVyX2FnZyIpOwoKdmFyIF9vcmRlciA9IHJlcXVpcmUoIi4uL2NvbnRyb2xzL29yZGVyIik7Cgp2YXIgX29yZGVyX2J5ID0gcmVxdWlyZSgiLi4vY29udHJvbHMvb3JkZXJfYnkiKTsKCnZhciBfc2l6ZSA9IHJlcXVpcmUoIi4uL2NvbnRyb2xzL3NpemUiKTsKCnZhciBfbWlzc2luZ19idWNrZXQgPSByZXF1aXJlKCIuLi9jb250cm9scy9taXNzaW5nX2J1Y2tldCIpOwoKdmFyIF9vdGhlcl9idWNrZXQgPSByZXF1aXJlKCIuLi9jb250cm9scy9vdGhlcl9idWNrZXQiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKdmFyIG9yZGVyQWdnU2NoZW1hID0gbmV3IF9zY2hlbWFzLlNjaGVtYXMoW3sKICBncm91cDogJ25vbmUnLAogIG5hbWU6ICdvcmRlckFnZycsCiAgLy8gVGhpcyBzdHJpbmcgaXMgbmV2ZXIgdmlzaWJsZSB0byB0aGUgdXNlciBzbyBpdCBkb2Vzbid0IG5lZWQgdG8gYmUgdHJhbnNsYXRlZAogIHRpdGxlOiAnT3JkZXIgQWdnJywKICBoaWRlQ3VzdG9tTGFiZWw6IHRydWUsCiAgYWdnRmlsdGVyOiBfb3JkZXJfYnkuYWdnRmlsdGVyCn1dKS5hbGxbMF07CnZhciB0ZXJtc0J1Y2tldEFnZyA9IG5ldyBfYnVja2V0X2FnZ190eXBlLkJ1Y2tldEFnZ1R5cGUoewogIG5hbWU6ICd0ZXJtcycsCiAgdGl0bGU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdjb21tb24udWkuYWdnVHlwZXMuYnVja2V0cy50ZXJtc1RpdGxlJywgewogICAgZGVmYXVsdE1lc3NhZ2U6ICdUZXJtcycKICB9KSwKICBtYWtlTGFiZWw6IGZ1bmN0aW9uIG1ha2VMYWJlbChhZ2cpIHsKICAgIHZhciBwYXJhbXMgPSBhZ2cucGFyYW1zOwogICAgcmV0dXJuIGFnZy5nZXRGaWVsZERpc3BsYXlOYW1lKCkgKyAnOiAnICsgcGFyYW1zLm9yZGVyLnRleHQ7CiAgfSwKICBnZXRGb3JtYXQ6IGZ1bmN0aW9uIGdldEZvcm1hdChidWNrZXQpIHsKICAgIHJldHVybiB7CiAgICAgIGdldENvbnZlcnRlckZvcjogZnVuY3Rpb24gZ2V0Q29udmVydGVyRm9yKHR5cGUpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgaWYgKHZhbCA9PT0gJ19fb3RoZXJfXycpIHsKICAgICAgICAgICAgcmV0dXJuIGJ1Y2tldC5wYXJhbXMub3RoZXJCdWNrZXRMYWJlbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodmFsID09PSAnX19taXNzaW5nX18nKSB7CiAgICAgICAgICAgIHJldHVybiBidWNrZXQucGFyYW1zLm1pc3NpbmdCdWNrZXRMYWJlbDsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcGFyc2VkVXJsID0gewogICAgICAgICAgICBvcmlnaW46IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sCiAgICAgICAgICAgIHBhdGhuYW1lOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsCiAgICAgICAgICAgIGJhc2VQYXRoOiBfY2hyb21lLmRlZmF1bHQuZ2V0QmFzZVBhdGgoKQogICAgICAgICAgfTsKICAgICAgICAgIHZhciBjb252ZXJ0ZXIgPSBidWNrZXQucGFyYW1zLmZpZWxkLmZvcm1hdC5nZXRDb252ZXJ0ZXJGb3IodHlwZSk7CiAgICAgICAgICByZXR1cm4gY29udmVydGVyKHZhbCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHBhcnNlZFVybCk7CiAgICAgICAgfTsKICAgICAgfQogICAgfTsKICB9LAogIGNyZWF0ZUZpbHRlcjogX3Rlcm1zLmNyZWF0ZUZpbHRlclRlcm1zLAogIHBvc3RGbGlnaHRSZXF1ZXN0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3Bvc3RGbGlnaHRSZXF1ZXN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlc3AsIGFnZ0NvbmZpZ3MsIGFnZ0NvbmZpZywgc2VhcmNoU291cmNlLCBpbnNwZWN0b3JBZGFwdGVycywgYWJvcnRTaWduYWwpIHsKICAgICAgdmFyIG5lc3RlZFNlYXJjaFNvdXJjZSwgZmlsdGVyQWdnLCByZXF1ZXN0LCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmIChyZXNwLmFnZ3JlZ2F0aW9ucykgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3ApOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIG5lc3RlZFNlYXJjaFNvdXJjZSA9IHNlYXJjaFNvdXJjZS5jcmVhdGVDaGlsZCgpOwoKICAgICAgICAgICAgICBpZiAoIWFnZ0NvbmZpZy5wYXJhbXMub3RoZXJCdWNrZXQpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgZmlsdGVyQWdnID0gKDAsIF90ZXJtc19vdGhlcl9idWNrZXRfaGVscGVyLmJ1aWxkT3RoZXJCdWNrZXRBZ2cpKGFnZ0NvbmZpZ3MsIGFnZ0NvbmZpZywgcmVzcCk7CgogICAgICAgICAgICAgIGlmIChmaWx0ZXJBZ2cpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXNwKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBpZiAoYWJvcnRTaWduYWwpIHsKICAgICAgICAgICAgICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gbmVzdGVkU2VhcmNoU291cmNlLmNhbmNlbFF1ZXVlZCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBuZXN0ZWRTZWFyY2hTb3VyY2Uuc2V0RmllbGQoJ2FnZ3MnLCBmaWx0ZXJBZ2cpOwogICAgICAgICAgICAgIHJlcXVlc3QgPSBpbnNwZWN0b3JBZGFwdGVycy5yZXF1ZXN0cy5zdGFydChfaTE4bi5pMThuLnRyYW5zbGF0ZSgnY29tbW9uLnVpLmFnZ1R5cGVzLmJ1Y2tldHMudGVybXMub3RoZXJCdWNrZXRUaXRsZScsIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnT3RoZXIgYnVja2V0JwogICAgICAgICAgICAgIH0pLCB7CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2NvbW1vbi51aS5hZ2dUeXBlcy5idWNrZXRzLnRlcm1zLm90aGVyQnVja2V0RGVzY3JpcHRpb24nLCB7CiAgICAgICAgICAgICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnVGhpcyByZXF1ZXN0IGNvdW50cyB0aGUgbnVtYmVyIG9mIGRvY3VtZW50cyB0aGF0IGZhbGwgJyArICdvdXRzaWRlIHRoZSBjcml0ZXJpb24gb2YgdGhlIGRhdGEgYnVja2V0cy4nCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIG5lc3RlZFNlYXJjaFNvdXJjZS5nZXRTZWFyY2hSZXF1ZXN0Qm9keSgpLnRoZW4oZnVuY3Rpb24gKGJvZHkpIHsKICAgICAgICAgICAgICAgIHJlcXVlc3QuanNvbihib2R5KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICByZXF1ZXN0LnN0YXRzKCgwLCBfY291cmllcl9pbnNwZWN0b3JfdXRpbHMuZ2V0UmVxdWVzdEluc3BlY3RvclN0YXRzKShuZXN0ZWRTZWFyY2hTb3VyY2UpKTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgcmV0dXJuIG5lc3RlZFNlYXJjaFNvdXJjZS5mZXRjaCgpOwoKICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgcmVxdWVzdC5zdGF0cygoMCwgX2NvdXJpZXJfaW5zcGVjdG9yX3V0aWxzLmdldFJlc3BvbnNlSW5zcGVjdG9yU3RhdHMpKG5lc3RlZFNlYXJjaFNvdXJjZSwgcmVzcG9uc2UpKS5vayh7CiAgICAgICAgICAgICAgICBqc29uOiByZXNwb25zZQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHJlc3AgPSAoMCwgX3Rlcm1zX290aGVyX2J1Y2tldF9oZWxwZXIubWVyZ2VPdGhlckJ1Y2tldEFnZ1Jlc3BvbnNlKShhZ2dDb25maWdzLCByZXNwLCByZXNwb25zZSwgYWdnQ29uZmlnLCBmaWx0ZXJBZ2coKSk7CgogICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIGlmIChhZ2dDb25maWcucGFyYW1zLm1pc3NpbmdCdWNrZXQpIHsKICAgICAgICAgICAgICAgIHJlc3AgPSAoMCwgX3Rlcm1zX290aGVyX2J1Y2tldF9oZWxwZXIudXBkYXRlTWlzc2luZ0J1Y2tldCkocmVzcCwgYWdnQ29uZmlncywgYWdnQ29uZmlnKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHJlc3ApOwoKICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gcG9zdEZsaWdodFJlcXVlc3QoX3gsIF94MiwgX3gzLCBfeDQsIF94NSwgX3g2KSB7CiAgICAgIHJldHVybiBfcG9zdEZsaWdodFJlcXVlc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gcG9zdEZsaWdodFJlcXVlc3Q7CiAgfSgpLAogIHBhcmFtczogW3sKICAgIG5hbWU6ICdmaWVsZCcsCiAgICB0eXBlOiAnZmllbGQnLAogICAgZmlsdGVyRmllbGRUeXBlczogWydudW1iZXInLCAnYm9vbGVhbicsICdkYXRlJywgJ2lwJywgJ3N0cmluZyddCiAgfSwgewogICAgbmFtZTogJ29yZGVyQnknLAogICAgZWRpdG9yQ29tcG9uZW50OiBfb3JkZXJfYnkuT3JkZXJCeVBhcmFtRWRpdG9yLAogICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30gLy8gcHJldmVudCBkZWZhdWx0IHdyaXRlLCBpdCdzIGhhbmRsZWQgYnkgb3JkZXJBZ2cKCiAgfSwgewogICAgbmFtZTogJ29yZGVyQWdnJywKICAgIHR5cGU6IF9hZ2dfY29uZmlnLkFnZ0NvbmZpZywKICAgIGRlZmF1bHQ6IG51bGwsCiAgICBlZGl0b3JDb21wb25lbnQ6IF9vcmRlcl9hZ2cuT3JkZXJBZ2dQYXJhbUVkaXRvciwKICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24gc2VyaWFsaXplKG9yZGVyQWdnKSB7CiAgICAgIHJldHVybiBvcmRlckFnZy50b0pTT04oKTsKICAgIH0sCiAgICBkZXNlcmlhbGl6ZTogZnVuY3Rpb24gZGVzZXJpYWxpemUoc3RhdGUsIGFnZykgewogICAgICByZXR1cm4gdGhpcy5tYWtlT3JkZXJBZ2coYWdnLCBzdGF0ZSk7CiAgICB9LAogICAgbWFrZU9yZGVyQWdnOiBmdW5jdGlvbiBtYWtlT3JkZXJBZ2codGVybXNBZ2csIHN0YXRlKSB7CiAgICAgIHN0YXRlID0gc3RhdGUgfHwge307CiAgICAgIHN0YXRlLnNjaGVtYSA9IG9yZGVyQWdnU2NoZW1hOwogICAgICB2YXIgb3JkZXJBZ2cgPSB0ZXJtc0FnZy5hZ2dDb25maWdzLmNyZWF0ZUFnZ0NvbmZpZyhzdGF0ZSwgewogICAgICAgIGFkZFRvQWdnQ29uZmlnczogZmFsc2UKICAgICAgfSk7CiAgICAgIG9yZGVyQWdnLmlkID0gdGVybXNBZ2cuaWQgKyAnLW9yZGVyQWdnJzsKICAgICAgcmV0dXJuIG9yZGVyQWdnOwogICAgfSwKICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShhZ2csIG91dHB1dCwgYWdncykgewogICAgICB2YXIgZGlyID0gYWdnLnBhcmFtcy5vcmRlci52YWx1ZTsKICAgICAgdmFyIG9yZGVyID0gb3V0cHV0LnBhcmFtcy5vcmRlciA9IHt9OwogICAgICB2YXIgb3JkZXJBZ2cgPSBhZ2cucGFyYW1zLm9yZGVyQWdnIHx8IGFnZ3MuZ2V0UmVzcG9uc2VBZ2dCeUlkKGFnZy5wYXJhbXMub3JkZXJCeSk7IC8vIFRPRE86IFRoaXMgd29ya3MgYXJvdW5kIGFuIEVsYXN0aWNzZWFyY2ggYnVnIHRoZSBhbHdheXMgY2FzdHMgdGVybXMgYWdnIHNjcmlwdHMgdG8gc3RyaW5ncwogICAgICAvLyB0aHVzIGNhdXNpbmcgaXNzdWVzIHdpdGggZmlsdGVyaW5nLiBUaGlzIHByb2JhYmx5IGNhdXNlcyBvdGhlciBpc3N1ZXMgc2luY2UgZmxvYXQgbWlnaHQgbm90CiAgICAgIC8vIGJlIGFibGUgdG8gY29udGFpbiB0aGUgbnVtYmVyIG9uIHRoZSBlbGFzdGljc2VhcmNoIHNpZGUKCiAgICAgIGlmIChvdXRwdXQucGFyYW1zLnNjcmlwdCkgewogICAgICAgIG91dHB1dC5wYXJhbXMudmFsdWVfdHlwZSA9IGFnZy5nZXRGaWVsZCgpLnR5cGUgPT09ICdudW1iZXInID8gJ2Zsb2F0JyA6IGFnZy5nZXRGaWVsZCgpLnR5cGU7CiAgICAgIH0KCiAgICAgIGlmIChhZ2cucGFyYW1zLm1pc3NpbmdCdWNrZXQgJiYgYWdnLnBhcmFtcy5maWVsZC50eXBlID09PSAnc3RyaW5nJykgewogICAgICAgIG91dHB1dC5wYXJhbXMubWlzc2luZyA9ICdfX21pc3NpbmdfXyc7CiAgICAgIH0KCiAgICAgIGlmICghb3JkZXJBZ2cpIHsKICAgICAgICBvcmRlclthZ2cucGFyYW1zLm9yZGVyQnkgfHwgJ19jb3VudCddID0gZGlyOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKG9yZGVyQWdnLnR5cGUubmFtZSA9PT0gJ2NvdW50JykgewogICAgICAgIG9yZGVyLl9jb3VudCA9IGRpcjsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBvcmRlckFnZ0lkID0gb3JkZXJBZ2cuaWQ7CgogICAgICBpZiAob3JkZXJBZ2cucGFyZW50SWQpIHsKICAgICAgICBvcmRlckFnZyA9IGFnZ3MuYnlJZFtvcmRlckFnZy5wYXJlbnRJZF07CiAgICAgIH0KCiAgICAgIG91dHB1dC5zdWJBZ2dzID0gKG91dHB1dC5zdWJBZ2dzIHx8IFtdKS5jb25jYXQob3JkZXJBZ2cpOwogICAgICBvcmRlcltvcmRlckFnZ0lkXSA9IGRpcjsKICAgIH0KICB9LCB7CiAgICBuYW1lOiAnb3JkZXInLAogICAgdHlwZTogJ29wdGlvbmVkJywKICAgIGRlZmF1bHQ6ICdkZXNjJywKICAgIGVkaXRvckNvbXBvbmVudDogKDAsIF9pbmxpbmVfY29tcF93cmFwcGVyLndyYXBXaXRoSW5saW5lQ29tcCkoX29yZGVyLk9yZGVyUGFyYW1FZGl0b3IpLAogICAgb3B0aW9uczogW3sKICAgICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2NvbW1vbi51aS5hZ2dUeXBlcy5idWNrZXRzLnRlcm1zLm9yZGVyRGVzY2VuZGluZ1RpdGxlJywgewogICAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRGVzY2VuZGluZycKICAgICAgfSksCiAgICAgIHZhbHVlOiAnZGVzYycKICAgIH0sIHsKICAgICAgdGV4dDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2NvbW1vbi51aS5hZ2dUeXBlcy5idWNrZXRzLnRlcm1zLm9yZGVyQXNjZW5kaW5nVGl0bGUnLCB7CiAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBc2NlbmRpbmcnCiAgICAgIH0pLAogICAgICB2YWx1ZTogJ2FzYycKICAgIH1dLAogICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30gLy8gcHJldmVudCBkZWZhdWx0IHdyaXRlLCBpdCdzIGhhbmRsZWQgYnkgb3JkZXJBZ2cKCiAgfSwgewogICAgbmFtZTogJ3NpemUnLAogICAgZWRpdG9yQ29tcG9uZW50OiAoMCwgX2lubGluZV9jb21wX3dyYXBwZXIud3JhcFdpdGhJbmxpbmVDb21wKShfc2l6ZS5TaXplUGFyYW1FZGl0b3IpLAogICAgZGVmYXVsdDogNQogIH0sIHsKICAgIG5hbWU6ICdvdGhlckJ1Y2tldCcsCiAgICBkZWZhdWx0OiBmYWxzZSwKICAgIGVkaXRvckNvbXBvbmVudDogX290aGVyX2J1Y2tldC5PdGhlckJ1Y2tldFBhcmFtRWRpdG9yLAogICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30KICB9LCB7CiAgICBuYW1lOiAnb3RoZXJCdWNrZXRMYWJlbCcsCiAgICB0eXBlOiAnc3RyaW5nJywKICAgIGRlZmF1bHQ6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdjb21tb24udWkuYWdnVHlwZXMuYnVja2V0cy50ZXJtcy5vdGhlckJ1Y2tldExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ090aGVyJwogICAgfSksCiAgICBkaXNwbGF5TmFtZTogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2NvbW1vbi51aS5hZ2dUeXBlcy5vdGhlckJ1Y2tldC5sYWJlbEZvck90aGVyQnVja2V0TGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnTGFiZWwgZm9yIG90aGVyIGJ1Y2tldCcKICAgIH0pLAogICAgc2hvdWxkU2hvdzogZnVuY3Rpb24gc2hvdWxkU2hvdyhhZ2cpIHsKICAgICAgcmV0dXJuIGFnZy5wYXJhbXMub3RoZXJCdWNrZXQ7CiAgICB9LAogICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30KICB9LCB7CiAgICBuYW1lOiAnbWlzc2luZ0J1Y2tldCcsCiAgICBkZWZhdWx0OiBmYWxzZSwKICAgIGVkaXRvckNvbXBvbmVudDogX21pc3NpbmdfYnVja2V0Lk1pc3NpbmdCdWNrZXRQYXJhbUVkaXRvciwKICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9CiAgfSwgewogICAgbmFtZTogJ21pc3NpbmdCdWNrZXRMYWJlbCcsCiAgICBkZWZhdWx0OiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnY29tbW9uLnVpLmFnZ1R5cGVzLmJ1Y2tldHMudGVybXMubWlzc2luZ0J1Y2tldExhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ01pc3NpbmcnLAogICAgICBkZXNjcmlwdGlvbjogIkRlZmF1bHQgbGFiZWwgdXNlZCBpbiBjaGFydHMgd2hlbiBkb2N1bWVudHMgYXJlIG1pc3NpbmcgYSBmaWVsZC5cbiAgICAgICAgICBWaXNpYmxlIHdoZW4geW91IGNyZWF0ZSBhIGNoYXJ0IHdpdGggYSB0ZXJtcyBhZ2dyZWdhdGlvbiBhbmQgZW5hYmxlIFwiU2hvdyBtaXNzaW5nIHZhbHVlc1wiIgogICAgfSksCiAgICB0eXBlOiAnc3RyaW5nJywKICAgIGRpc3BsYXlOYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnY29tbW9uLnVpLmFnZ1R5cGVzLm90aGVyQnVja2V0LmxhYmVsRm9yTWlzc2luZ1ZhbHVlc0xhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0xhYmVsIGZvciBtaXNzaW5nIHZhbHVlcycKICAgIH0pLAogICAgc2hvdWxkU2hvdzogZnVuY3Rpb24gc2hvdWxkU2hvdyhhZ2cpIHsKICAgICAgcmV0dXJuIGFnZy5wYXJhbXMubWlzc2luZ0J1Y2tldDsKICAgIH0sCiAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fQogIH0sIF9vYmplY3RTcHJlYWQoewogICAgbmFtZTogJ2V4Y2x1ZGUnLAogICAgZGlzcGxheU5hbWU6IF9pMThuLmkxOG4udHJhbnNsYXRlKCdjb21tb24udWkuYWdnVHlwZXMuYnVja2V0cy50ZXJtcy5leGNsdWRlTGFiZWwnLCB7CiAgICAgIGRlZmF1bHRNZXNzYWdlOiAnRXhjbHVkZScKICAgIH0pLAogICAgdHlwZTogJ3N0cmluZycsCiAgICBhZHZhbmNlZDogdHJ1ZSwKICAgIHNob3VsZFNob3c6IF9taWdyYXRlX2luY2x1ZGVfZXhjbHVkZV9mb3JtYXQuaXNTdHJpbmdUeXBlCiAgfSwgX21pZ3JhdGVfaW5jbHVkZV9leGNsdWRlX2Zvcm1hdC5taWdyYXRlSW5jbHVkZUV4Y2x1ZGVGb3JtYXQpLCBfb2JqZWN0U3ByZWFkKHsKICAgIG5hbWU6ICdpbmNsdWRlJywKICAgIGRpc3BsYXlOYW1lOiBfaTE4bi5pMThuLnRyYW5zbGF0ZSgnY29tbW9uLnVpLmFnZ1R5cGVzLmJ1Y2tldHMudGVybXMuaW5jbHVkZUxhYmVsJywgewogICAgICBkZWZhdWx0TWVzc2FnZTogJ0luY2x1ZGUnCiAgICB9KSwKICAgIHR5cGU6ICdzdHJpbmcnLAogICAgYWR2YW5jZWQ6IHRydWUsCiAgICBzaG91bGRTaG93OiBfbWlncmF0ZV9pbmNsdWRlX2V4Y2x1ZGVfZm9ybWF0LmlzU3RyaW5nVHlwZQogIH0sIF9taWdyYXRlX2luY2x1ZGVfZXhjbHVkZV9mb3JtYXQubWlncmF0ZUluY2x1ZGVFeGNsdWRlRm9ybWF0KV0KfSk7CmV4cG9ydHMudGVybXNCdWNrZXRBZ2cgPSB0ZXJtc0J1Y2tldEFnZzs="},null]}