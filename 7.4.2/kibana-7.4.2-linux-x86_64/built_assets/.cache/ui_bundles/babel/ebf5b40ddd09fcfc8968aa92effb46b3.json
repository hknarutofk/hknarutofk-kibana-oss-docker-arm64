{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/core_plugins/kibana/public/management/sections/index_patterns/create_index_pattern_wizard/create_index_pattern_wizard.js","dependencies":[{"path":"src/legacy/core_plugins/kibana/public/management/sections/index_patterns/create_index_pattern_wizard/create_index_pattern_wizard.js","mtime":1572296410512},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkNyZWF0ZUluZGV4UGF0dGVybldpemFyZCA9IHZvaWQgMDsKCnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyZWFjdCIpKTsKCnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJwcm9wLXR5cGVzIikpOwoKdmFyIF9ldWkgPSByZXF1aXJlKCJAZWxhc3RpYy9ldWkiKTsKCnZhciBfcmVhY3QyID0gcmVxdWlyZSgiQGtibi9pMThuL3JlYWN0Iik7Cgp2YXIgX3N0ZXBfaW5kZXhfcGF0dGVybiA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9zdGVwX2luZGV4X3BhdHRlcm4iKTsKCnZhciBfc3RlcF90aW1lX2ZpZWxkID0gcmVxdWlyZSgiLi9jb21wb25lbnRzL3N0ZXBfdGltZV9maWVsZCIpOwoKdmFyIF9oZWFkZXIgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvaGVhZGVyIik7Cgp2YXIgX2xvYWRpbmdfc3RhdGUgPSByZXF1aXJlKCIuL2NvbXBvbmVudHMvbG9hZGluZ19zdGF0ZSIpOwoKdmFyIF9lbXB0eV9zdGF0ZSA9IHJlcXVpcmUoIi4vY29tcG9uZW50cy9lbXB0eV9zdGF0ZSIpOwoKdmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCIuL2NvbnN0YW50cyIpOwoKdmFyIF9saWIgPSByZXF1aXJlKCIuL2xpYiIpOwoKdmFyIF9pMThuID0gcmVxdWlyZSgiQGtibi9pMThuIik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KCnZhciBDcmVhdGVJbmRleFBhdHRlcm5XaXphcmQgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKENyZWF0ZUluZGV4UGF0dGVybldpemFyZCwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIENyZWF0ZUluZGV4UGF0dGVybldpemFyZChwcm9wcykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDcmVhdGVJbmRleFBhdHRlcm5XaXphcmQpOwoKICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKENyZWF0ZUluZGV4UGF0dGVybldpemFyZCkuY2FsbCh0aGlzLCBwcm9wcykpOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImNhdGNoQW5kV2FybiIsCiAgICAvKiNfX1BVUkVfXyovCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShhc3luY0ZuLCBlcnJvclZhbHVlLCBlcnJvck1zZykgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAwOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gYXN5bmNGbjsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQuc2VudCk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA2OwogICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgwKTsKCiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgdG9hc3RzOiBwcmV2U3RhdGUudG9hc3RzLmNvbmNhdChbewogICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVycm9yTXNnLAogICAgICAgICAgICAgICAgICAgICAgaWQ6IGVycm9yTXNnLnByb3BzLmlkLAogICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICd3YXJuaW5nJywKICAgICAgICAgICAgICAgICAgICAgIGljb25UeXBlOiAnYWxlcnQnCiAgICAgICAgICAgICAgICAgICAgfV0pCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBlcnJvclZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgNl1dKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyLCBfeDMpIHsKICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJmZXRjaERhdGEiLAogICAgLyojX19QVVJFX18qLwogICAgX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHNlcnZpY2VzLCBpbmRpY2VzRmFpbE1zZywgY2x1c3RlcnNGYWlsTXNnOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHNlcnZpY2VzID0gX3RoaXMucHJvcHMuc2VydmljZXM7CgogICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsKICAgICAgICAgICAgICAgIGFsbEluZGljZXM6IFtdLAogICAgICAgICAgICAgICAgaXNJbml0aWFsbHlMb2FkaW5nSW5kaWNlczogdHJ1ZSwKICAgICAgICAgICAgICAgIHJlbW90ZUNsdXN0ZXJzRXhpc3Q6IGZhbHNlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGluZGljZXNGYWlsTXNnID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgICAgICAgIGlkOiAia2JuLm1hbmFnZW1lbnQuY3JlYXRlSW5kZXhQYXR0ZXJuLmxvYWRJbmRpY2VzRmFpbE1zZyIsCiAgICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogIkZhaWxlZCB0byBsb2FkIGluZGljZXMiCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY2x1c3RlcnNGYWlsTXNnID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3QyLkZvcm1hdHRlZE1lc3NhZ2UsIHsKICAgICAgICAgICAgICAgIGlkOiAia2JuLm1hbmFnZW1lbnQuY3JlYXRlSW5kZXhQYXR0ZXJuLmxvYWRDbHVzdGVyc0ZhaWxNc2ciLAogICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICJGYWlsZWQgdG8gbG9hZCByZW1vdGUgY2x1c3RlcnMiCiAgICAgICAgICAgICAgfSk7IC8vIHF1ZXJ5IGxvY2FsIGFuZCByZW1vdGUgaW5kaWNlcywgdXBkYXRpbmcgc3RhdGUgaW5kZXBlbmRlbnRseQoKICAgICAgICAgICAgICAoMCwgX2xpYi5lbnN1cmVNaW5pbXVtVGltZSkoX3RoaXMuY2F0Y2hBbmRXYXJuKCgwLCBfbGliLmdldEluZGljZXMpKHNlcnZpY2VzLmVzLCBfdGhpcy5pbmRleFBhdHRlcm5DcmVhdGlvblR5cGUsICIqIiwgX2NvbnN0YW50cy5NQVhfU0VBUkNIX1NJWkUpLCBbXSwgaW5kaWNlc0ZhaWxNc2cpKS50aGVuKGZ1bmN0aW9uIChhbGxJbmRpY2VzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICBhbGxJbmRpY2VzOiBhbGxJbmRpY2VzLAogICAgICAgICAgICAgICAgICBpc0luaXRpYWxseUxvYWRpbmdJbmRpY2VzOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIF90aGlzLmNhdGNoQW5kV2FybiggLy8gaWYgd2UgZ2V0IGFuIGVycm9yIGZyb20gcmVtb3RlIGNsdXN0ZXIgcXVlcnksIHN1cHBseSBmYWxsYmFjayB2YWx1ZSB0aGF0IGFsbG93cyB1c2VyIGVudHJ5LgogICAgICAgICAgICAgIC8vIFsnYSddIGlzIGZhbGxiYWNrIHZhbHVlCiAgICAgICAgICAgICAgKDAsIF9saWIuZ2V0SW5kaWNlcykoc2VydmljZXMuZXMsIF90aGlzLmluZGV4UGF0dGVybkNyZWF0aW9uVHlwZSwgIio6KiIsIDEpLCBbJ2EnXSwgY2x1c3RlcnNGYWlsTXNnKS50aGVuKGZ1bmN0aW9uIChyZW1vdGVJbmRpY2VzKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoewogICAgICAgICAgICAgICAgICByZW1vdGVDbHVzdGVyc0V4aXN0OiAhIXJlbW90ZUluZGljZXMubGVuZ3RoCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiY3JlYXRlSW5kZXhQYXR0ZXJuIiwKICAgIC8qI19fUFVSRV9fKi8KICAgIGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTModGltZUZpZWxkTmFtZSwgaW5kZXhQYXR0ZXJuSWQpIHsKICAgICAgICB2YXIgc2VydmljZXMsIGluZGV4UGF0dGVybiwgZW1wdHlQYXR0ZXJuLCBjcmVhdGVkSWQsIGNvbmZpcm1NZXNzYWdlOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzZXJ2aWNlcyA9IF90aGlzLnByb3BzLnNlcnZpY2VzOwogICAgICAgICAgICAgICAgaW5kZXhQYXR0ZXJuID0gX3RoaXMuc3RhdGUuaW5kZXhQYXR0ZXJuOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VzLmluZGV4UGF0dGVybnMuZ2V0KCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGVtcHR5UGF0dGVybiA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlbXB0eVBhdHRlcm4sIF9vYmplY3RTcHJlYWQoewogICAgICAgICAgICAgICAgICBpZDogaW5kZXhQYXR0ZXJuSWQsCiAgICAgICAgICAgICAgICAgIHRpdGxlOiBpbmRleFBhdHRlcm4sCiAgICAgICAgICAgICAgICAgIHRpbWVGaWVsZE5hbWU6IHRpbWVGaWVsZE5hbWUKICAgICAgICAgICAgICAgIH0sIF90aGlzLmluZGV4UGF0dGVybkNyZWF0aW9uVHlwZS5nZXRJbmRleFBhdHRlcm5NYXBwaW5ncygpKSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlQYXR0ZXJuLmNyZWF0ZSgpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBjcmVhdGVkSWQgPSBfY29udGV4dDMuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZElkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbmZpcm1NZXNzYWdlID0gX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2tibi5tYW5hZ2VtZW50LmluZGV4UGF0dGVybi50aXRsZUV4aXN0c0xhYmVsJywgewogICAgICAgICAgICAgICAgICB2YWx1ZXM6IHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogX3RoaXMudGl0bGUKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZGVmYXVsdE1lc3NhZ2U6ICdBbiBpbmRleCBwYXR0ZXJuIHdpdGggdGhlIHRpdGxlIFwne3RpdGxlfVwnIGFscmVhZHkgZXhpc3RzLicKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZXMuY29uZmlybU1vZGFsUHJvbWlzZShjb25maXJtTWVzc2FnZSwgewogICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ0dvIHRvIGV4aXN0aW5nIHBhdHRlcm4nCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBzZXJ2aWNlcy5jaGFuZ2VVcmwoIi9tYW5hZ2VtZW50L2tpYmFuYS9pbmRleF9wYXR0ZXJucy8iLmNvbmNhdChpbmRleFBhdHRlcm5JZCkpKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTc7CiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oMTEpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIGZhbHNlKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlcy5jb25maWcuZ2V0KCdkZWZhdWx0SW5kZXgnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDIzOwogICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VzLmNvbmZpZy5zZXQoJ2RlZmF1bHRJbmRleCcsIGNyZWF0ZWRJZCk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgICBzZXJ2aWNlcy5pbmRleFBhdHRlcm5zLmNsZWFyQ2FjaGUoY3JlYXRlZElkKTsKICAgICAgICAgICAgICAgIHNlcnZpY2VzLmNoYW5nZVVybCgiL21hbmFnZW1lbnQva2liYW5hL2luZGV4X3BhdHRlcm5zLyIuY29uY2F0KGNyZWF0ZWRJZCkpOwoKICAgICAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzExLCAxN11dKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDQsIF94NSkgewogICAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJnb1RvVGltZUZpZWxkU3RlcCIsIGZ1bmN0aW9uIChpbmRleFBhdHRlcm4pIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHN0ZXA6IDIsCiAgICAgICAgaW5kZXhQYXR0ZXJuOiBpbmRleFBhdHRlcm4KICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJnb1RvSW5kZXhQYXR0ZXJuU3RlcCIsIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuc2V0U3RhdGUoewogICAgICAgIHN0ZXA6IDEKICAgICAgfSk7CiAgICB9KTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvbkNoYW5nZUluY2x1ZGluZ1N5c3RlbUluZGljZXMiLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBpc0luY2x1ZGluZ1N5c3RlbUluZGljZXM6ICFzdGF0ZS5pc0luY2x1ZGluZ1N5c3RlbUluZGljZXMKICAgICAgICB9OwogICAgICB9KTsKICAgIH0pOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgInJlbW92ZVRvYXN0IiwgZnVuY3Rpb24gKHJlbW92ZWRUb2FzdCkgewogICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAocHJldlN0YXRlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHRvYXN0czogcHJldlN0YXRlLnRvYXN0cy5maWx0ZXIoZnVuY3Rpb24gKHRvYXN0KSB7CiAgICAgICAgICAgIHJldHVybiB0b2FzdC5pZCAhPT0gcmVtb3ZlZFRvYXN0LmlkOwogICAgICAgICAgfSkKICAgICAgICB9OwogICAgICB9KTsKICAgIH0pOwoKICAgIF90aGlzLmluZGV4UGF0dGVybkNyZWF0aW9uVHlwZSA9IF90aGlzLnByb3BzLnNlcnZpY2VzLmluZGV4UGF0dGVybkNyZWF0aW9uVHlwZTsKICAgIF90aGlzLnN0YXRlID0gewogICAgICBzdGVwOiAxLAogICAgICBpbmRleFBhdHRlcm46ICcnLAogICAgICBhbGxJbmRpY2VzOiBbXSwKICAgICAgcmVtb3RlQ2x1c3RlcnNFeGlzdDogZmFsc2UsCiAgICAgIGlzSW5pdGlhbGx5TG9hZGluZ0luZGljZXM6IHRydWUsCiAgICAgIGlzSW5jbHVkaW5nU3lzdGVtSW5kaWNlczogZmFsc2UsCiAgICAgIHRvYXN0czogW10KICAgIH07CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ3JlYXRlSW5kZXhQYXR0ZXJuV2l6YXJkLCBbewogICAga2V5OiAiY29tcG9uZW50V2lsbE1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfY29tcG9uZW50V2lsbE1vdW50ID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRoaXMuZmV0Y2hEYXRhKCk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHsKICAgICAgICByZXR1cm4gX2NvbXBvbmVudFdpbGxNb3VudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gY29tcG9uZW50V2lsbE1vdW50OwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVuZGVySGVhZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJIZWFkZXIoKSB7CiAgICAgIHZhciBpc0luY2x1ZGluZ1N5c3RlbUluZGljZXMgPSB0aGlzLnN0YXRlLmlzSW5jbHVkaW5nU3lzdGVtSW5kaWNlczsKICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2hlYWRlci5IZWFkZXIsIHsKICAgICAgICBwcm9tcHQ6IHRoaXMuaW5kZXhQYXR0ZXJuQ3JlYXRpb25UeXBlLnJlbmRlclByb21wdCgpLAogICAgICAgIHNob3dTeXN0ZW1JbmRpY2VzOiB0aGlzLmluZGV4UGF0dGVybkNyZWF0aW9uVHlwZS5nZXRTaG93U3lzdGVtSW5kaWNlcygpLAogICAgICAgIGlzSW5jbHVkaW5nU3lzdGVtSW5kaWNlczogaXNJbmNsdWRpbmdTeXN0ZW1JbmRpY2VzLAogICAgICAgIG9uQ2hhbmdlSW5jbHVkaW5nU3lzdGVtSW5kaWNlczogdGhpcy5vbkNoYW5nZUluY2x1ZGluZ1N5c3RlbUluZGljZXMsCiAgICAgICAgaW5kZXhQYXR0ZXJuTmFtZTogdGhpcy5pbmRleFBhdHRlcm5DcmVhdGlvblR5cGUuZ2V0SW5kZXhQYXR0ZXJuTmFtZSgpLAogICAgICAgIGlzQmV0YTogdGhpcy5pbmRleFBhdHRlcm5DcmVhdGlvblR5cGUuZ2V0SXNCZXRhKCkKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVuZGVyQ29udGVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyQ29udGVudCgpIHsKICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSwKICAgICAgICAgIGFsbEluZGljZXMgPSBfdGhpcyRzdGF0ZS5hbGxJbmRpY2VzLAogICAgICAgICAgaXNJbml0aWFsbHlMb2FkaW5nSW5kaWNlcyA9IF90aGlzJHN0YXRlLmlzSW5pdGlhbGx5TG9hZGluZ0luZGljZXMsCiAgICAgICAgICBpc0luY2x1ZGluZ1N5c3RlbUluZGljZXMgPSBfdGhpcyRzdGF0ZS5pc0luY2x1ZGluZ1N5c3RlbUluZGljZXMsCiAgICAgICAgICBzdGVwID0gX3RoaXMkc3RhdGUuc3RlcCwKICAgICAgICAgIGluZGV4UGF0dGVybiA9IF90aGlzJHN0YXRlLmluZGV4UGF0dGVybiwKICAgICAgICAgIHJlbW90ZUNsdXN0ZXJzRXhpc3QgPSBfdGhpcyRzdGF0ZS5yZW1vdGVDbHVzdGVyc0V4aXN0OwoKICAgICAgaWYgKGlzSW5pdGlhbGx5TG9hZGluZ0luZGljZXMpIHsKICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbG9hZGluZ19zdGF0ZS5Mb2FkaW5nU3RhdGUsIG51bGwpOwogICAgICB9CgogICAgICB2YXIgaGFzRGF0YUluZGljZXMgPSBhbGxJbmRpY2VzLnNvbWUoZnVuY3Rpb24gKF9yZWY0KSB7CiAgICAgICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lOwogICAgICAgIHJldHVybiAhbmFtZS5zdGFydHNXaXRoKCcuJyk7CiAgICAgIH0pOwoKICAgICAgaWYgKCFoYXNEYXRhSW5kaWNlcyAmJiAhaXNJbmNsdWRpbmdTeXN0ZW1JbmRpY2VzICYmICFyZW1vdGVDbHVzdGVyc0V4aXN0KSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2VtcHR5X3N0YXRlLkVtcHR5U3RhdGUsIHsKICAgICAgICAgIG9uUmVmcmVzaDogdGhpcy5mZXRjaERhdGEKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKHN0ZXAgPT09IDEpIHsKICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgICBzZXJ2aWNlcyA9IF90aGlzJHByb3BzLnNlcnZpY2VzLAogICAgICAgICAgICBpbml0aWFsUXVlcnkgPSBfdGhpcyRwcm9wcy5pbml0aWFsUXVlcnk7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0ZXBfaW5kZXhfcGF0dGVybi5TdGVwSW5kZXhQYXR0ZXJuLCB7CiAgICAgICAgICBhbGxJbmRpY2VzOiBhbGxJbmRpY2VzLAogICAgICAgICAgaW5pdGlhbFF1ZXJ5OiBpbmRleFBhdHRlcm4gfHwgaW5pdGlhbFF1ZXJ5LAogICAgICAgICAgaXNJbmNsdWRpbmdTeXN0ZW1JbmRpY2VzOiBpc0luY2x1ZGluZ1N5c3RlbUluZGljZXMsCiAgICAgICAgICBlc1NlcnZpY2U6IHNlcnZpY2VzLmVzLAogICAgICAgICAgc2F2ZWRPYmplY3RzQ2xpZW50OiBzZXJ2aWNlcy5zYXZlZE9iamVjdHNDbGllbnQsCiAgICAgICAgICBpbmRleFBhdHRlcm5DcmVhdGlvblR5cGU6IHRoaXMuaW5kZXhQYXR0ZXJuQ3JlYXRpb25UeXBlLAogICAgICAgICAgZ29Ub05leHRTdGVwOiB0aGlzLmdvVG9UaW1lRmllbGRTdGVwCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChzdGVwID09PSAyKSB7CiAgICAgICAgdmFyIF9zZXJ2aWNlcyA9IHRoaXMucHJvcHMuc2VydmljZXM7CiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3N0ZXBfdGltZV9maWVsZC5TdGVwVGltZUZpZWxkLCB7CiAgICAgICAgICBpbmRleFBhdHRlcm46IGluZGV4UGF0dGVybiwKICAgICAgICAgIGluZGV4UGF0dGVybnNTZXJ2aWNlOiBfc2VydmljZXMuaW5kZXhQYXR0ZXJucywKICAgICAgICAgIGdvVG9QcmV2aW91c1N0ZXA6IHRoaXMuZ29Ub0luZGV4UGF0dGVyblN0ZXAsCiAgICAgICAgICBjcmVhdGVJbmRleFBhdHRlcm46IHRoaXMuY3JlYXRlSW5kZXhQYXR0ZXJuLAogICAgICAgICAgaW5kZXhQYXR0ZXJuQ3JlYXRpb25UeXBlOiB0aGlzLmluZGV4UGF0dGVybkNyZWF0aW9uVHlwZQogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIGhlYWRlciA9IHRoaXMucmVuZGVySGVhZGVyKCk7CiAgICAgIHZhciBjb250ZW50ID0gdGhpcy5yZW5kZXJDb250ZW50KCk7CiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLCBoZWFkZXIsIGNvbnRlbnQpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9ldWkuRXVpR2xvYmFsVG9hc3RMaXN0LCB7CiAgICAgICAgdG9hc3RzOiB0aGlzLnN0YXRlLnRvYXN0cywKICAgICAgICBkaXNtaXNzVG9hc3Q6IHRoaXMucmVtb3ZlVG9hc3QsCiAgICAgICAgdG9hc3RMaWZlVGltZU1zOiA2MDAwCiAgICAgIH0pKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBDcmVhdGVJbmRleFBhdHRlcm5XaXphcmQ7Cn0oX3JlYWN0LkNvbXBvbmVudCk7CgpleHBvcnRzLkNyZWF0ZUluZGV4UGF0dGVybldpemFyZCA9IENyZWF0ZUluZGV4UGF0dGVybldpemFyZDsKCl9kZWZpbmVQcm9wZXJ0eShDcmVhdGVJbmRleFBhdHRlcm5XaXphcmQsICJwcm9wVHlwZXMiLCB7CiAgaW5pdGlhbFF1ZXJ5OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLAogIHNlcnZpY2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoewogICAgZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwKICAgIGluZGV4UGF0dGVybnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwKICAgIHNhdmVkT2JqZWN0c0NsaWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLAogICAgaW5kZXhQYXR0ZXJuQ3JlYXRpb25UeXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsCiAgICBjb25maWc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCwKICAgIGNoYW5nZVVybDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZAogIH0pLmlzUmVxdWlyZWQKfSk7"},null]}