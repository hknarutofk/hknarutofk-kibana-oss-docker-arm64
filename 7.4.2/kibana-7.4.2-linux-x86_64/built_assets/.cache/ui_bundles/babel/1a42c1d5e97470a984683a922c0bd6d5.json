{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/vis/vis_types/vislib_vis_legend.js","dependencies":[{"path":"src/legacy/ui/public/vis/vis_types/vislib_vis_legend.js","mtime":1572296413264},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkNVU1RPTV9MRUdFTkRfVklTX1RZUEVTID0gdm9pZCAwOwoKdmFyIF9sb2Rhc2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoImxvZGFzaCIpKTsKCnZhciBfaTE4biA9IHJlcXVpcmUoIkBrYm4vaTE4biIpOwoKdmFyIF92aXNsaWJfdmlzX2xlZ2VuZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgiLi92aXNsaWJfdmlzX2xlZ2VuZC5odG1sIikpOwoKdmFyIF9kYXRhID0gcmVxdWlyZSgiLi4vLi4vdmlzbGliL2xpYi9kYXRhIik7Cgp2YXIgX21vZHVsZXMgPSByZXF1aXJlKCIuLi8uLi9tb2R1bGVzIik7Cgp2YXIgX3Zpc19maWx0ZXJzID0gcmVxdWlyZSgiLi4vdmlzX2ZpbHRlcnMiKTsKCnZhciBfZXVpID0gcmVxdWlyZSgiQGVsYXN0aWMvZXVpIik7Cgp2YXIgX3V0aWxpdGllcyA9IHJlcXVpcmUoIi4uLy4uL3Zpc3VhbGl6ZS9sb2FkZXIvcGlwZWxpbmVfaGVscGVycy91dGlsaXRpZXMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9Cgp2YXIgQ1VTVE9NX0xFR0VORF9WSVNfVFlQRVMgPSBbJ2hlYXRtYXAnLCAnZ2F1Z2UnXTsKZXhwb3J0cy5DVVNUT01fTEVHRU5EX1ZJU19UWVBFUyA9IENVU1RPTV9MRUdFTkRfVklTX1RZUEVTOwoKX21vZHVsZXMudWlNb2R1bGVzLmdldCgna2liYW5hJykuZGlyZWN0aXZlKCd2aXNsaWJMZWdlbmQnLCBmdW5jdGlvbiAoJHRpbWVvdXQpIHsKICByZXR1cm4gewogICAgcmVzdHJpY3Q6ICdFJywKICAgIHRlbXBsYXRlOiBfdmlzbGliX3Zpc19sZWdlbmQuZGVmYXVsdCwKICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoJHNjb3BlKSB7CiAgICAgICRzY29wZS5sZWdlbmRJZCA9ICgwLCBfZXVpLmh0bWxJZEdlbmVyYXRvcikoKSgnbGVnZW5kJyk7CiAgICAgICRzY29wZS5vcGVuID0gJHNjb3BlLnVpU3RhdGUuZ2V0KCd2aXMubGVnZW5kT3BlbicsIHRydWUpOwogICAgICAkc2NvcGUuJHdhdGNoKCd2aXNEYXRhJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoIWRhdGEpIHJldHVybjsKICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgIH0pOwogICAgICAkc2NvcGUuJHdhdGNoKCdyZWZyZXNoTGVnZW5kJywgZnVuY3Rpb24gKCkgewogICAgICAgIHJlZnJlc2goKTsKICAgICAgfSk7CgogICAgICAkc2NvcGUuaGlnaGxpZ2h0ID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgdmFyIGVsID0gZXZlbnQuY3VycmVudFRhcmdldDsKICAgICAgICB2YXIgaGFuZGxlciA9ICRzY29wZS52aXMudmlzbGliVmlzLmhhbmRsZXI7IC8vdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYSBDaGFydCB3aWxsIHNldCB0aGUgaGlnaGxpZ2h0LWZ1bmN0aW9uIG9uIGl0cyBoYW5kbGVyCgogICAgICAgIGlmICghaGFuZGxlciB8fCB0eXBlb2YgaGFuZGxlci5oaWdobGlnaHQgIT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGhhbmRsZXIuaGlnaGxpZ2h0LmNhbGwoZWwsIGhhbmRsZXIuZWwpOwogICAgICB9OwoKICAgICAgJHNjb3BlLnVuaGlnaGxpZ2h0ID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgdmFyIGVsID0gZXZlbnQuY3VycmVudFRhcmdldDsKICAgICAgICB2YXIgaGFuZGxlciA9ICRzY29wZS52aXMudmlzbGliVmlzLmhhbmRsZXI7IC8vdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYSBDaGFydCB3aWxsIHNldCB0aGUgdW5oaWdobGlnaHQtZnVuY3Rpb24gb24gaXRzIGhhbmRsZXIKCiAgICAgICAgaWYgKCFoYW5kbGVyIHx8IHR5cGVvZiBoYW5kbGVyLnVuSGlnaGxpZ2h0ICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBoYW5kbGVyLnVuSGlnaGxpZ2h0LmNhbGwoZWwsIGhhbmRsZXIuZWwpOwogICAgICB9OwoKICAgICAgJHNjb3BlLnNldENvbG9yID0gZnVuY3Rpb24gKGxhYmVsLCBjb2xvcikgewogICAgICAgIHZhciBjb2xvcnMgPSAkc2NvcGUudWlTdGF0ZS5nZXQoJ3Zpcy5jb2xvcnMnKSB8fCB7fTsKICAgICAgICBpZiAoY29sb3JzW2xhYmVsXSA9PT0gY29sb3IpIGRlbGV0ZSBjb2xvcnNbbGFiZWxdO2Vsc2UgY29sb3JzW2xhYmVsXSA9IGNvbG9yOwogICAgICAgICRzY29wZS51aVN0YXRlLnNldFNpbGVudCgndmlzLmNvbG9ycycsIG51bGwpOwogICAgICAgICRzY29wZS51aVN0YXRlLnNldCgndmlzLmNvbG9ycycsIGNvbG9ycyk7CiAgICAgICAgJHNjb3BlLnVpU3RhdGUuZW1pdCgnY29sb3JDaGFuZ2VkJyk7CiAgICAgICAgcmVmcmVzaCgpOwogICAgICB9OwoKICAgICAgJHNjb3BlLnRvZ2dsZUxlZ2VuZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgYndjQWRkTGVnZW5kID0gJHNjb3BlLnZpcy5wYXJhbXMuYWRkTGVnZW5kOwogICAgICAgIHZhciBid2NMZWdlbmRTdGF0ZURlZmF1bHQgPSBid2NBZGRMZWdlbmQgPT0gbnVsbCA/IHRydWUgOiBid2NBZGRMZWdlbmQ7CiAgICAgICAgJHNjb3BlLm9wZW4gPSAhJHNjb3BlLnVpU3RhdGUuZ2V0KCd2aXMubGVnZW5kT3BlbicsIGJ3Y0xlZ2VuZFN0YXRlRGVmYXVsdCk7IC8vIG9wZW4gc2hvdWxkIGJlIGFwcGxpZWQgb24gdGVtcGxhdGUgYmVmb3JlIHdlIHVwZGF0ZSB1aVN0YXRlCgogICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICRzY29wZS51aVN0YXRlLnNldCgndmlzLmxlZ2VuZE9wZW4nLCAkc2NvcGUub3Blbik7CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICAkc2NvcGUuZmlsdGVyID0gZnVuY3Rpb24gKGxlZ2VuZERhdGEsIG5lZ2F0ZSkgewogICAgICAgICRzY29wZS52aXMuQVBJLmV2ZW50cy5maWx0ZXIoewogICAgICAgICAgZGF0YTogbGVnZW5kRGF0YS52YWx1ZXMsCiAgICAgICAgICBuZWdhdGU6IG5lZ2F0ZQogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgJHNjb3BlLmNhbkZpbHRlciA9IGZ1bmN0aW9uIChsZWdlbmREYXRhKSB7CiAgICAgICAgaWYgKENVU1RPTV9MRUdFTkRfVklTX1RZUEVTLmluY2x1ZGVzKCRzY29wZS52aXMudmlzbGliVmlzLnZpc0NvbmZpZ0FyZ3MudHlwZSkpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHZhciBmaWx0ZXJzID0gKDAsIF92aXNfZmlsdGVycy5jcmVhdGVGaWx0ZXJzRnJvbUV2ZW50KSh7CiAgICAgICAgICBhZ2dDb25maWdzOiAkc2NvcGUudGFibGVBZ2dzLAogICAgICAgICAgZGF0YTogbGVnZW5kRGF0YS52YWx1ZXMKICAgICAgICB9KTsKICAgICAgICByZXR1cm4gZmlsdGVycy5sZW5ndGg7CiAgICAgIH07CiAgICAgIC8qKgogICAgICAqIEtleWRvd24gbGlzdGVuZXIgZm9yIGEgbGVnZW5kIGVudHJ5LgogICAgICAqIFRoaXMgd2lsbCBjbG9zZSB0aGUgZGV0YWlscyBwYW5lbCBvZiB0aGlzIGxlZ2VuZCBlbnRyeSB3aGVuIHByZXNzaW5nIEVzY2FwZS4KICAgICAgKi8KCgogICAgICAkc2NvcGUub25MZWdlbmRFbnRyeUtleWRvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gX2V1aS5rZXlDb2Rlcy5FU0NBUEUpIHsKICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICRzY29wZS5zaG93bkRldGFpbHMgPSB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgICB9OwoKICAgICAgJHNjb3BlLnRvZ2dsZURldGFpbHMgPSBmdW5jdGlvbiAobGFiZWwpIHsKICAgICAgICAkc2NvcGUuc2hvd25EZXRhaWxzID0gJHNjb3BlLnNob3duRGV0YWlscyA9PT0gbGFiZWwgPyB1bmRlZmluZWQgOiBsYWJlbDsKICAgICAgfTsKCiAgICAgICRzY29wZS5hcmVEZXRhaWxzVmlzaWJsZSA9IGZ1bmN0aW9uIChsYWJlbCkgewogICAgICAgIHJldHVybiAkc2NvcGUuc2hvd25EZXRhaWxzID09PSBsYWJlbDsKICAgICAgfTsKCiAgICAgICRzY29wZS5jb2xvcnMgPSBbJyMzRjY4MzMnLCAnIzk2NzMwMicsICcjMkY1NzVFJywgJyM5OTQ0MEEnLCAnIzU4MTQwQycsICcjMDUyQjUxJywgJyM1MTE3NDknLCAnIzNGMkI1QicsIC8vNgogICAgICAnIzUwODY0MicsICcjQ0NBMzAwJywgJyM0NDdFQkMnLCAnI0MxNUMxNycsICcjODkwRjAyJywgJyMwQTQzN0MnLCAnIzZEMUY2MicsICcjNTg0NDc3JywgLy8yCiAgICAgICcjNjI5RTUxJywgJyNFNUFDMEUnLCAnIzY0QjBDOCcsICcjRTA3NTJEJywgJyNCRjFCMDAnLCAnIzBBNTBBMScsICcjOTYyRDgyJywgJyM2MTREOTMnLCAvLzQKICAgICAgJyM3RUIyNkQnLCAnI0VBQjgzOScsICcjNkVEMEUwJywgJyNFRjg0M0MnLCAnI0UyNEQ0MicsICcjMUY3OEMxJywgJyNCQTQzQTknLCAnIzcwNURBMCcsIC8vIE5vcm1hbAogICAgICAnIzlBQzQ4QScsICcjRjJDOTZEJywgJyM2NUM1REInLCAnI0Y5OTM0RScsICcjRUE2NDYwJywgJyM1MTk1Q0UnLCAnI0Q2ODNDRScsICcjODA2RUI3JywgLy81CiAgICAgICcjQjdEQkFCJywgJyNGNEQ1OTgnLCAnIzcwREJFRCcsICcjRjlCQThGJywgJyNGMjkxOTEnLCAnIzgyQjVEOCcsICcjRTVBOEUyJywgJyNBRUEyRTAnLCAvLzMKICAgICAgJyNFMEY5RDcnLCAnI0ZDRUFDQScsICcjQ0ZGQUZGJywgJyNGOUUyRDInLCAnI0ZDRTJERScsICcjQkFERkY0JywgJyNGOUQ5RjknLCAnI0RFREFGNycgLy83CiAgICAgIF07CgogICAgICBmdW5jdGlvbiByZWZyZXNoKCkgewogICAgICAgIHZhciB2aXNsaWJWaXMgPSAkc2NvcGUudmlzLnZpc2xpYlZpczsKCiAgICAgICAgaWYgKCF2aXNsaWJWaXMgfHwgIXZpc2xpYlZpcy52aXNDb25maWcpIHsKICAgICAgICAgICRzY29wZS5sYWJlbHMgPSBbewogICAgICAgICAgICBsYWJlbDogX2kxOG4uaTE4bi50cmFuc2xhdGUoJ2NvbW1vbi51aS52aXMudmlzVHlwZXMubGVnZW5kLmxvYWRpbmdMYWJlbCcsIHsKICAgICAgICAgICAgICBkZWZhdWx0TWVzc2FnZTogJ2xvYWRpbmfigKYnCiAgICAgICAgICAgIH0pCiAgICAgICAgICB9XTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9IC8vIG1ha2Ugc3VyZSB2aXNsaWIgaXMgZGVmaW5lZCBhdCB0aGlzIHBvaW50CgoKICAgICAgICBpZiAoJHNjb3BlLnVpU3RhdGUuZ2V0KCd2aXMubGVnZW5kT3BlbicpID09IG51bGwgJiYgJHNjb3BlLnZpcy5wYXJhbXMuYWRkTGVnZW5kICE9IG51bGwpIHsKICAgICAgICAgICRzY29wZS5vcGVuID0gJHNjb3BlLnZpcy5wYXJhbXMuYWRkTGVnZW5kOwogICAgICAgIH0KCiAgICAgICAgaWYgKENVU1RPTV9MRUdFTkRfVklTX1RZUEVTLmluY2x1ZGVzKHZpc2xpYlZpcy52aXNDb25maWdBcmdzLnR5cGUpKSB7CiAgICAgICAgICB2YXIgbGFiZWxzID0gdmlzbGliVmlzLmdldExlZ2VuZExhYmVscygpOwoKICAgICAgICAgIGlmIChsYWJlbHMpIHsKICAgICAgICAgICAgJHNjb3BlLmxhYmVscyA9IF9sb2Rhc2guZGVmYXVsdC5tYXAobGFiZWxzLCBmdW5jdGlvbiAobGFiZWwpIHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICRzY29wZS5sYWJlbHMgPSBnZXRMYWJlbHMoJHNjb3BlLmRhdGEsIHZpc2xpYlZpcy52aXNDb25maWdBcmdzLnR5cGUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKHZpc2xpYlZpcy52aXNDb25maWcpIHsKICAgICAgICAgICRzY29wZS5nZXRDb2xvciA9IHZpc2xpYlZpcy52aXNDb25maWcuZGF0YS5nZXRDb2xvckZ1bmMoKTsKICAgICAgICB9CgogICAgICAgICRzY29wZS50YWJsZUFnZ3MgPSAoMCwgX3V0aWxpdGllcy5nZXRUYWJsZUFnZ3MpKCRzY29wZS52aXMpOwogICAgICB9IC8vIE1vc3Qgb2YgdGhlc2UgZnVuY3Rpb25zIHdlcmUgbW92ZWQgZGlyZWN0bHkgZnJvbSB0aGUgb2xkIExlZ2VuZCBjbGFzcy4gTm90IGEgZmFuIG9mIHRoaXMuCgoKICAgICAgZnVuY3Rpb24gZ2V0TGFiZWxzKGRhdGEsIHR5cGUpIHsKICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBbXTsKICAgICAgICBkYXRhID0gZGF0YS5jb2x1bW5zIHx8IGRhdGEucm93cyB8fCBbZGF0YV07CiAgICAgICAgaWYgKHR5cGUgPT09ICdwaWUnKSByZXR1cm4gX2RhdGEuRGF0YS5wcm90b3R5cGUucGllTmFtZXMoZGF0YSk7CiAgICAgICAgcmV0dXJuIGdldFNlcmllc0xhYmVscyhkYXRhKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gZ2V0U2VyaWVzTGFiZWxzKGRhdGEpIHsKICAgICAgICB2YXIgdmFsdWVzID0gZGF0YS5tYXAoZnVuY3Rpb24gKGNoYXJ0KSB7CiAgICAgICAgICByZXR1cm4gY2hhcnQuc2VyaWVzOwogICAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgcmV0dXJuIGEuY29uY2F0KGIpOwogICAgICAgIH0sIFtdKTsKICAgICAgICByZXR1cm4gX2xvZGFzaC5kZWZhdWx0LmNvbXBhY3QoX2xvZGFzaC5kZWZhdWx0LnVuaXEodmFsdWVzLCAnbGFiZWwnKSkubWFwKGZ1bmN0aW9uIChsYWJlbCkgewogICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIGxhYmVsLCB7CiAgICAgICAgICAgIHZhbHVlczogW2xhYmVsLnZhbHVlc1swXS5zZXJpZXNSYXddCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQogIH07Cn0pOw=="},null]}