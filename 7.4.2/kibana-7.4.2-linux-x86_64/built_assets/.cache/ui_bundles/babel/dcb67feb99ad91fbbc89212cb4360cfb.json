{"remainingRequest":"node_modules/thread-loader/dist/cjs.js??ref--8-1!node_modules/babel-loader/lib/index.js??ref--8-2!src/legacy/ui/public/visualize/components/visualization_chart.js","dependencies":[{"path":"src/legacy/ui/public/visualize/components/visualization_chart.js","mtime":1572296413420},{"path":"node_modules/cache-loader/dist/cjs.js","mtime":1572297165884},{"path":"node_modules/thread-loader/dist/cjs.js","mtime":1572297178034},{"path":"node_modules/babel-loader/lib/index.js","mtime":1572297165764}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuVmlzdWFsaXphdGlvbkNoYXJ0ID0gdm9pZCAwOwoKdmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZSgicmVhY3QiKSk7Cgp2YXIgUnggPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKCJyeGpzIikpOwoKdmFyIF9vcGVyYXRvcnMgPSByZXF1aXJlKCJyeGpzL29wZXJhdG9ycyIpOwoKdmFyIF9yZW5kZXJfY29tcGxldGUgPSByZXF1aXJlKCIuLi8uLi9yZW5kZXJfY29tcGxldGUiKTsKCnZhciBfcmVzaXplX2NoZWNrZXIgPSByZXF1aXJlKCIuLi8uLi9yZXNpemVfY2hlY2tlciIpOwoKdmFyIF91cGRhdGVfc3RhdHVzID0gcmVxdWlyZSgiLi4vLi4vdmlzL3VwZGF0ZV9zdGF0dXMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgewogIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsKICAgIHJldHVybiBvYmo7CiAgfSBlbHNlIHsKICAgIHZhciBuZXdPYmogPSB7fTsKCiAgICBpZiAob2JqICE9IG51bGwpIHsKICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsKCiAgICAgICAgICBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsKICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgbmV3T2JqLmRlZmF1bHQgPSBvYmo7CiAgICByZXR1cm4gbmV3T2JqOwogIH0KfQoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsKICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogewogICAgZGVmYXVsdDogb2JqCiAgfTsKfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsKICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mMihTeW1ib2wuaXRlcmF0b3IpID09PSAic3ltYm9sIikgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBfdHlwZW9mMihvYmopOwogICAgfTsKICB9IGVsc2UgewogICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7CiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IF90eXBlb2YyKG9iaik7CiAgICB9OwogIH0KCiAgcmV0dXJuIF90eXBlb2Yob2JqKTsKfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgewogIHRyeSB7CiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7CiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZWplY3QoZXJyb3IpOwogICAgcmV0dXJuOwogIH0KCiAgaWYgKGluZm8uZG9uZSkgewogICAgcmVzb2x2ZSh2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsKICB9Cn0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHZhciBzZWxmID0gdGhpcywKICAgICAgICBhcmdzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOwoKICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHsKICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7CiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOwogICAgICB9CgogICAgICBfbmV4dCh1bmRlZmluZWQpOwogICAgfSk7CiAgfTsKfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgewogIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsKICB9Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgfQp9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgewogIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsKICAgIHJldHVybiBjYWxsOwogIH0KCiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7Cn0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7CiAgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsKICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7CiAgfTsKICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOwp9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsKICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIHNlbGY7Cn0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgewogIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOwogIH0KCiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7CiAgICBjb25zdHJ1Y3RvcjogewogICAgICB2YWx1ZTogc3ViQ2xhc3MsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICBjb25maWd1cmFibGU6IHRydWUKICAgIH0KICB9KTsKICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsKfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsKICAgIG8uX19wcm90b19fID0gcDsKICAgIHJldHVybiBvOwogIH07CgogIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7Cn0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsKICBpZiAoa2V5IGluIG9iaikgewogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7CiAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICB3cml0YWJsZTogdHJ1ZQogICAgfSk7CiAgfSBlbHNlIHsKICAgIG9ialtrZXldID0gdmFsdWU7CiAgfQoKICByZXR1cm4gb2JqOwp9Cgp2YXIgVmlzdWFsaXphdGlvbkNoYXJ0ID0KLyojX19QVVJFX18qLwpmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkgewogIF9pbmhlcml0cyhWaXN1YWxpemF0aW9uQ2hhcnQsIF9SZWFjdCRDb21wb25lbnQpOwoKICBmdW5jdGlvbiBWaXN1YWxpemF0aW9uQ2hhcnQocHJvcHMpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlzdWFsaXphdGlvbkNoYXJ0KTsKCiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihWaXN1YWxpemF0aW9uQ2hhcnQpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJyZXNpemVDaGVja2VyIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJ2aXN1YWxpemF0aW9uIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjaGFydERpdiIsIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZVJlZigpKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJjb250YWluZXJEaXYiLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVSZWYoKSk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyU3ViamVjdCIsIHZvaWQgMCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAicmVuZGVyU3Vic2NyaXB0aW9uIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJvblVpU3RhdGVDaGFuZ2VkIiwgZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5zdGFydFJlbmRlclZpc3VhbGl6YXRpb24oKTsKICAgIH0pOwoKICAgIF90aGlzLnJlbmRlclN1YmplY3QgPSBuZXcgUnguU3ViamVjdCgpOwoKICAgIHZhciByZW5kZXIkID0gX3RoaXMucmVuZGVyU3ViamVjdC5hc09ic2VydmFibGUoKS5waXBlKCgwLCBfb3BlcmF0b3JzLnNoYXJlKSgpKTsKCiAgICB2YXIgc3VjY2VzcyQgPSByZW5kZXIkLnBpcGUoKDAsIF9vcGVyYXRvcnMudGFwKShmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5jaGFydERpdi5jdXJyZW50KSB7CiAgICAgICAgKDAsIF9yZW5kZXJfY29tcGxldGUuZGlzcGF0Y2hSZW5kZXJTdGFydCkoX3RoaXMuY2hhcnREaXYuY3VycmVudCk7CiAgICAgIH0KICAgIH0pLCAoMCwgX29wZXJhdG9ycy5maWx0ZXIpKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgIHZhciB2aXMgPSBfcmVmLnZpcywKICAgICAgICAgIHZpc0RhdGEgPSBfcmVmLnZpc0RhdGEsCiAgICAgICAgICBjb250YWluZXIgPSBfcmVmLmNvbnRhaW5lcjsKICAgICAgcmV0dXJuIHZpcyAmJiBjb250YWluZXIgJiYgKCF2aXMudHlwZS5yZXF1aXJlc1NlYXJjaCB8fCB2aXNEYXRhKTsKICAgIH0pLCAoMCwgX29wZXJhdG9ycy5kZWJvdW5jZVRpbWUpKDEwMCksICgwLCBfb3BlcmF0b3JzLnN3aXRjaE1hcCkoCiAgICAvKiNfX1BVUkVfXyovCiAgICBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZjIpIHsKICAgICAgICB2YXIgdmlzLCB2aXNEYXRhLCB2aXNQYXJhbXMsIGNvbnRhaW5lciwgc3RhdHVzOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHZpcyA9IF9yZWYyLnZpcywgdmlzRGF0YSA9IF9yZWYyLnZpc0RhdGEsIHZpc1BhcmFtcyA9IF9yZWYyLnZpc1BhcmFtcywgY29udGFpbmVyID0gX3JlZjIuY29udGFpbmVyOwoKICAgICAgICAgICAgICAgIGlmIChfdGhpcy52aXN1YWxpemF0aW9uKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Zpc3VhbGl6YXRpb24gaW1wbGVtZW50YXRpb24gd2FzIG5vdCBpbml0aWFsaXplZCBvbiBmaXJzdCByZW5kZXIuJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHZpcy5zaXplID0gW2NvbnRhaW5lci5jbGllbnRXaWR0aCwgY29udGFpbmVyLmNsaWVudEhlaWdodF07CiAgICAgICAgICAgICAgICBzdGF0dXMgPSAoMCwgX3VwZGF0ZV9zdGF0dXMuZ2V0VXBkYXRlU3RhdHVzKSh2aXMudHlwZS5yZXF1aXJlc1VwZGF0ZVN0YXR1cywgX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIF90aGlzLnByb3BzKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF90aGlzLnZpc3VhbGl6YXRpb24ucmVuZGVyKHZpc0RhdGEsIHZpc1BhcmFtcywgc3RhdHVzKSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCkpKTsKICAgIHZhciByZXF1ZXN0RXJyb3IkID0gcmVuZGVyJC5waXBlKCgwLCBfb3BlcmF0b3JzLmZpbHRlcikoZnVuY3Rpb24gKF9yZWY0KSB7CiAgICAgIHZhciB2aXMgPSBfcmVmNC52aXM7CiAgICAgIHJldHVybiB2aXMucmVxdWVzdEVycm9yOwogICAgfSkpOwogICAgX3RoaXMucmVuZGVyU3Vic2NyaXB0aW9uID0gUngubWVyZ2Uoc3VjY2VzcyQsIHJlcXVlc3RFcnJvciQpLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5jaGFydERpdi5jdXJyZW50ICE9PSBudWxsKSB7CiAgICAgICAgKDAsIF9yZW5kZXJfY29tcGxldGUuZGlzcGF0Y2hSZW5kZXJDb21wbGV0ZSkoX3RoaXMuY2hhcnREaXYuY3VycmVudCk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFZpc3VhbGl6YXRpb25DaGFydCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgewogICAgICAgIGNsYXNzTmFtZTogInZpc0NoYXJ0X19jb250YWluZXIga2JuLXJlc2V0Rm9jdXNTdGF0ZSIsCiAgICAgICAgdGFiSW5kZXg6IDAsCiAgICAgICAgcmVmOiB0aGlzLmNvbnRhaW5lckRpdgogICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJwIiwgewogICAgICAgIGNsYXNzTmFtZTogImV1aVNjcmVlblJlYWRlck9ubHkiCiAgICAgIH0sIHRoaXMucHJvcHMudmlzLnR5cGUudGl0bGUsICIgdmlzdWFsaXphdGlvbiwgbm90IHlldCBhY2Nlc3NpYmxlIiksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIHsKICAgICAgICAiYXJpYS1oaWRkZW4iOiAhdGhpcy5wcm9wcy52aXMudHlwZS5pc0FjY2Vzc2libGUsCiAgICAgICAgY2xhc3NOYW1lOiAidmlzQ2hhcnQiLAogICAgICAgIHJlZjogdGhpcy5jaGFydERpdgogICAgICB9KSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29tcG9uZW50RGlkTW91bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5jaGFydERpdi5jdXJyZW50IHx8ICF0aGlzLmNvbnRhaW5lckRpdi5jdXJyZW50KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjaGFydERpdiBhbmQgY3VycmVudERpdiByZWZlcmVuY2Ugc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50LicpOwogICAgICB9CgogICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLAogICAgICAgICAgdmlzID0gX3RoaXMkcHJvcHMudmlzLAogICAgICAgICAgb25Jbml0ID0gX3RoaXMkcHJvcHMub25Jbml0OwogICAgICB2YXIgVmlzdWFsaXphdGlvbiA9IHZpcy50eXBlLnZpc3VhbGl6YXRpb247CiAgICAgIHRoaXMudmlzdWFsaXphdGlvbiA9IG5ldyBWaXN1YWxpemF0aW9uKHRoaXMuY2hhcnREaXYuY3VycmVudCwgdmlzKTsKCiAgICAgIGlmIChvbkluaXQpIHsKICAgICAgICAvLyBJbiBjYXNlIHRoZSB2aXN1YWxpemF0aW9uIGltcGxlbWVudGF0aW9uIGhhcyBhbiBpc0xvYWRlZCBmdW5jdGlvbiwgd2UKICAgICAgICAvLyBjYWxsIHRoYXQgYW5kIHdhaXQgZm9yIHRoZSByZXN1bHQgdG8gcmVzb2x2ZSAoaW4gY2FzZSBpdCB3YXMgYSBwcm9taXNlKS4KICAgICAgICB2YXIgdmlzTG9hZGVkID0gdGhpcy52aXN1YWxpemF0aW9uLmlzTG9hZGVkICYmIHRoaXMudmlzdWFsaXphdGlvbi5pc0xvYWRlZCgpOwogICAgICAgIFByb21pc2UucmVzb2x2ZSh2aXNMb2FkZWQpLnRoZW4ob25Jbml0KTsKICAgICAgfSAvLyBXZSBrbm93IHRoYXQgY29udGFpbmVyRGl2LmN1cnJlbnQgd2lsbCBuZXZlciBiZSBudWxsLCBzaW5jZSB3ZSB3aWxsIGFsd2F5cwogICAgICAvLyBoYXZlIHJlbmRlcmVkIGFuZCB0aGUgZGl2IGlzIGFsd2F5cyByZW5kZXJlZCBpbnRvIHRoZSB0cmVlIChpLmUuIG5vdAogICAgICAvLyBpbnNpZGUgYW55IGNvbmRpdGlvbikuCgoKICAgICAgdGhpcy5yZXNpemVDaGVja2VyID0gbmV3IF9yZXNpemVfY2hlY2tlci5SZXNpemVDaGVja2VyKHRoaXMuY29udGFpbmVyRGl2LmN1cnJlbnQpOwogICAgICB0aGlzLnJlc2l6ZUNoZWNrZXIub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gX3RoaXMyLnN0YXJ0UmVuZGVyVmlzdWFsaXphdGlvbigpOwogICAgICB9KTsKCiAgICAgIGlmICh0aGlzLnByb3BzLmxpc3Rlbk9uQ2hhbmdlKSB7CiAgICAgICAgdGhpcy5wcm9wcy51aVN0YXRlLm9uKCdjaGFuZ2UnLCB0aGlzLm9uVWlTdGF0ZUNoYW5nZWQpOwogICAgICB9CgogICAgICB0aGlzLnN0YXJ0UmVuZGVyVmlzdWFsaXphdGlvbigpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudERpZFVwZGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkgewogICAgICB0aGlzLnN0YXJ0UmVuZGVyVmlzdWFsaXphdGlvbigpOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbXBvbmVudFdpbGxVbm1vdW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHsKICAgICAgaWYgKHRoaXMucmVuZGVyU3Vic2NyaXB0aW9uKSB7CiAgICAgICAgdGhpcy5yZW5kZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMucmVzaXplQ2hlY2tlcikgewogICAgICAgIHRoaXMucmVzaXplQ2hlY2tlci5kZXN0cm95KCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnZpc3VhbGl6YXRpb24pIHsKICAgICAgICB0aGlzLnZpc3VhbGl6YXRpb24uZGVzdHJveSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhcnRSZW5kZXJWaXN1YWxpemF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydFJlbmRlclZpc3VhbGl6YXRpb24oKSB7CiAgICAgIGlmICh0aGlzLmNvbnRhaW5lckRpdi5jdXJyZW50ICYmIHRoaXMuY2hhcnREaXYuY3VycmVudCkgewogICAgICAgIHRoaXMucmVuZGVyU3ViamVjdC5uZXh0KHsKICAgICAgICAgIHZpczogdGhpcy5wcm9wcy52aXMsCiAgICAgICAgICB2aXNEYXRhOiB0aGlzLnByb3BzLnZpc0RhdGEsCiAgICAgICAgICB2aXNQYXJhbXM6IHRoaXMucHJvcHMudmlzUGFyYW1zLAogICAgICAgICAgY29udGFpbmVyOiB0aGlzLmNvbnRhaW5lckRpdi5jdXJyZW50CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBWaXN1YWxpemF0aW9uQ2hhcnQ7Cn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTsKCmV4cG9ydHMuVmlzdWFsaXphdGlvbkNoYXJ0ID0gVmlzdWFsaXphdGlvbkNoYXJ0Ow=="},null]}