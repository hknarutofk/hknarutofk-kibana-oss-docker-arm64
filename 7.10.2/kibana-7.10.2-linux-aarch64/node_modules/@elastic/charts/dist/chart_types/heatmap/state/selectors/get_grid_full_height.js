"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var re_reselect_1 = __importDefault(require("re-reselect"));
var get_chart_id_1 = require("../../../../state/selectors/get_chart_id");
var get_legend_size_1 = require("../../../../state/selectors/get_legend_size");
var get_settings_specs_1 = require("../../../../state/selectors/get_settings_specs");
var commons_1 = require("../../../../utils/commons");
var get_heatmap_config_1 = require("./get_heatmap_config");
var get_heatmap_table_1 = require("./get_heatmap_table");
var getParentDimension = function (state) { return state.parentDimensions; };
exports.getGridHeightParamsSelector = re_reselect_1.default([
    get_legend_size_1.getLegendSizeSelector,
    get_settings_specs_1.getSettingsSpecSelector,
    getParentDimension,
    get_heatmap_config_1.getHeatmapConfigSelector,
    get_heatmap_table_1.getHeatmapTableSelector,
], function (legendSize, _a, _b, _c, _d) {
    var showLegend = _a.showLegend, legendPosition = _a.legendPosition;
    var containerHeight = _b.height;
    var _e = _c.xAxisLabel, padding = _e.padding, visible = _e.visible, fontSize = _e.fontSize, grid = _c.grid, maxLegendHeight = _c.maxLegendHeight;
    var yValues = _d.yValues;
    var xAxisHeight = visible ? fontSize : 0;
    var totalVerticalPadding = padding * 2;
    var legendHeight = 0;
    if (showLegend && (legendPosition === commons_1.Position.Top || legendPosition === commons_1.Position.Bottom)) {
        legendHeight = (maxLegendHeight !== null && maxLegendHeight !== void 0 ? maxLegendHeight : legendSize.height);
    }
    var verticalRemainingSpace = containerHeight - xAxisHeight - totalVerticalPadding - legendHeight;
    var gridCellHeight = getGridCellHeight(yValues, grid, verticalRemainingSpace);
    var height = gridCellHeight * yValues.length;
    var pageSize = gridCellHeight > 0 && height > containerHeight
        ? Math.floor(verticalRemainingSpace / gridCellHeight)
        : yValues.length;
    return {
        height: height,
        gridCellHeight: gridCellHeight,
        pageSize: pageSize,
    };
})(get_chart_id_1.getChartIdSelector);
function getGridCellHeight(yValues, grid, height) {
    if (yValues.length === 0) {
        return height;
    }
    var stretchedHeight = height / yValues.length;
    if (stretchedHeight < grid.cellHeight.min) {
        return grid.cellHeight.min;
    }
    if (grid.cellHeight.max !== 'fill' && stretchedHeight > grid.cellHeight.max) {
        return grid.cellHeight.max;
    }
    return stretchedHeight;
}
//# sourceMappingURL=get_grid_full_height.js.map